import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Handler;
import android.os.Looper;
import android.widget.Toast;
import android.widget.CheckBox;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import me.hd.wauxv.data.bean.info.FriendInfo;
import me.hd.wauxv.data.bean.info.GroupInfo;
import android.text.TextUtils;
import android.widget.Button;
import android.widget.ListView;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.text.TextWatcher;
import android.text.Editable;
import android.widget.ArrayAdapter;
import android.widget.AdapterView;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import android.view.Gravity;
import android.widget.TextView;
import android.widget.ScrollView;
import java.lang.reflect.Method;
import java.util.regex.Pattern;
import android.widget.RadioGroup;
import android.widget.RadioButton;
import java.util.Arrays;
import android.text.InputType;
import android.content.Context;
import java.util.Random;
import java.io.File;
import java.io.FilenameFilter;
import java.util.Calendar;
import android.widget.TimePicker;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.Objects;
import android.view.MotionEvent;
import java.util.Collections;

// OkHttp3 and Fastjson2 imports for AI functionality
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONObject;
import com.alibaba.fastjson2.JSONArray;
import com.alibaba.fastjson2.JSONPath;
import com.alibaba.fastjson2.JSONException;

// DeviceInfo related imports
import android.provider.Settings;
import java.util.UUID;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

// UI related imports from Â∞èÊô∫bot
import android.app.Activity;
import android.app.Dialog;
import android.view.Window;
import android.view.WindowManager;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.UnderlineSpan;
import android.graphics.Typeface;

// === Êñá‰ª∂/Êñá‰ª∂Â§πÊµèËßà‰∏éÂ§öÈÄâ ===
final String DEFAULT_LAST_FOLDER_SP_AUTO = "last_folder_for_media_auto";
final String ROOT_FOLDER = "/storage/emulated/0";

// ÂõûË∞ÉÊé•Âè£
interface MediaSelectionCallback {
    void onSelected(ArrayList<String> selectedFiles);
}

void browseFolderForSelectionAuto(final File startFolder, final String wantedExtFilter, final String currentSelection, final MediaSelectionCallback callback, final boolean allowFolderSelect) {
    putString(DEFAULT_LAST_FOLDER_SP_AUTO, startFolder.getAbsolutePath());
    ArrayList<String> names = new ArrayList<String>();
    final ArrayList<Object> items = new ArrayList<Object>();

    if (!startFolder.getAbsolutePath().equals(ROOT_FOLDER)) {
        names.add("‚¨Ü ‰∏ä‰∏ÄÁ∫ß");
        items.add(startFolder.getParentFile());
    }

    File[] subs = startFolder.listFiles();
    if (subs != null) {
        for (int i = 0; i < subs.length; i++) {
            File f = subs[i];
            if (f.isDirectory()) {
                names.add("üìÅ " + f.getName());
                items.add(f);
            }
        }
    }

    AlertDialog.Builder builder = new AlertDialog.Builder(getTopActivity());
    builder.setTitle("ÊµèËßàÔºö" + startFolder.getAbsolutePath());
    final ListView list = new ListView(getTopActivity());
    list.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_1, names));
    builder.setView(list);

    final AlertDialog dialog = builder.create();
    list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
        public void onItemClick(AdapterView<?> parent, View view, int pos, long id) {
            dialog.dismiss();
            Object selected = items.get(pos);
            if (selected instanceof File) {
                File sel = (File) selected;
                if (sel.isDirectory()) {
                    browseFolderForSelectionAuto(sel, wantedExtFilter, currentSelection, callback, allowFolderSelect);
                }
            }
        }
    });

    builder.setPositiveButton("Âú®Ê≠§ÁõÆÂΩïÈÄâÊã©Êñá‰ª∂", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface d, int which) {
            d.dismiss();
            scanFilesMulti(startFolder, wantedExtFilter, currentSelection, callback);
        }
    });

    if (allowFolderSelect) {
        builder.setNeutralButton("ÈÄâÊã©Ê≠§Êñá‰ª∂Â§π", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface d, int which) {
                d.dismiss();
                ArrayList<String> selected = new ArrayList<String>();
                selected.add(startFolder.getAbsolutePath());
                callback.onSelected(selected);
            }
        });
    }

    builder.setNegativeButton("ÂèñÊ∂à", null);
    final AlertDialog finalDialog = builder.create();
    finalDialog.setOnShowListener(new DialogInterface.OnShowListener() {
        public void onShow(DialogInterface d) {
            setupUnifiedDialog(finalDialog);
        }
    });
    finalDialog.show();
}

void scanFilesMulti(final File folder, final String extFilter, final String currentSelection, final MediaSelectionCallback callback) {
    final ArrayList<String> names = new ArrayList<String>();
    final ArrayList<File> files = new ArrayList<File>();

    File[] list = folder.listFiles();
    if (list != null) {
        String[] exts = TextUtils.isEmpty(extFilter) ? new String[0] : extFilter.split(",");
        for (int i = 0; i < list.length; i++) {
            File f = list[i];
            if (f.isFile()) {
                boolean matches = exts.length == 0;
                for (int j = 0; j < exts.length; j++) {
                    String e = exts[j];
                    if (f.getName().toLowerCase().endsWith(e.trim().toLowerCase())) {
                        matches = true;
                        break;
                    }
                }
                if (matches) {
                    names.add(f.getName());
                    files.add(f);
                }
            }
        }
    }

    if (names.isEmpty()) {
        toast("ËØ•ÁõÆÂΩïÊó†ÂåπÈÖçÊñá‰ª∂");
        return;
    }

    final Set<String> selectedPathsSet = new HashSet<String>();
    if (!TextUtils.isEmpty(currentSelection)) {
        String[] parts = currentSelection.split(";;;");
        for (int i = 0; i < parts.length; i++) {
            String p = parts[i];
            if (!TextUtils.isEmpty(p.trim())) selectedPathsSet.add(p.trim());
        }
    }

    AlertDialog.Builder builder = new AlertDialog.Builder(getTopActivity());
    builder.setTitle("ÈÄâÊã©Êñá‰ª∂ÔºàÂèØÂ§öÈÄâÔºâÔºö" + folder.getAbsolutePath());
    final ListView listView = new ListView(getTopActivity());
    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
    listView.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, names));
    builder.setView(listView);

    for (int i = 0; i < files.size(); i++) {
        if (selectedPathsSet.contains(files.get(i).getAbsolutePath())) {
            listView.setItemChecked(i, true);
        }
    }

    builder.setPositiveButton("Á°ÆËÆ§ÈÄâÊã©", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface d, int which) {
            ArrayList<String> selectedPaths = new ArrayList<String>();
            for (int i = 0; i < names.size(); i++) {
                if (listView.isItemChecked(i)) {
                    selectedPaths.add(files.get(i).getAbsolutePath());
                }
            }
            callback.onSelected(selectedPaths);
        }
    });

    builder.setNegativeButton("ÂèñÊ∂à", null);
    final AlertDialog finalDialog = builder.create();
    finalDialog.setOnShowListener(new DialogInterface.OnShowListener() {
        public void onShow(DialogInterface d) {
            setupUnifiedDialog(finalDialog);
        }
    });
    finalDialog.show();
}

private String joinMediaPaths(ArrayList<String> paths, boolean isMultiList) {
    if (paths == null || paths.isEmpty()) return "";
    if (!isMultiList) return paths.get(0);
    return TextUtils.join(";;;", paths);
}

// Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÂÖ®ÈÄâÁöÑËæÖÂä©ÊñπÊ≥ï
private boolean shouldSelectAll(List currentFilteredIds, Set selectedIds) {
    int selectableCount = currentFilteredIds.size();
    int checkedCount = 0;
    for (int i = 0; i < selectableCount; i++) {
        String id = (String) currentFilteredIds.get(i);
        if (selectedIds.contains(id)) {
            checkedCount++;
        }
    }
    return selectableCount > 0 && checkedCount < selectableCount;
}

// Êõ¥Êñ∞ÂÖ®ÈÄâÊåâÈíÆÊñáÊú¨ÁöÑËæÖÂä©ÊñπÊ≥ï
private void updateSelectAllButton(AlertDialog dialog, List currentFilteredIds, Set selectedIds) {
    Button neutralButton = dialog.getButton(AlertDialog.BUTTON_NEUTRAL);
    if (neutralButton != null) {
        if (shouldSelectAll(currentFilteredIds, selectedIds)) {
            neutralButton.setText("ÂÖ®ÈÄâ");
        } else {
            neutralButton.setText("ÂèñÊ∂àÂÖ®ÈÄâ");
        }
    }
}

// „ÄêÊñ∞Â¢û„ÄëÂä®ÊÄÅË∞ÉÊï¥ListViewÈ´òÂ∫¶ÁöÑËæÖÂä©ÊñπÊ≥ïÔºàÊúÄÂ∞è50dp/È°πÔºåÊúÄÂ§ß300dpÔºâ
private void adjustListViewHeight(ListView listView, int itemCount) {
    if (itemCount <= 0) {
        listView.getLayoutParams().height = dpToPx(50); // ÊúÄÂ∞èÈ´òÂ∫¶ÔºåÈÅøÂÖçÂÆåÂÖ®ÈöêËóè
    } else {
        int itemHeight = dpToPx(50); // ÂÅáËÆæÊØè‰∏™È°πÁ∫¶50dp
        int calculatedHeight = Math.min(itemCount * itemHeight, dpToPx(300));
        listView.getLayoutParams().height = calculatedHeight;
    }
    listView.requestLayout();
}

// „Äê‰ºòÂåñ„ÄëÊîπËøõListViewËß¶Êë∏‰∫ã‰ª∂Â§ÑÁêÜÔºåÁ°Æ‰øùÁõ¥Êé•Ëß¶Êë∏Âç≥ÂèØÊªöÂä®ÔºàÂú®ACTION_DOWNÊó∂Êã¶Êà™ScrollViewÔºâ
private void setupListViewTouchForScroll(ListView listView) {
    listView.setOnTouchListener(new View.OnTouchListener() {
        public boolean onTouch(View v, MotionEvent event) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    // Ëß¶Êë∏ÂºÄÂßãÊó∂ÔºåËØ∑Ê±ÇÁà∂ÂÆπÂô®ÔºàScrollViewÔºâ‰∏çË¶ÅÊã¶Êà™‰∫ã‰ª∂
                    v.getParent().requestDisallowInterceptTouchEvent(true);
                    break;
                case MotionEvent.ACTION_UP:
                case MotionEvent.ACTION_CANCEL:
                    // Ëß¶Êë∏ÁªìÊùüÊó∂ÔºåÂÖÅËÆ∏Áà∂ÂÆπÂô®ÊÅ¢Â§çÊã¶Êà™
                    v.getParent().requestDisallowInterceptTouchEvent(false);
                    break;
            }
            return false; // ËÆ©ListViewÂ§ÑÁêÜ‰∫ã‰ª∂
        }
    });
}

// Ëá™Âä®ÂõûÂ§çÈÖçÁΩÆÁõ∏ÂÖ≥ÁöÑkey
private final String AUTO_REPLY_RULES_KEY = "auto_reply_rules";
private final String AUTO_REPLY_FRIEND_ENABLED_KEY = "auto_reply_friend_enabled";
private final String AUTO_REPLY_GROUP_ENABLED_KEY = "auto_reply_group_enabled";
private final String AUTO_REPLY_ENABLED_FRIENDS_KEY = "auto_reply_enabled_friends";
private final String AUTO_REPLY_ENABLED_GROUPS_KEY = "auto_reply_enabled_groups";

// Ëá™Âä®ÂêåÊÑèÂ•ΩÂèãËØ∑Ê±ÇÁõ∏ÂÖ≥ÁöÑkey
private final String AUTO_ACCEPT_FRIEND_ENABLED_KEY = "auto_accept_friend_enabled";
private final String AUTO_ACCEPT_DELAY_KEY = "auto_accept_delay";
private final String AUTO_ACCEPT_REPLY_ITEMS_KEY = "auto_accept_reply_items_v2";

// ÊàëÊ∑ªÂä†Â•ΩÂèãË¢´ÈÄöËøáÂêéÔºåËá™Âä®ÂõûÂ§çÁõ∏ÂÖ≥ÁöÑkey
private final String GREET_ON_ACCEPTED_ENABLED_KEY = "greet_on_accepted_enabled";
private final String GREET_ON_ACCEPTED_DELAY_KEY = "greet_on_accepted_delay";
private final String GREET_ON_ACCEPTED_REPLY_ITEMS_KEY = "greet_on_accepted_reply_items_v2";
private final String FRIEND_ADD_SUCCESS_KEYWORD = "ÊàëÈÄöËøá‰∫Ü‰Ω†ÁöÑÊúãÂèãÈ™åËØÅËØ∑Ê±ÇÔºåÁé∞Âú®Êàë‰ª¨ÂèØ‰ª•ÂºÄÂßãËÅäÂ§©‰∫Ü";

// Â∞èÊô∫AI ÈÖçÁΩÆÁõ∏ÂÖ≥ÁöÑkey
private final String XIAOZHI_CONFIG_KEY = "xiaozhi_ai_config";
private final String XIAOZHI_SERVE_KEY = "xiaozhi_serve_url";
private final String XIAOZHI_OTA_KEY = "xiaozhi_ota_url";
private final String XIAOZHI_CONSOLE_KEY = "xiaozhi_console_url";

// Êô∫ËÅäAI ÈÖçÁΩÆÁõ∏ÂÖ≥ÁöÑkey (ÁßªÊ§çËá™ÊóßËÑöÊú¨)
private final String ZHILIA_AI_API_KEY = "zhilia_ai_api_key";
private final String ZHILIA_AI_API_URL = "zhilia_ai_api_url";
private final String ZHILIA_AI_MODEL_NAME = "zhilia_ai_model_name";
private final String ZHILIA_AI_SYSTEM_PROMPT = "zhilia_ai_system_prompt";
private final String ZHILIA_AI_CONTEXT_LIMIT = "zhilia_ai_context_limit";

// ÂåπÈÖçÁ±ªÂûãÂ∏∏Èáè
private final static int MATCH_TYPE_FUZZY = 0;      // Ê®°Á≥äÂåπÈÖç
private final static int MATCH_TYPE_EXACT = 1;      // ÂÖ®Â≠óÂåπÈÖç
private final static int MATCH_TYPE_REGEX = 2;      // Ê≠£ÂàôÂåπÈÖç
private final static int MATCH_TYPE_ANY = 3;        // ‰ªª‰ΩïÊ∂àÊÅØÈÉΩÂåπÈÖç

// @Ëß¶ÂèëÁ±ªÂûãÂ∏∏Èáè
private final static int AT_TRIGGER_NONE = 0;       // ‰∏çÈôê@Ëß¶Âèë
private final static int AT_TRIGGER_ME = 1;         // @ÊàëËß¶Âèë
private final static int AT_TRIGGER_ALL = 2;        // @ÂÖ®‰ΩìËß¶Âèë

// „ÄêÊñ∞Â¢û„ÄëÊãç‰∏ÄÊãçËß¶ÂèëÁ±ªÂûãÂ∏∏Èáè
private final static int PAT_TRIGGER_NONE = 0;      // ‰∏çÈôêÊãç‰∏ÄÊãçËß¶Âèë
private final static int PAT_TRIGGER_ME = 1;        // Ë¢´Êãç‰∏ÄÊãçËß¶Âèë

// ËßÑÂàôÁîüÊïàÁõÆÊ†áÁ±ªÂûãÂ∏∏Èáè
private final static int TARGET_TYPE_NONE = 0;      // ‰∏çÊåáÂÆö
private final static int TARGET_TYPE_FRIEND = 1;    // ÊåáÂÆöÂ•ΩÂèã
private final static int TARGET_TYPE_GROUP = 2;     // ÊåáÂÆöÁæ§ËÅä
private final static int TARGET_TYPE_BOTH = 3;      // ÂêåÊó∂ÊåáÂÆöÂ•ΩÂèãÂíåÁæ§ËÅä

// Ê∂àÊÅØÂõûÂ§çÁ±ªÂûãÂ∏∏Èáè
private final static int REPLY_TYPE_TEXT = 0;       // ÊñáÊú¨ÂõûÂ§ç
private final static int REPLY_TYPE_IMAGE = 1;      // ÂõæÁâáÂõûÂ§ç
private final static int REPLY_TYPE_VOICE_FILE_LIST = 2; // ËØ≠Èü≥ÂõûÂ§ç (‰ªéÊñá‰ª∂ÂàóË°®ÈöèÊú∫)
private final static int REPLY_TYPE_VOICE_FOLDER = 3; // ËØ≠Èü≥ÂõûÂ§ç (‰ªéÊñá‰ª∂Â§πÈöèÊú∫)
private final static int REPLY_TYPE_EMOJI = 4;      // Ë°®ÊÉÖÂõûÂ§ç
private final static int REPLY_TYPE_XIAOZHI_AI = 5; // Â∞èÊô∫AIËá™Âä®ÂõûÂ§ç
private final static int REPLY_TYPE_VIDEO = 6;      // ËßÜÈ¢ëÂõûÂ§ç (Êñ∞Â¢û)
private final static int REPLY_TYPE_CARD = 7;       // ÂêçÁâáÂõûÂ§ç (Êñ∞Â¢ûÔºåÊîØÊåÅÂ§öÈÄâ)
private final static int REPLY_TYPE_FILE = 8;       // Êñá‰ª∂ÂàÜ‰∫´ (Êñ∞Â¢û)
private final static int REPLY_TYPE_ZHILIA_AI = 9;  // Êô∫ËÅäAIËá™Âä®ÂõûÂ§ç (Êñ∞Â¢ûÔºåÂÖ±Â≠ò)

// Ëá™Âä®ÂêåÊÑèÂ•ΩÂèã/Ë¢´ÈÄöËøáÁöÑÂõûÂ§çÁ±ªÂûãÂ∏∏Èáè
private final static int ACCEPT_REPLY_TYPE_TEXT = 0;
private final static int ACCEPT_REPLY_TYPE_IMAGE = 1;
private final static int ACCEPT_REPLY_TYPE_VOICE_FIXED = 2;
private final static int ACCEPT_REPLY_TYPE_VOICE_RANDOM = 3;
private final static int ACCEPT_REPLY_TYPE_EMOJI = 4;
private final static int ACCEPT_REPLY_TYPE_VIDEO = 5; // Êñ∞Â¢û
private final static int ACCEPT_REPLY_TYPE_CARD = 6;  // ÂêçÁâá (Êñ∞Â¢ûÔºåÊîØÊåÅÂ§öÈÄâ)
private final static int ACCEPT_REPLY_TYPE_FILE = 7;  // Êñá‰ª∂ÂàÜ‰∫´ (Êñ∞Â¢û)

// Áî®‰∫éÂàÜÈöîÂàóË°®È°πÁöÑÁâπÊÆäÂ≠óÁ¨¶‰∏≤
private final String LIST_SEPARATOR = "_#ITEM#_";

// ÁºìÂ≠òÂàóË°®ÔºåÈÅøÂÖçÈáçÂ§çËé∑Âèñ
private List sCachedFriendList = null;
private List sCachedGroupList = null;
private java.util.Map sCachedGroupMemberCounts = null; // ÁºìÂ≠òÁæ§ÊàêÂëòÊï∞Èáè

// Â∞èÊô∫AI ÂäüËÉΩÁõ∏ÂÖ≥ÂèòÈáè
// OkHttp ÂÆ¢Êà∑Á´ØÂÆû‰æãÔºåÁî®‰∫éÂèëËµ∑ÁΩëÁªúËØ∑Ê±Ç
private final OkHttpClient aiClient = new OkHttpClient.Builder().build();
// „Äê‰øÆÊîπ„Äë‰ΩøÁî® ConcurrentHashMap Êù•Á°Æ‰øùÁ∫øÁ®ãÂÆâÂÖ®Âú∞ÁÆ°ÁêÜÊØè‰∏™ËÅäÂ§©‰ºöË©±ÁöÑ WebSocket ËøûÊé•
// Key ÊòØËÅäÂ§©ÂØπË±° wxid (talker)ÔºåValue ÊòØÂØπÂ∫îÁöÑ WebSocket ËøûÊé•ÂÆû‰æã
private final java.util.concurrent.ConcurrentMap<String, WebSocket> aiWebSockets = new java.util.concurrent.ConcurrentHashMap<String, WebSocket>();

// Êô∫ËÅäAI ÂäüËÉΩÁõ∏ÂÖ≥ÂèòÈáè (ÁßªÊ§çËá™ÊóßËÑöÊú¨)
private Map<String, List> zhiliaConversationHistories = new HashMap<>();

// =================================================================================
// =================== START: Â∞èÊô∫bot Ê†∏ÂøÉÂäüËÉΩ‰ª£Á†ÅÁßªÊ§ç ===================
// =================================================================================

// --- ËÆæÂ§á‰ø°ÊÅØÂ∑•ÂÖ∑ÊñπÊ≥ï ---
private String getDeviceUUID(Context ctx) {
    if (ctx == null) return "unknown-uuid-due-to-null-context";
    String androidId = Settings.Secure.getString(ctx.getContentResolver(), Settings.Secure.ANDROID_ID);
    if (androidId == null) androidId = "default_android_id";
    return UUID.nameUUIDFromBytes(androidId.getBytes()).toString();
}

private String getDeviceMac(Context ctx) {
    if (ctx == null) return "00:00:00:00:00:00";
    try {
        UUID uuid = UUID.fromString(getDeviceUUID(ctx));
        byte[] uuidBytes = new byte[16];
        long mostSigBits = uuid.getMostSignificantBits();
        long leastSigBits = uuid.getLeastSignificantBits();
        for (int i = 0; i < 8; i++) {
            uuidBytes[i] = (byte)((mostSigBits >>> (8 * (7 - i))) & 0xFF);
        }
        for (int i = 8; i < 16; i++) {
            uuidBytes[i] = (byte)((leastSigBits >>> (8 * (15 - i))) & 0xFF);
        }
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = digest.digest(uuidBytes);
        byte[] fakeMacBytes = new byte[6];
        System.arraycopy(hashBytes, 0, fakeMacBytes, 0, 6);
        char[] hexChars = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
        StringBuilder macBuilder = new StringBuilder();
        for (int i = 0; i < fakeMacBytes.length; i++) {
            int v = fakeMacBytes[i] & 0xFF;
            macBuilder.append(hexChars[v >>> 4]);
            macBuilder.append(hexChars[v & 0x0F]);
            if (i < fakeMacBytes.length - 1) {
                macBuilder.append(':');
            }
        }
        return macBuilder.toString();
    } catch (Exception e) {
        log("Error generating MAC: " + e.getMessage());
        return "00:00:00:00:00:00";
    }
}

// --- ÁΩëÁªúËØ∑Ê±ÇÂ∑•ÂÖ∑ ---
private void addHeaders(Request.Builder builder, Map header) {
    if (header != null) {
        for (Object key : header.keySet()) {
            builder.addHeader((String)key, (String)header.get(key));
        }
    }
}

private String executeRequest(Request.Builder builder) {
    try {
        Response response = aiClient.newCall(builder.build()).execute();
        if (response.isSuccessful() && response.body() != null) {
            return response.body().string();
        }
        return null;
    } catch (IOException e) {
        log("AI Request failed: " + e.getMessage());
        return null;
    }
}

private String httpGet(String url, Map header) {
    Request.Builder builder = new Request.Builder().url(url).get();
    addHeaders(builder, header);
    return executeRequest(builder);
}

private String httpPost(String url, String data, Map header) {
    String mediaType = (header != null && header.containsKey("Content-Type")) ?
        (String)header.get("Content-Type") : "application/json";
    RequestBody body = RequestBody.create(MediaType.parse(mediaType), data);
    Request.Builder builder = new Request.Builder().url(url).post(body);
    addHeaders(builder, header);
    return executeRequest(builder);
}

// --- Â∞èÊô∫AI Ê†∏ÂøÉÂ§ÑÁêÜÈÄªËæë ---
// „Äê‰øÆÊîπ„ÄëÈáçÂÜôAIÂ§ÑÁêÜÈÄªËæëÔºå‰ª•ÊîØÊåÅÂ§ö‰ºöËØùÂπ∂Á°Æ‰øùÁ∫øÁ®ãÂÆâÂÖ®
private void processAIResponse(final Object msgInfoBean) {
    if (msgInfoBean == null) {
        log("processAIResponse: msgInfoBean is null");
        return;
    }
    
    try {
        String content = invokeStringMethod(msgInfoBean, "getContent");
        if (TextUtils.isEmpty(content)) {
            log("processAIResponse: Empty content");
            return;
        }

        final String talker = invokeStringMethod(msgInfoBean, "getTalker");
        if (TextUtils.isEmpty(talker)) {
            log("processAIResponse: Empty talker");
            return;
        }

        // Ê£ÄÊü•ÊòØÂê¶Âú®Áæ§ËÅä‰∏≠ÔºåÂ¶ÇÊûúÊòØÔºåÈúÄË¶ÅÁâπÊÆäÂ§ÑÁêÜ@Ê∂àÊÅØ
        boolean isGroupChat = invokeBooleanMethod(msgInfoBean, "isGroupChat");
        if (isGroupChat) {
           // boolean isAtMe = invokeBooleanMethod(msgInfoBean, "isAtMe");
           // if (!isAtMe) {
              //  log("processAIResponse: Not @ me in group chat, ignoring");
            //    return;
        //    }ÊÄïÈ™öÊâ∞Âà´‰∫∫Â∞±ÊääËøôÂá†Ë°å‰ª£Á†ÅÂèñÊ∂àÊ≥®Èáä
            
            // ÁßªÈô§@‰ø°ÊÅØ
            content = content.replaceAll("@[^\\s]+\\s+", "").trim();
            if (TextUtils.isEmpty(content)) {
                log("processAIResponse: Empty content after removing @");
                return;
            }
        }

        // Â§ÑÁêÜÊñ≠ÂºÄËøûÊé•ÂëΩ‰ª§
        if ("#Êñ≠ÂºÄ".equals(content) || "#Êñ≠Ëøû".equals(content) || "#Êñ≠Á∫ø".equals(content)) {
            WebSocket webSocket = aiWebSockets.get(talker);
            if (webSocket != null) {
                webSocket.close(1000, "ÊâãÂä®Êñ≠ÂºÄ");
                // onClosing/onFailure ÂõûË∞É‰ºöËá™Âä®‰ªéMap‰∏≠ÁßªÈô§ËøûÊé•
            }
            return;
        }

        final String finalText = content;
        
        // Âú®ÂêéÂè∞Á∫øÁ®ãÂ§ÑÁêÜAIËØ∑Ê±Ç
        new Thread(new Runnable() {
            public void run() {
                try {
                    // Ê£ÄÊü•ÂΩìÂâç talker ÊòØÂê¶Â∑≤ÊúâËøûÊé•
                    WebSocket currentSocket = aiWebSockets.get(talker);
                    if (currentSocket == null) {
                        // Ê≤°ÊúâËøûÊé•ÔºåÂàôÂàùÂßãÂåñ‰∏Ä‰∏™Êñ∞ÁöÑ
                        initializeWebSocketConnection(talker, finalText);
                    } else {
                        // Â∑≤ÊúâËøûÊé•ÔºåÁõ¥Êé•ÂèëÈÄÅÊ∂àÊÅØ
                        sendMessageToWebSocket(talker, finalText);
                    }
                } catch (Exception e) {
                    log("Error in AI response thread: " + e.getMessage());
                    insertSystemMsg(talker, "Â∞èÊô∫AI Â§ÑÁêÜÊ∂àÊÅØÊó∂Âá∫Èîô: " + e.getMessage(), System.currentTimeMillis());
                }
            }
        }).start();
    } catch (Exception e) {
        log("processAIResponse error: " + e.getMessage());
    }
}

// „Äê‰øÆÊîπ„ÄëÂàùÂßãÂåñWebSocketËøûÊé•Ôºå‰∏∫ÊåáÂÆöÁöÑ talker ÂàõÂª∫
private void initializeWebSocketConnection(final String talker, final String text) {
    try {
        // ‰ΩøÁî® ConcurrentHashMap ÁöÑ putIfAbsent ÂèØ‰ª•ÂéüÂ≠êÊÄßÂú∞Ê£ÄÊü•Âπ∂ÊîæÂÖ•ÔºåÈò≤Ê≠¢ÈáçÂ§çÂàõÂª∫ËøûÊé•
        // ‰ΩÜÁî±‰∫é listener ÁöÑÂàõÂª∫Âíå newWebSocket ÁöÑË∞ÉÁî®‰∏çÊòØÂéüÂ≠êÊìç‰ΩúÔºåËøôÈáåËøòÊòØÂÖàÊ£ÄÊü•
        if (aiWebSockets.containsKey(talker)) {
            log("WebSocket for " + talker + " is already connecting or connected.");
            return;
        }

        WebSocketListener listener = new WebSocketListener() {
            public void onOpen(WebSocket webSocket, Response response) {
                // ËøûÊé•ÊàêÂäüÂêéÔºåÂ∞ÜÂÖ∂Â≠òÂÖ• Map
                aiWebSockets.put(talker, webSocket);
                log("WebSocket opened for talker: " + talker);
                insertSystemMsg(talker, "Â∞èÊô∫AI Â∑≤ËøûÊé•", System.currentTimeMillis());
                
                // ÂèëÈÄÅÂàùÂßãÂåñÊ∂àÊÅØ
                try {
                    JSONObject helloMsg = new JSONObject();
                    helloMsg.put("type", "hello");
                    helloMsg.put("version", 1);
                    helloMsg.put("transport", "websocket");
                    
                    JSONObject audioParams = new JSONObject();
                    audioParams.put("format", "opus");
                    audioParams.put("sample_rate", 16000);
                    audioParams.put("channels", 1);
                    audioParams.put("frame_duration", 60);
                    helloMsg.put("audio_params", audioParams);
                    
                    webSocket.send(helloMsg.toString());
                    
                    // ÂèëÈÄÅÂÆûÈôÖÁöÑÁ¨¨‰∏Ä‰∏™Ê∂àÊÅØ
                    sendMessageToWebSocket(talker, text);
                } catch (Exception e) {
                    log("Error sending initial WebSocket messages for " + talker + ": " + e.getMessage());
                }
            }

            public void onMessage(WebSocket webSocket, String result) {
                try {
                    JSONObject resultObj = JSON.parseObject(result);
                    String type = resultObj.getString("type");
                    String state = resultObj.getString("state");
                    if ("tts".equals(type) && "sentence_start".equals(state)) {
                        if (resultObj.containsKey("text")) {
                            String replyText = resultObj.getString("text");
                            sendText(talker, replyText);
                        }
                    }
                } catch (Exception e) {
                    insertSystemMsg(talker, "Â∞èÊô∫AI Ëß£ÊûêÂìçÂ∫îÊï∞ÊçÆÂºÇÂ∏∏\n" + e.getMessage(), System.currentTimeMillis());
                }
            }

            public void onClosing(WebSocket webSocket, int code, String reason) {
                // ËøûÊé•ÂÖ≥Èó≠Êó∂Ôºå‰ªé Map ‰∏≠ÁßªÈô§
                aiWebSockets.remove(talker);
                log("WebSocket closing for talker: " + talker + ". Reason: " + reason);
                insertSystemMsg(talker, "Â∞èÊô∫AI ËøûÊé•Â∑≤ÂÖ≥Èó≠\n" + reason, System.currentTimeMillis());
            }

            public void onFailure(WebSocket webSocket, Throwable t, Response response) {
                // ËøûÊé•Â§±Ë¥•Êó∂Ôºå‰ªé Map ‰∏≠ÁßªÈô§
                aiWebSockets.remove(talker);
                log("WebSocket failure for talker: " + talker + ". Error: " + t.getMessage());
                StringBuilder errorInfo = new StringBuilder();
                errorInfo.append("Exception: ").append(t.getClass().getName()).append("\n");
                if (t.getMessage() != null) {
                    errorInfo.append("Message: ").append(t.getMessage()).append("\n");
                }
                insertSystemMsg(talker, "Â∞èÊô∫AI ËøûÊé•‰∏≠Êñ≠\n" + errorInfo.toString(), System.currentTimeMillis());
            }
        };

        Map<String, String> header = new HashMap<String, String>();
        header.put("Authorization", "Bearer test-token");
        header.put("Device-Id", getDeviceMac(hostContext));
        header.put("Client-Id", getDeviceUUID(hostContext));
        header.put("Protocol-Version", "1");
        
        String serveUrl = getString(XIAOZHI_CONFIG_KEY, XIAOZHI_SERVE_KEY, "wss://api.tenclass.net/xiaozhi/v1/");
        
        Request.Builder requestBuilder = new Request.Builder().url(serveUrl);
        addHeaders(requestBuilder, header);
        
        log("Attempting to create new WebSocket for talker: " + talker);
        // ÂºÇÊ≠•ÂèëËµ∑ËøûÊé•ÔºåÁªìÊûú‰ºöÂú® listener ÁöÑ onOpen Êàñ onFailure ‰∏≠ÂõûË∞É
        aiClient.newWebSocket(requestBuilder.build(), listener);

    } catch (Exception e) {
        log("initializeWebSocketConnection error for " + talker + ": " + e.getMessage());
        insertSystemMsg(talker, "Â∞èÊô∫AI ËøûÊé•Â§±Ë¥•: " + e.getMessage(), System.currentTimeMillis());
    }
}

// „Äê‰øÆÊîπ„ÄëÂèëÈÄÅÊ∂àÊÅØÂà∞ÊåáÂÆö talker ÁöÑ WebSocket
private void sendMessageToWebSocket(final String talker, String text) {
    try {
        WebSocket webSocket = aiWebSockets.get(talker);
        if (webSocket != null) {
            JSONObject socketMsg = new JSONObject();
            // „ÄêÈáçË¶Å„Äë‰∏∫ÊØè‰∏™‰ºöËØù‰ΩøÁî®Áã¨Á´ãÁöÑ session_idÔºåÈÅøÂÖçÂêéÁ´ØÊ∑∑Ê∑Ü‰∏ä‰∏ãÊñá
            socketMsg.put("session_id", "session_for_" + talker);
            socketMsg.put("type", "listen");
            socketMsg.put("state", "detect");
            socketMsg.put("text", text);
            webSocket.send(socketMsg.toString());
            log("Message sent to WebSocket for talker: " + talker);
        } else {
            // Â¶ÇÊûúËøûÊé•‰∏çÂ≠òÂú®ÔºàÂèØËÉΩÊÑèÂ§ñÊñ≠ÂºÄÔºâÔºåÂ∞ùËØïÈáçÊñ∞ËøûÊé•
            log("sendMessageToWebSocket: WebSocket for " + talker + " is null, attempting to reconnect.");
            initializeWebSocketConnection(talker, text);
        }
    } catch (Exception e) {
        log("sendMessageToWebSocket error for " + talker + ": " + e.getMessage());
    }
}

// ===============================================================================
// =================== END: Â∞èÊô∫bot Ê†∏ÂøÉÂäüËÉΩ‰ª£Á†ÅÁßªÊ§ç ===================
// ===============================================================================

// ========== Êô∫ËÅäAI ÂäüËÉΩÊ®°Âùó (ÁßªÊ§çËá™ÊóßËÑöÊú¨) ==========

private void sendZhiliaAiReply(final String talker, String userContent) {
    // Êó•ÂøóÂÖ•Âè£
    log("=== Êô∫ËÅäAIËß¶Âèë: talker=" + talker + ", content=" + userContent + " ===");
    
    String apiKey = getString(ZHILIA_AI_API_KEY, "");
    String apiUrl = getString(ZHILIA_AI_API_URL, "https://api.siliconflow.cn/v1/chat/completions");
    String modelName = getString(ZHILIA_AI_MODEL_NAME, "deepseek-ai/DeepSeek-V3");
    String systemPrompt = getString(ZHILIA_AI_SYSTEM_PROMPT, "‰Ω†ÊòØ‰∏™ÂÆùÂÆù");
    int contextLimit = getInt(ZHILIA_AI_CONTEXT_LIMIT, 10);

    if (TextUtils.isEmpty(apiKey)) {
        log("Êô∫ËÅäAI: API Key ‰∏∫Á©∫ÔºåË∑≥Ëøá");
        toast("ËØ∑ÂÖàÂú®Êô∫ËÅäAIÂèÇÊï∞ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆAPI Key");
        return;
    }
    log("Êô∫ËÅäAI: ÈÖçÁΩÆOK - URL=" + apiUrl + ", Model=" + modelName);

    // Ëé∑Âèñ/ÂàõÂª∫ÂéÜÂè≤
    List history = zhiliaConversationHistories.get(talker);
    if (history == null) {
        history = new ArrayList();
        log("Êô∫ËÅäAI: Êñ∞Âª∫ÂØπËØùÂéÜÂè≤ for " + talker);
        if (!TextUtils.isEmpty(systemPrompt)) {
            Map systemMsg = new HashMap();
            systemMsg.put("role", "system");
            systemMsg.put("content", systemPrompt);
            history.add(systemMsg);
        }
        zhiliaConversationHistories.put(talker, history);
    }

    // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÔºàÁßªÈô§@ÔºåÁªü‰∏ÄÂ∞èÊô∫ÈÄªËæëÔºâ
    userContent = userContent.replaceAll("@[^\\s]+\\s+", "").trim();
    if (TextUtils.isEmpty(userContent)) {
        log("Êô∫ËÅäAI: Áî®Êà∑ÂÜÖÂÆπ‰∏∫Á©∫ÂêéË∑≥Ëøá");
        return;
    }
    Map userMsg = new HashMap();
    userMsg.put("role", "user");
    userMsg.put("content", userContent);
    history.add(userMsg);
    log("Êô∫ËÅäAI: Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÔºåÂéÜÂè≤ÈïøÂ∫¶=" + history.size());

    // ÈôêÂà∂‰∏ä‰∏ãÊñá
    while (history.size() > contextLimit * 2 + 1) {
        history.remove(1); // ÊúÄÊóßÁî®Êà∑
        if (history.size() > 1) history.remove(1); // ÊúÄÊóßAI
    }

    // ÊûÑÂª∫ËØ∑Ê±Ç‰ΩìÔºàJSONÔºâ
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("model", modelName);
    jsonBody.put("messages", history);
    jsonBody.put("temperature", 0.7);
    jsonBody.put("stream", false); // ÈùûÊµÅÂºè
    String requestData = jsonBody.toString();
    log("Êô∫ËÅäAI: ËØ∑Ê±Ç‰ΩìÈ¢ÑËßà: " + requestData.substring(0, Math.min(200, requestData.length())) + "...");

    // ÊûÑÂª∫ËØ∑Ê±ÇÂ§¥
    Map headerMap = new HashMap();
    headerMap.put("Content-Type", "application/json");
    headerMap.put("Authorization", "Bearer " + apiKey);

    // „ÄêÊ†∏ÂøÉ‰øÆÂ§ç„ÄëÁî® OkHttp ÂºÇÊ≠•ÂèëÈÄÅÔºàÁªïËøáÊèí‰ª∂ postÔºâ
    RequestBody body = RequestBody.create(MediaType.parse("application/json"), requestData);
    Request.Builder reqBuilder = new Request.Builder().url(apiUrl).post(body);
    addHeaders(reqBuilder, headerMap); // Áî®Áé∞ÊúâÂ∑•ÂÖ∑Ê∑ªÂä†Â§¥

    final Request request = reqBuilder.build();
    aiClient.newCall(request).enqueue(new okhttp3.Callback() {
        public void onFailure(okhttp3.Call call, IOException e) {
            log("Êô∫ËÅäAI: OkHttp onFailure - " + e.getMessage());
            insertSystemMsg(talker, "Êô∫ËÅäAIÁΩëÁªúÈîôËØØ: " + e.getMessage(), System.currentTimeMillis());
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    toast("Êô∫ËÅäAIËØ∑Ê±ÇÂ§±Ë¥•: " + e.getMessage());
                }
            });
        }

        public void onResponse(okhttp3.Call call, Response response) throws IOException {
            String responseContent = response.body() != null ? response.body().string() : null;
            log("Êô∫ËÅäAI: OkHttp onResponse (code=" + response.code() + "): " + responseContent);

            if (responseContent == null || !responseContent.trim().startsWith("{")) {
                log("Êô∫ËÅäAI: ÈùûJSONÂìçÂ∫î");
                insertSystemMsg(talker, "Êô∫ËÅäAIÂìçÂ∫îÊó†Êïà", System.currentTimeMillis());
                new Handler(Looper.getMainLooper()).post(new Runnable() {
                    public void run() {
                        toast("Êô∫ËÅäAIÂìçÂ∫îÊ†ºÂºèÈîôËØØ(ÈùûJSON)");
                    }
                });
                return;
            }

            try {
                JSONObject jsonObj = JSON.parseObject(responseContent);

                if (jsonObj.containsKey("error")) {
                    JSONObject errorObj = jsonObj.getJSONObject("error");
                    String errorMessage = errorObj.getString("message");
                    if (TextUtils.isEmpty(errorMessage)) errorMessage = "Êú™Áü•APIÈîôËØØ";
                    log("Êô∫ËÅäAI: APIÈîôËØØ - " + errorMessage);
                    insertSystemMsg(talker, "Êô∫ËÅäAI APIÈîôËØØ: " + errorMessage, System.currentTimeMillis());
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        public void run() {
                            toast("Êô∫ËÅäAIËØ∑Ê±ÇÂ§±Ë¥•: " + errorMessage);
                        }
                    });
                    return;
                }

                if (!jsonObj.containsKey("choices")) {
                    log("Êô∫ËÅäAI: Áº∫Â∞ëchoicesÂ≠óÊÆµ");
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        public void run() {
                            toast("Êô∫ËÅäAIÂìçÂ∫îÊ†ºÂºè‰∏çÊ≠£Á°Æ");
                        }
                    });
                    return;
                }

                JSONArray choices = jsonObj.getJSONArray("choices");
                if (choices.size() > 0) {
                    JSONObject firstChoice = choices.getJSONObject(0);
                    JSONObject message = firstChoice.getJSONObject("message");
                    String msgContent = message.getString("content");
                    log("Êô∫ËÅäAI: Ëß£ÊûêÊàêÂäüÔºåÂÜÖÂÆπ: " + msgContent);

                    if (!TextUtils.isEmpty(msgContent)) {
                        sendText(talker, msgContent);
                        log("Êô∫ËÅäAI: Â∑≤ÂèëÈÄÅÂõûÂ§çÂà∞ " + talker);
                    } else {
                        log("Êô∫ËÅäAI: ÂÜÖÂÆπ‰∏∫Á©∫Ôºåfallback");
                        sendText(talker, "Êä±Ê≠âÔºåÊàëÊöÇÊó∂Êó†Ê≥ïÂõûÂ§ç„ÄÇ");
                    }

                    // Êõ¥Êñ∞ÂéÜÂè≤
                    Map assistantMsg = new HashMap();
                    assistantMsg.put("role", "assistant");
                    assistantMsg.put("content", msgContent != null ? msgContent : "ÈªòËÆ§ÂõûÂ§ç");
                    history.add(assistantMsg);
                    zhiliaConversationHistories.put(talker, history);
                } else {
                    log("Êô∫ËÅäAI: choices‰∏∫Á©∫");
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        public void run() {
                            toast("Êô∫ËÅäAIËøôÊ¨°Â•ΩÂÉèÊ≤°ÊÉ≥Â•ΩÊÄé‰πàËØ¥„ÄÇ");
                        }
                    });
                    sendText(talker, "ÔºàAIÊÄùËÄÉ‰∏≠...Ôºâ");
                }
            } catch (JSONException e) {
                log("Êô∫ËÅäAI: JSONËß£ÊûêÂ§±Ë¥• - " + e.getMessage());
                insertSystemMsg(talker, "Êô∫ËÅäAIËß£ÊûêÈîôËØØ: " + e.getMessage(), System.currentTimeMillis());
                new Handler(Looper.getMainLooper()).post(new Runnable() {
                    public void run() {
                        toast("Êó†Ê≥ïËß£ÊûêÊô∫ËÅäAIÂõûÂ§ç");
                    }
                });
            }
        }
    });
    log("=== Êô∫ËÅäAI OkHttpËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ ===");
}

// ===============================================================================
// =================== END: Êô∫ËÅäAI Ê†∏ÂøÉÂäüËÉΩ‰ª£Á†ÅÁßªÊ§ç ===================
// ===============================================================================

// „Äê‰øÆÂ§ç„ÄëÂ∞ÜAutoReplyRuleÊîπ‰∏∫Map<String, Object>ÁªìÊûÑÔºåÈÅøÂÖçBeanShellÁ±ªÂÆö‰πâÈóÆÈ¢ò
private Map<String, Object> createAutoReplyRuleMap(String keyword, String reply, boolean enabled, int matchType, Set targetWxids, int targetType, int atTriggerType, long delaySeconds, boolean replyAsQuote, int replyType, List mediaPaths, String startTime, String endTime, Set excludedWxids, long mediaDelaySeconds, int patTriggerType) {
    Map<String, Object> rule = new HashMap<String, Object>();
    rule.put("keyword", keyword);
    rule.put("reply", reply);
    rule.put("enabled", enabled);
    rule.put("matchType", matchType);
    rule.put("targetWxids", targetWxids != null ? targetWxids : new HashSet());
    rule.put("targetType", targetType);
    rule.put("atTriggerType", atTriggerType);
    rule.put("delaySeconds", delaySeconds);
    rule.put("replyAsQuote", replyAsQuote);
    rule.put("replyType", replyType);
    rule.put("mediaPaths", mediaPaths != null ? mediaPaths : new ArrayList());
    rule.put("startTime", startTime);
    rule.put("endTime", endTime);
    rule.put("excludedWxids", excludedWxids != null ? excludedWxids : new HashSet());
    rule.put("mediaDelaySeconds", mediaDelaySeconds);
    rule.put("patTriggerType", patTriggerType);
    rule.put("compiledPattern", null); // PatternÂØπË±°ÔºåÁ®çÂêéÁºñËØë
    return rule;
}

private Map<String, Object> createAutoReplyRuleMap(String keyword, String reply, boolean enabled, int matchType, Set targetWxids, int targetType, int atTriggerType, long delaySeconds, boolean replyAsQuote, int replyType, List mediaPaths) {
    return createAutoReplyRuleMap(keyword, reply, enabled, matchType, targetWxids, targetType, atTriggerType, delaySeconds, replyAsQuote, replyType, mediaPaths, "", "", new HashSet(), 1L, PAT_TRIGGER_NONE);
}

private void compileRegexPatternForRule(Map<String, Object> rule) {
    int matchType = (Integer) rule.get("matchType");
    String keyword = (String) rule.get("keyword");
    if (matchType == MATCH_TYPE_REGEX && !TextUtils.isEmpty(keyword)) {
        try {
            Pattern pattern = Pattern.compile(keyword);
            rule.put("compiledPattern", pattern);
        } catch (Exception e) {
            log("Error compiling regex pattern for keyword: " + keyword + " - " + e.getMessage());
            rule.put("compiledPattern", null);
        }
    } else {
        rule.put("compiledPattern", null);
    }
}

private String ruleMapToString(Map<String, Object> rule) {
    String keyword = (String) rule.get("keyword");
    String reply = (String) rule.get("reply");
    boolean enabled = (Boolean) rule.get("enabled");
    int matchType = (Integer) rule.get("matchType");
    Set targetWxids = (Set) rule.get("targetWxids");
    int atTriggerType = (Integer) rule.get("atTriggerType");
    long delaySeconds = (Long) rule.get("delaySeconds");
    int targetType = (Integer) rule.get("targetType");
    boolean replyAsQuote = (Boolean) rule.get("replyAsQuote");
    int replyType = (Integer) rule.get("replyType");
    List mediaPaths = (List) rule.get("mediaPaths");
    String startTime = (String) rule.get("startTime");
    String endTime = (String) rule.get("endTime");
    Set excludedWxids = (Set) rule.get("excludedWxids");
    long mediaDelaySeconds = (Long) rule.get("mediaDelaySeconds");
    int patTriggerType = (Integer) rule.get("patTriggerType");

    String wxidsStr = "";
    if (targetWxids != null && !targetWxids.isEmpty()) {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (Object wxidObj : targetWxids) {
            String wxid = (String) wxidObj;
            if (!first) sb.append(",");
            sb.append(wxid);
            first = false;
        }
        wxidsStr = sb.toString();
    }

    String mediaPathsStr = "";
    if (mediaPaths != null && !mediaPaths.isEmpty()) {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (int i = 0; i < mediaPaths.size(); i++) {
            String path = (String) mediaPaths.get(i);
            if (!first) sb.append(";;;");
            sb.append(path);
            first = false;
        }
        mediaPathsStr = sb.toString();
    }

    String excludedStr = "";
    if (excludedWxids != null && !excludedWxids.isEmpty()) {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (Object wxidObj : excludedWxids) {
            String wxid = (String) wxidObj;
            if (!first) sb.append(",");
            sb.append(wxid);
            first = false;
        }
        excludedStr = sb.toString();
    }

    return keyword + "||" + reply + "||" + enabled + "||" + matchType + "||" + wxidsStr + "||" + atTriggerType + "||" + delaySeconds + "||" + targetType + "||" + replyAsQuote + "||" + replyType + "||" + mediaPathsStr + "||" + (startTime != null ? startTime : "") + "||" + (endTime != null ? endTime : "") + "||" + excludedStr + "||" + mediaDelaySeconds + "||" + patTriggerType;
}

private Map<String, Object> ruleFromString(String str) {
    Map<String, Object> rule = null;
    try {
        String[] parts = str.split("\\|\\|");
        String keyword = parts.length > 0 ? parts[0] : "";
        String reply = parts.length > 1 ? parts[1] : "";
        boolean enabled = parts.length > 2 ? Boolean.parseBoolean(parts[2]) : true;
        int matchType = parts.length > 3 ? Integer.parseInt(parts[3]) : MATCH_TYPE_FUZZY;
        Set wxids = new HashSet();
        if (parts.length > 4 && !TextUtils.isEmpty(parts[4])) {
            String[] wxidArray = parts[4].split(",");
            for (String w : wxidArray) {
                if (!TextUtils.isEmpty(w.trim())) wxids.add(w.trim());
            }
        }
        int atTriggerType = parts.length > 5 ? Integer.parseInt(parts[5]) : AT_TRIGGER_NONE;
        long delaySeconds = parts.length > 6 ? Long.parseLong(parts[6]) : 0;
        int targetType = parts.length > 7 ? Integer.parseInt(parts[7]) : TARGET_TYPE_NONE;
        boolean replyAsQuote = parts.length > 8 ? Boolean.parseBoolean(parts[8]) : false;
        int replyType = parts.length > 9 ? Integer.parseInt(parts[9]) : REPLY_TYPE_TEXT;
        List parsedMediaPaths = new ArrayList();
        if (parts.length > 10 && !TextUtils.isEmpty(parts[10])) {
            String[] pathArray = parts[10].split(";;;");
            for (String p : pathArray) {
                if (!TextUtils.isEmpty(p.trim())) parsedMediaPaths.add(p.trim());
            }
        }
        String startTime = parts.length > 11 ? parts[11] : "";
        String endTime = parts.length > 12 ? parts[12] : "";
        Set excludedWxids = new HashSet();
        if (parts.length > 13 && !TextUtils.isEmpty(parts[13])) {
            String[] excludedArray = parts[13].split(",");
            for (String w : excludedArray) {
                if (!TextUtils.isEmpty(w.trim())) excludedWxids.add(w.trim());
            }
        }
        long mediaDelaySeconds = parts.length > 14 ? Long.parseLong(parts[14]) : 1L;
        int patTriggerType = parts.length > 15 ? Integer.parseInt(parts[15]) : PAT_TRIGGER_NONE;
        rule = createAutoReplyRuleMap(keyword, reply, enabled, matchType, wxids, targetType, atTriggerType, delaySeconds, replyAsQuote, replyType, parsedMediaPaths, startTime, endTime, excludedWxids, mediaDelaySeconds, patTriggerType);
    } catch (Exception e) {
        log("Error parsing rule from string: '" + str + "' - " + e.getMessage());
        return null;
    }
    if (rule != null) {
        compileRegexPatternForRule(rule);
    }
    return rule;
}

// Â•ΩÂèãÂõûÂ§çÈ°πÊï∞ÊçÆÁªìÊûÑ (ÈÄöÁî®)
private class AcceptReplyItem {
    public int type;
    public String content;
    public long mediaDelaySeconds;  // „ÄêÊñ∞Â¢û„ÄëÂ™í‰ΩìÂèëÈÄÅÈó¥ÈöîÔºàÁßíÔºâ
    public AcceptReplyItem(int type, String content, long mediaDelaySeconds) {
        this.type = type;
        this.content = content;
        this.mediaDelaySeconds = mediaDelaySeconds;
    }
    public AcceptReplyItem(int type, String content) {
        this(type, content, 1L);
    }
    public String toString() {
        return type + "||" + content + "||" + mediaDelaySeconds;
    }
    public static AcceptReplyItem fromString(String str) {
        String[] parts = str.split("\\|\\|");
        if (parts.length < 2) return null;
        try {
            int type = Integer.parseInt(parts[0]);
            String content = parts[1];
            long mediaDelaySeconds = parts.length > 2 ? Long.parseLong(parts[2]) : 1L;
            return new AcceptReplyItem(type, content, mediaDelaySeconds);
        } catch (Exception e) {
            return null;
        }
    }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AcceptReplyItem that = (AcceptReplyItem) o;
        return type == that.type && Objects.equals(content, that.content) && mediaDelaySeconds == that.mediaDelaySeconds;
    }

    public int hashCode() {
        return Objects.hash(type, content, mediaDelaySeconds);
    }
}

// ÂèçÂ∞ÑÂ∑•ÂÖ∑Á±ª
// ÂÆåÂÖ®ÈáçÂÜôÂèçÂ∞ÑÂ∑•ÂÖ∑ÊñπÊ≥ïÔºåÈÅøÂÖç‰ΩøÁî®BeanShell
private String invokeStringMethod(Object obj, String methodName) {
    if (obj == null) {
        log("invokeStringMethod: obj is null for method: " + methodName);
        return "";
    }
    
    try {
        // ‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑÂèçÂ∞ÑÊñπÂºè
        Class<?> clazz = obj.getClass();
        Method method = clazz.getMethod(methodName);
        Object result = method.invoke(obj);
        return result != null ? result.toString() : "";
    } catch (NoSuchMethodException e) {
        log("Method not found: " + methodName + " in class: " + obj.getClass().getName());
        // Â∞ùËØï‰ΩøÁî®getField‰Ωú‰∏∫Â§áÈÄâÊñπÊ°à
        try {
            java.lang.reflect.Field field = obj.getClass().getField(methodName);
            Object result = field.get(obj);
            return result != null ? result.toString() : "";
        } catch (Exception ex) {
            log("Field also not found: " + methodName);
            return "";
        }
    } catch (Exception e) {
        log("Error invoking method: " + methodName + " - " + e.getMessage());
        return "";
    }
}

private boolean invokeBooleanMethod(Object obj, String methodName) {
    if (obj == null) {
        log("invokeBooleanMethod: obj is null for method: " + methodName);
        return false;
    }
    
    try {
        Method method = obj.getClass().getMethod(methodName);
        Object result = method.invoke(obj);
        return result != null && Boolean.parseBoolean(result.toString());
    } catch (Exception e) {
        log("Error invoking boolean method: " + methodName + " - " + e.getMessage());
        return false;
    }
}

private long invokeLongMethod(Object obj, String methodName) {
    if (obj == null) {
        log("invokeLongMethod: obj is null for method: " + methodName);
        return 0L;
    }
    
    try {
        Method method = obj.getClass().getMethod(methodName);
        Object result = method.invoke(obj);
        if (result instanceof Long) {
            return (Long) result;
        } else if (result instanceof Integer) {
            return (Integer) result;
        } else if (result != null) {
            try {
                return Long.parseLong(result.toString());
            } catch (NumberFormatException e) {
                return 0L;
            }
        }
        return 0L;
    } catch (Exception e) {
        log("Error invoking long method: " + methodName + " - " + e.getMessage());
        return 0L;
    }
}

public boolean onClickSendBtn(String text) {
    if ("Ëá™Âä®ÂõûÂ§çËÆæÁΩÆ".equals(text)) {
        showAutoReplySettingDialog();
        return true;
    }
    return false;
}

// ========== Ê†∏ÂøÉÂäüËÉΩÔºöÂ§ÑÁêÜÂ•ΩÂèãËØ∑Ê±Ç ==========
public void onNewFriend(String wxid, String ticket, int scene) {
    if (!getBoolean(AUTO_ACCEPT_FRIEND_ENABLED_KEY, false)) {
        return;
    }

    verifyUser(wxid, ticket, scene);

    final String finalWxid = wxid;
    new Thread(new Runnable() {
        public void run() {
            try {
                long delay = getLong(AUTO_ACCEPT_DELAY_KEY, 2L);
                Thread.sleep(delay * 1000);

                List replyItems = getAutoAcceptReplyItems();

                for (int i = 0; i < replyItems.size(); i++) {
                    AcceptReplyItem item = (AcceptReplyItem) replyItems.get(i);
                    switch (item.type) {
                        case ACCEPT_REPLY_TYPE_TEXT:
                            String friendName = getFriendName(finalWxid);
                            if (friendName == null || friendName.isEmpty()) {
                                friendName = "ÊúãÂèã";
                            }
                            String finalText = item.content.replace("%friendName%", friendName);
                            if (!TextUtils.isEmpty(finalText)) {
                                sendText(finalWxid, finalText);
                            }
                            break;
                        case ACCEPT_REPLY_TYPE_IMAGE:
                        case ACCEPT_REPLY_TYPE_VIDEO:
                        case ACCEPT_REPLY_TYPE_EMOJI:
                        case ACCEPT_REPLY_TYPE_FILE:
                            if (!TextUtils.isEmpty(item.content)) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂ™í‰ΩìÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                String[] paths = item.content.split(";;;");
                                for (int j = 0; j < paths.length; j++) {
                                    String path = paths[j].trim();
                                    if (!TextUtils.isEmpty(path)) {
                                        File file = new File(path);
                                        if (file.exists() && file.isFile()) {
                                            String fileName = file.getName();
                                            switch (item.type) {
                                                case ACCEPT_REPLY_TYPE_IMAGE:
                                                    sendImage(finalWxid, path);
                                                    break;
                                                case ACCEPT_REPLY_TYPE_VIDEO:
                                                    sendVideo(finalWxid, path);
                                                    break;
                                                case ACCEPT_REPLY_TYPE_EMOJI:
                                                    sendEmoji(finalWxid, path);
                                                    break;
                                                case ACCEPT_REPLY_TYPE_FILE:
                                                    shareFile(finalWxid, fileName, path, "");
                                                    break;
                                            }
                                            if (j < paths.length - 1) {
                                                Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        case ACCEPT_REPLY_TYPE_VOICE_FIXED:
                            if (!TextUtils.isEmpty(item.content)) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öËØ≠Èü≥È°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                String[] voicePaths = item.content.split(";;;");
                                for (int j = 0; j < voicePaths.length; j++) {
                                    String voicePath = voicePaths[j].trim();
                                    if (!TextUtils.isEmpty(voicePath)) {
                                        sendVoice(finalWxid, voicePath);
                                        if (j < voicePaths.length - 1) {
                                            Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                        }
                                    }
                                }
                            }
                            break;
                        case ACCEPT_REPLY_TYPE_VOICE_RANDOM:
                            if (!TextUtils.isEmpty(item.content)) {
                                List voiceFiles = getVoiceFilesFromFolder(item.content);
                                if (voiceFiles != null && !voiceFiles.isEmpty()) {
                                    String randomVoicePath = (String) voiceFiles.get(new Random().nextInt(voiceFiles.size()));
                                    sendVoice(finalWxid, randomVoicePath);
                                }
                            }
                            break;
                        case ACCEPT_REPLY_TYPE_CARD:
                            if (!TextUtils.isEmpty(item.content)) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂêçÁâáÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                String[] wxids = item.content.split(";;;");
                                for (int j = 0; j < wxids.length; j++) {
                                    String wxidToShare = wxids[j].trim();
                                    if (!TextUtils.isEmpty(wxidToShare)) {
                                        sendShareCard(finalWxid, wxidToShare);
                                        if (j < wxids.length - 1) {
                                            Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                        }
                                    }
                                }
                            }
                            break;
                    }

                    if (i < replyItems.size() - 1) {
                        Thread.sleep(1000);
                    }
                }
            } catch (Exception e) {
                log("ÂèëÈÄÅÂ•ΩÂèãÊ¨¢ËøéÊ∂àÊÅØÂ§±Ë¥•Ôºö" + e.toString());
            }
        }
    }).start();
}

// ÈÄöÁî®‰øùÂ≠òÂõûÂ§çÂàóË°®ÁöÑÊñπÊ≥ï
private void saveReplyItems(List items, String key) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < items.size(); i++) {
        if (i > 0) {
            sb.append(LIST_SEPARATOR);
        }
        sb.append(((AcceptReplyItem)items.get(i)).toString());
    }
    putString(key, sb.toString());
}

// ÈÄöÁî®ËØªÂèñÂõûÂ§çÂàóË°®ÁöÑÊñπÊ≥ï
private List getReplyItems(String key, String defaultReplyText) {
    List items = new ArrayList();
    String savedItemsStr = getString(key, "");

    if (TextUtils.isEmpty(savedItemsStr)) {
        items.add(new AcceptReplyItem(ACCEPT_REPLY_TYPE_TEXT, defaultReplyText));
    } else {
        String[] itemsArray = savedItemsStr.split(LIST_SEPARATOR);
        for (int i = 0; i < itemsArray.length; i++) {
            AcceptReplyItem item = AcceptReplyItem.fromString(itemsArray[i]);
            if (item != null) {
                items.add(item);
            }
        }
    }
    return items;
}

// Ëé∑ÂèñËá™Âä®ÈÄöËøáÂ•ΩÂèãÁöÑÂõûÂ§çÈ°πÂàóË°®
private List getAutoAcceptReplyItems() {
    return getReplyItems(AUTO_ACCEPT_REPLY_ITEMS_KEY, "%friendName%‚ú® ‰Ω†Â•ΩÔºåÂæàÈ´òÂÖ¥ËÆ§ËØÜ‰Ω†ÔºÅ");
}

// ‰øùÂ≠òËá™Âä®ÈÄöËøáÂ•ΩÂèãÁöÑÂõûÂ§çÈ°πÂàóË°®
private void saveAutoAcceptReplyItems(List items) {
    saveReplyItems(items, AUTO_ACCEPT_REPLY_ITEMS_KEY);
}

// Ëé∑ÂèñË¢´ÈÄöËøáÂêéËá™Âä®ÂõûÂ§çÁöÑÂàóË°®
private List getGreetOnAcceptedReplyItems() {
    return getReplyItems(GREET_ON_ACCEPTED_REPLY_ITEMS_KEY, "ÂìàÂñΩÔºå%friendName%ÔºÅÊÑüË∞¢ÈÄöËøáÂ•ΩÂèãËØ∑Ê±ÇÔºå‰ª•ÂêéËØ∑Â§öÊåáÊïôÂï¶ÔºÅ");
}

// ‰øùÂ≠òË¢´ÈÄöËøáÂêéËá™Âä®ÂõûÂ§çÁöÑÂàóË°®
private void saveGreetOnAcceptedReplyItems(List items) {
    saveReplyItems(items, GREET_ON_ACCEPTED_REPLY_ITEMS_KEY);
}

public void onHandleMsg(final Object msgInfoBean) {
    log("onHandleMsg: Start processing message.");
    try {
        // --- Â§ÑÁêÜ‚ÄúÊàëÊ∑ªÂä†Â•ΩÂèãË¢´ÈÄöËøá‚ÄùÁöÑÈÄªËæë ---
        if (getBoolean(GREET_ON_ACCEPTED_ENABLED_KEY, false)
            && invokeBooleanMethod(msgInfoBean, "isText")
            && !invokeBooleanMethod(msgInfoBean, "isSend")) {

            String content = invokeStringMethod(msgInfoBean, "getContent");
            log("onHandleMsg: Received text message. Content: " + content);

            if (FRIEND_ADD_SUCCESS_KEYWORD.equals(content)) {
                log("onHandleMsg: Matched friend acceptance keyword. Processing auto-reply.");
                final String newFriendWxid = invokeStringMethod(msgInfoBean, "getTalker");

                new Thread(new Runnable() {
                    public void run() {
                        try {
                            long delay = getLong(GREET_ON_ACCEPTED_DELAY_KEY, 2L);
                            Thread.sleep(delay * 1000);

                            List replyItems = getGreetOnAcceptedReplyItems();

                            for (int i = 0; i < replyItems.size(); i++) {
                                AcceptReplyItem item = (AcceptReplyItem) replyItems.get(i);
                                switch (item.type) {
                                    case ACCEPT_REPLY_TYPE_TEXT:
                                        String friendName = getFriendName(newFriendWxid);
                                        if (friendName == null || friendName.isEmpty()) {
                                            friendName = "ÊúãÂèã";
                                        }
                                        String finalText = item.content.replace("%friendName%", friendName);
                                        if (!TextUtils.isEmpty(finalText)) {
                                            sendText(newFriendWxid, finalText);
                                        }
                                        break;
                                    case ACCEPT_REPLY_TYPE_IMAGE:
                                    case ACCEPT_REPLY_TYPE_VIDEO:
                                    case ACCEPT_REPLY_TYPE_EMOJI:
                                    case ACCEPT_REPLY_TYPE_FILE:
                                        if (!TextUtils.isEmpty(item.content)) {
                                            // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂ™í‰ΩìÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                            String[] paths = item.content.split(";;;");
                                            for (int j = 0; j < paths.length; j++) {
                                                String path = paths[j].trim();
                                                if (!TextUtils.isEmpty(path)) {
                                                    File file = new File(path);
                                                    if (file.exists() && file.isFile()) {
                                                        String fileName = file.getName();
                                                        switch (item.type) {
                                                            case ACCEPT_REPLY_TYPE_IMAGE:
                                                                sendImage(newFriendWxid, path);
                                                                break;
                                                            case ACCEPT_REPLY_TYPE_VIDEO:
                                                                sendVideo(newFriendWxid, path);
                                                                break;
                                                            case ACCEPT_REPLY_TYPE_EMOJI:
                                                                sendEmoji(newFriendWxid, path);
                                                                break;
                                                            case ACCEPT_REPLY_TYPE_FILE:
                                                                shareFile(newFriendWxid, fileName, path, "");
                                                                break;
                                                        }
                                                        if (j < paths.length - 1) {
                                                            Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    case ACCEPT_REPLY_TYPE_VOICE_FIXED:
                                        if (!TextUtils.isEmpty(item.content)) {
                                            // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öËØ≠Èü≥È°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                            String[] voicePaths = item.content.split(";;;");
                                            for (int j = 0; j < voicePaths.length; j++) {
                                                String voicePath = voicePaths[j].trim();
                                                if (!TextUtils.isEmpty(voicePath)) {
                                                    sendVoice(newFriendWxid, voicePath);
                                                    if (j < voicePaths.length - 1) {
                                                        Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    case ACCEPT_REPLY_TYPE_VOICE_RANDOM:
                                        if (!TextUtils.isEmpty(item.content)) {
                                            List voiceFiles = getVoiceFilesFromFolder(item.content);
                                            if (voiceFiles != null && !voiceFiles.isEmpty()) {
                                                String randomVoicePath = (String) voiceFiles.get(new Random().nextInt(voiceFiles.size()));
                                                sendVoice(newFriendWxid, randomVoicePath);
                                            }
                                        }
                                        break;
                                    case ACCEPT_REPLY_TYPE_CARD:
                                        if (!TextUtils.isEmpty(item.content)) {
                                            // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂêçÁâáÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                            String[] wxids = item.content.split(";;;");
                                            for (int j = 0; j < wxids.length; j++) {
                                                String wxidToShare = wxids[j].trim();
                                                if (!TextUtils.isEmpty(wxidToShare)) {
                                                    sendShareCard(newFriendWxid, wxidToShare);
                                                    if (j < wxids.length - 1) {
                                                        Thread.sleep(item.mediaDelaySeconds * 1000); // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                }

                                if (i < replyItems.size() - 1) {
                                    Thread.sleep(1000);
                                }
                            }
                            log("onHandleMsg: Successfully sent all welcome messages to new friend.");
                        } catch (Exception e) {
                            log("ÂèëÈÄÅÂ•ΩÂèãÈÄöËøáÊ¨¢ËøéÊ∂àÊÅØÂ§±Ë¥•Ôºö" + e.toString());
                        }
                    }
                }).start();
                return;
            }
        }
        // --- Â∏∏ËßÑÂÖ≥ÈîÆËØçËá™Âä®ÂõûÂ§çÈÄªËæë ---
        // „Äê‰øÆÂ§ç„Äë‰øÆÊîπËøáÊª§Êù°‰ª∂ÔºåÂÖÅËÆ∏Êãç‰∏ÄÊãçÊ∂àÊÅØÈÄöËøáÔºàÂç≥‰ΩøÊòØÁ≥ªÁªüÊ∂àÊÅØÔºâ
        boolean isTextMsg = invokeBooleanMethod(msgInfoBean, "isText");
        boolean isPatMsg = invokeBooleanMethod(msgInfoBean, "isPat");
        if ((!isTextMsg && !isPatMsg) || invokeBooleanMethod(msgInfoBean, "isSend") || invokeBooleanMethod(msgInfoBean, "isSystem")) {
            log("onHandleMsg: Message is not a text or pat, is sent by self, or is a system message. Skipping auto-reply.");
            return;
        }

        String content = invokeStringMethod(msgInfoBean, "getContent");
        String talker = invokeStringMethod(msgInfoBean, "getTalker");
        String senderWxid = invokeStringMethod(msgInfoBean, "getSendTalker");

        log("onHandleMsg: Processing regular auto-reply logic. Content: " + content + ", Talker: " + talker + ", Sender: " + senderWxid);

        if (TextUtils.isEmpty(content) && !isPatMsg) {  // „ÄêÊñ∞Â¢û„ÄëÂØπ‰∫éÊãç‰∏ÄÊãçÔºåcontentÂèØËÉΩ‰∏∫Á©∫Ôºå‰ΩÜÂÖÅËÆ∏ÈÄöËøá
            log("onHandleMsg: Content is empty and not pat message. Skipping auto-reply.");
            return;
        }
        if (TextUtils.isEmpty(talker) || TextUtils.isEmpty(senderWxid)) {
            log("onHandleMsg: talker or sender is empty. Skipping auto-reply.");
            return;
        }

        if (shouldAutoReply(msgInfoBean)) {
            log("onHandleMsg: shouldAutoReply returned true. Processing reply.");
            processAutoReply(msgInfoBean);
            log("onHandleMsg: Auto-reply process completed.");
        } else {
            log("onHandleMsg: shouldAutoReply returned false. No auto-reply needed.");
        }
    } catch (Exception e) {
        log("Ëá™Âä®ÂõûÂ§çÊ∂àÊÅØÂ§ÑÁêÜÂºÇÂ∏∏: " + e.getMessage());
        e.printStackTrace();
    }
    log("onHandleMsg: End of message processing.");
}

private boolean shouldAutoReply(Object msgInfoBean) {
    try {
        boolean isPrivateChat = invokeBooleanMethod(msgInfoBean, "isPrivateChat");
        boolean isGroupChat = invokeBooleanMethod(msgInfoBean, "isGroupChat");
        if (isPrivateChat) {
            if (!getBoolean(AUTO_REPLY_FRIEND_ENABLED_KEY, false)) return false;
            Set enabledFriends = getStringSet(AUTO_REPLY_ENABLED_FRIENDS_KEY, new HashSet());
            String senderWxid = invokeStringMethod(msgInfoBean, "getSendTalker");
            if (!enabledFriends.contains(senderWxid)) return false;
        } else if (isGroupChat) {
            if (!getBoolean(AUTO_REPLY_GROUP_ENABLED_KEY, false)) return false;
            Set enabledGroups = getStringSet(AUTO_REPLY_ENABLED_GROUPS_KEY, new HashSet());
            String talker = invokeStringMethod(msgInfoBean, "getTalker");
            if (!enabledGroups.contains(talker)) return false;
        } else {
            return false;
        }
        return true;
    } catch (Exception e) {
        log("Âà§Êñ≠Ëá™Âä®ÂõûÂ§çÊù°‰ª∂ÂºÇÂ∏∏: " + e.getMessage());
        return false;
    }
}

private boolean isCurrentTimeInRuleRange(Map<String, Object> rule) {
    String startTime = (String) rule.get("startTime");
    String endTime = (String) rule.get("endTime");
    if (TextUtils.isEmpty(startTime) || TextUtils.isEmpty(endTime)) {
        return true;
    }
    try {
        String[] startParts = startTime.split(":");
        int startHour = Integer.parseInt(startParts[0]);
        int startMinute = Integer.parseInt(startParts[1]);
        String[] endParts = endTime.split(":");
        int endHour = Integer.parseInt(endParts[0]);
        int endMinute = Integer.parseInt(endParts[1]);
        Calendar now = Calendar.getInstance();
        int currentHour = now.get(Calendar.HOUR_OF_DAY);
        int currentMinute = now.get(Calendar.MINUTE);
        int startTimeInMinutes = startHour * 60 + startMinute;
        int endTimeInMinutes = endHour * 60 + endMinute;
        int currentTimeInMinutes = currentHour * 60 + currentMinute;
        if (endTimeInMinutes < startTimeInMinutes) {
            return currentTimeInMinutes >= startTimeInMinutes || currentTimeInMinutes < endTimeInMinutes;
        } else {
            return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes < endTimeInMinutes;
        }
    } catch (Exception e) {
        log("Ëß£ÊûêÊàñÊØîËæÉÊó∂Èó¥ËåÉÂõ¥Êó∂Âá∫Èîô: " + e.getMessage());
        return true;
    }
}

private void processAutoReply(final Object msgInfoBean) {
    try {
        final String content = invokeStringMethod(msgInfoBean, "getContent");
        final String senderWxid = invokeStringMethod(msgInfoBean, "getSendTalker");
        final String talker = invokeStringMethod(msgInfoBean, "getTalker");
        final boolean isPrivateChat = invokeBooleanMethod(msgInfoBean, "isPrivateChat");
        final boolean isGroupChat = invokeBooleanMethod(msgInfoBean, "isGroupChat");
        final long msgId = invokeLongMethod(msgInfoBean, "getMsgId");
        
        boolean isAtMe = false;
        boolean isNotifyAll = false;
        if (isGroupChat) {
            isAtMe = invokeBooleanMethod(msgInfoBean, "isAtMe");
            isNotifyAll = invokeBooleanMethod(msgInfoBean, "isNotifyAll");
        }

        // „ÄêÊñ∞Â¢û„ÄëÊ£ÄÊü•ÊòØÂê¶Ë¢´Êãç‰∏ÄÊãç
        boolean isPatMe = false;
        String myWxid = getLoginWxid();
        boolean isPatMsg = invokeBooleanMethod(msgInfoBean, "isPat");
        if (isPatMsg) {
            Object patMsgObj = invokeObjectMethod(msgInfoBean, "getPatMsg"); // ÂÅáËÆæÊúâgetPatMsgÊñπÊ≥ïÔºåÈúÄË¶ÅÂèçÂ∞ÑËé∑Âèñ
            if (patMsgObj != null) {
                String fromUser = invokeStringMethod(patMsgObj, "getFromUser");
                String pattedUser = invokeStringMethod(patMsgObj, "getPattedUser");
                if (!TextUtils.isEmpty(fromUser) && !TextUtils.isEmpty(pattedUser) && !fromUser.equals(myWxid) && pattedUser.equals(myWxid)) {
                    isPatMe = true;
                }
            }
        }

        List rules = loadAutoReplyRules();
        List matchedRules = new ArrayList();

        for (int i = 0; i < rules.size(); i++) {
            Map<String, Object> rule = (Map<String, Object>) rules.get(i);
            boolean enabled = (Boolean) rule.get("enabled");
            if (!enabled) continue;
            if (!isCurrentTimeInRuleRange(rule)) continue;

            int targetType = (Integer) rule.get("targetType");
            if (targetType != TARGET_TYPE_NONE) {
                boolean targetMatch = false;
                Set targetWxids = (Set) rule.get("targetWxids");
                if (targetType == TARGET_TYPE_FRIEND) {
                    if (isPrivateChat && targetWxids.contains(senderWxid)) targetMatch = true;
                } else if (targetType == TARGET_TYPE_GROUP) {
                    if (isGroupChat && targetWxids.contains(talker)) targetMatch = true;
                } else if (targetType == TARGET_TYPE_BOTH) {
                    if ((isPrivateChat && targetWxids.contains(senderWxid)) || (isGroupChat && targetWxids.contains(talker))) targetMatch = true;
                }
                if (!targetMatch) continue;
            }

            Set excludedWxids = (Set) rule.get("excludedWxids");
            if (excludedWxids != null && !excludedWxids.isEmpty()) {
                if (isPrivateChat && excludedWxids.contains(senderWxid)) continue;
                if (isGroupChat && excludedWxids.contains(talker)) continue;
            }

            int atTriggerType = (Integer) rule.get("atTriggerType");
            if (isGroupChat) {
                int actualAtType = isNotifyAll ? AT_TRIGGER_ALL : (isAtMe ? AT_TRIGGER_ME : AT_TRIGGER_NONE);
                if ((atTriggerType == AT_TRIGGER_ME && actualAtType != AT_TRIGGER_ME) || (atTriggerType == AT_TRIGGER_ALL && actualAtType != AT_TRIGGER_ALL)) {
                    continue;
                }
            } else {
                if (atTriggerType != AT_TRIGGER_NONE) continue;
            }

            // „Äê‰øÆÂ§ç„ÄëÊãç‰∏ÄÊãçËß¶ÂèëÊ£ÄÊü•ÔºöÂ¶ÇÊûúËßÑÂàôÊåáÂÆöË¢´Êãç‰∏ÄÊãçÔºåÂàôÁªßÁª≠ÔºàÂêéÁª≠ÂåπÈÖç‰∏≠Âº∫Âà∂trueÔºâ
            int patTriggerType = (Integer) rule.get("patTriggerType");
            if (patTriggerType == PAT_TRIGGER_ME && !isPatMe) {
                continue;
            }

            boolean isMatch = false;
            // „Äê‰øÆÂ§ç„ÄëÁâπÊÆäÂ§ÑÁêÜÊãç‰∏ÄÊãçÔºöÂ¶ÇÊûúËßÑÂàôÊåáÂÆöË¢´Êãç‰∏ÄÊãçËß¶ÂèëÔºåÂàôÂº∫Âà∂ÂåπÈÖçÔºàÂøΩÁï•contentÂåπÈÖçÔºâ
            if (isPatMsg && patTriggerType == PAT_TRIGGER_ME) {
                isMatch = true;
            } else {
                // ÂéüÊúâcontentÂåπÈÖçÈÄªËæë
                int matchType = (Integer) rule.get("matchType");
                String keyword = (String) rule.get("keyword");
                switch (matchType) {
                    case MATCH_TYPE_ANY: isMatch = true; break;
                    case MATCH_TYPE_EXACT: isMatch = content.equals(keyword); break;
                    case MATCH_TYPE_REGEX:
                        Pattern compiledPattern = (Pattern) rule.get("compiledPattern");
                        if (compiledPattern != null) isMatch = compiledPattern.matcher(content).matches();
                        else isMatch = false;
                        break;
                    case MATCH_TYPE_FUZZY: default: isMatch = content.contains(keyword); break;
                }
            }

            if (isMatch) {
                matchedRules.add(rule);
            }
        }

        if (matchedRules.isEmpty()) return;

        for (int i = 0; i < matchedRules.size(); i++) {
            final Map<String, Object> finalRule = (Map<String, Object>) matchedRules.get(i);
            
            Runnable sendReplyTask = new Runnable() {
                public void run() {
                    String replyContent = buildReplyContent((String) finalRule.get("reply"), msgInfoBean);
                    int replyType = (Integer) finalRule.get("replyType");
                    switch (replyType) {
                        case REPLY_TYPE_XIAOZHI_AI:
                            processAIResponse(msgInfoBean);
                            break;
                        case REPLY_TYPE_ZHILIA_AI:
                            sendZhiliaAiReply(talker, content);
                            break;
                        case REPLY_TYPE_IMAGE:
                        case REPLY_TYPE_VIDEO:
                        case REPLY_TYPE_EMOJI:
                        case REPLY_TYPE_FILE:
                            List mediaPaths = (List) finalRule.get("mediaPaths");
                            if (mediaPaths != null && !mediaPaths.isEmpty()) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂ™í‰ΩìÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                long mediaDelaySeconds = (Long) finalRule.get("mediaDelaySeconds");
                                for (int j = 0; j < mediaPaths.size(); j++) {
                                    String path = (String) mediaPaths.get(j);
                                    File file = new File(path);
                                    if (file.exists() && file.isFile()) {
                                        String fileName = file.getName();
                                        switch (replyType) {
                                            case REPLY_TYPE_IMAGE:
                                                sendImage(talker, path);
                                                break;
                                            case REPLY_TYPE_VIDEO:
                                                sendVideo(talker, path);
                                                break;
                                            case REPLY_TYPE_EMOJI:
                                                sendEmoji(talker, path);
                                                break;
                                            case REPLY_TYPE_FILE:
                                                shareFile(talker, fileName, path, "");
                                                break;
                                        }
                                        if (j < mediaPaths.size() - 1) {
                                            try { Thread.sleep(mediaDelaySeconds * 1000); } catch (Exception e) {} // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                        }
                                    }
                                }
                            }
                            break;
                        case REPLY_TYPE_VOICE_FILE_LIST:
                            List mediaPaths2 = (List) finalRule.get("mediaPaths");
                            if (mediaPaths2 != null && !mediaPaths2.isEmpty()) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öËØ≠Èü≥È°∫Â∫èÂèëÈÄÅÔºàÂéüÈöèÊú∫Êîπ‰∏∫È°∫Â∫èÔºâÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                long mediaDelaySeconds = (Long) finalRule.get("mediaDelaySeconds");
                                for (int j = 0; j < mediaPaths2.size(); j++) {
                                    String voicePath = (String) mediaPaths2.get(j);
                                    sendVoice(talker, voicePath);
                                    if (j < mediaPaths2.size() - 1) {
                                        try { Thread.sleep(mediaDelaySeconds * 1000); } catch (Exception e) {} // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                    }
                                }
                            }
                            break;
                        case REPLY_TYPE_VOICE_FOLDER:
                            List mediaPaths3 = (List) finalRule.get("mediaPaths");
                            if (mediaPaths3 != null && !mediaPaths3.isEmpty()) {
                                String folderPath = (String) mediaPaths3.get(0);
                                List voiceFiles = getVoiceFilesFromFolder(folderPath);
                                if (voiceFiles != null && !voiceFiles.isEmpty()) {
                                    // „Äê‰øÆÊîπ„ÄëÈöèÊú∫ÂèëÈÄÅ‰∏Ä‰∏™ËØ≠Èü≥Êñá‰ª∂
                                    String randomVoicePath = (String) voiceFiles.get(new Random().nextInt(voiceFiles.size()));
                                    sendVoice(talker, randomVoicePath);
                                }
                            }
                            break;
                        case REPLY_TYPE_CARD:
                             if (!TextUtils.isEmpty(replyContent)) {
                                // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÂêçÁâáÈ°∫Â∫èÂèëÈÄÅÔºå‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                long mediaDelaySeconds = (Long) finalRule.get("mediaDelaySeconds");
                                String[] wxids = replyContent.split(";;;");
                                for (int j = 0; j < wxids.length; j++) {
                                    String wxidToShare = wxids[j].trim();
                                    if (!TextUtils.isEmpty(wxidToShare)) {
                                        sendShareCard(talker, wxidToShare);
                                        if (j < wxids.length - 1) {
                                            try { Thread.sleep(mediaDelaySeconds * 1000); } catch (Exception e) {} // „ÄêÊñ∞Â¢û„Äë‰ΩøÁî®Ëá™ÂÆö‰πâÂª∂Ëøü
                                        }
                                    }
                                }
                            }
                            break;
                        case REPLY_TYPE_TEXT: default:
                            boolean replyAsQuote = (Boolean) finalRule.get("replyAsQuote");
                            if (replyAsQuote) {
                                sendQuoteMsg(talker, msgId, replyContent);
                            } else {
                                sendText(talker, replyContent);
                            }
                            break;
                    }
                }
            };

            long delaySeconds = (Long) finalRule.get("delaySeconds");
            if (delaySeconds > 0) {
                new Handler(Looper.getMainLooper()).postDelayed(sendReplyTask, delaySeconds * 1000L);
            } else {
                sendReplyTask.run();
            }
        }
    } catch (Exception e) {
        log("Â§ÑÁêÜËá™Âä®ÂõûÂ§çÂºÇÂ∏∏: " + e.getMessage());
        e.printStackTrace();
    }
}

private List getVoiceFilesFromFolder(String folderPath) {
    List voiceFiles = new ArrayList();
    File folder = new File(folderPath);
    if (!folder.exists() || !folder.isDirectory()) return voiceFiles;
    FilenameFilter audioFilter = new FilenameFilter() {
        public boolean accept(File dir, String name) {
            String lowerCaseName = name.toLowerCase();
            return lowerCaseName.endsWith(".mp3") || lowerCaseName.endsWith(".wav") || lowerCaseName.endsWith(".ogg") || lowerCaseName.endsWith(".aac")  || lowerCaseName.endsWith(".silk");
        }
    };
    File[] files = folder.listFiles(audioFilter);
    if (files != null) {
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) voiceFiles.add(files[i].getAbsolutePath());
        }
    }
    return voiceFiles;
}

private String getFriendDisplayName(String friendWxid) {
    try {
        if (sCachedFriendList == null) sCachedFriendList = getFriendList();
        if (sCachedFriendList != null) {
            for (int i = 0; i < sCachedFriendList.size(); i++) {
                FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                if (friendWxid.equals(friendInfo.getWxid())) {
                    String remark = friendInfo.getRemark();
                    if (!TextUtils.isEmpty(remark)) return remark;
                    String nickname = friendInfo.getNickname();
                    return TextUtils.isEmpty(nickname) ? friendWxid : nickname;
                }
            }
        }
    } catch (Exception e) {
        log("Ëé∑ÂèñÂ•ΩÂèãÊòæÁ§∫ÂêçÁß∞ÂºÇÂ∏∏: " + e.getMessage());
    }
    return getFriendName(friendWxid);
}

private String buildReplyContent(String template, Object msgInfoBean) {
    try {
        String result = template;
        String senderWxid = invokeStringMethod(msgInfoBean, "getSendTalker");
        String senderName = "";
        boolean isPrivateChat = invokeBooleanMethod(msgInfoBean, "isPrivateChat");
        boolean isGroupChat = invokeBooleanMethod(msgInfoBean, "isGroupChat");
        if (isPrivateChat) {
            senderName = getFriendDisplayName(senderWxid);
        } else if (isGroupChat) {
            String talker = invokeStringMethod(msgInfoBean, "getTalker");
            senderName = getFriendName(senderWxid, talker);
        }
        if (TextUtils.isEmpty(senderName)) senderName = "Êú™Áü•Áî®Êà∑";
        result = result.replace("%senderName%", senderName).replace("%senderWxid%", senderWxid);
        
        // „ÄêÊñ∞Â¢û„Äë%atSender% ÂèòÈáèÔºöÂÆûÈôÖ@ÂèëÈÄÅËÄÖÔºà‰ªÖÁæ§ËÅäÊúâÊïàÔºåÊõøÊç¢‰∏∫ [AtWx=%senderWxid%]Ôºâ
        if (isGroupChat) {
            result = result.replace("%atSender%", "[AtWx=" + senderWxid + "]");
        } else {
            result = result.replace("%atSender%", ""); // ÁßÅËÅäÊó∂ÊõøÊç¢‰∏∫Á©∫ÔºåÈÅøÂÖçÊó†ÊïàËØ≠Ê≥ï
        }
        
        if (isGroupChat) {
            String talker = invokeStringMethod(msgInfoBean, "getTalker");
            String groupName = getGroupName(talker);
            result = result.replace("%groupName%", TextUtils.isEmpty(groupName) ? "Êú™Áü•Áæ§ËÅä" : groupName);
        } else {
            result = result.replace("%groupName%", "");
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
        result = result.replace("%time%", sdf.format(new Date()));
        return result;
    } catch (Exception e) {
        log("ÊûÑÂª∫ÂõûÂ§çÂÜÖÂÆπÂºÇÂ∏∏: " + e.getMessage());
        return template;
    }
}

private String getGroupName(String groupWxid) {
    try {
        if (sCachedGroupList == null) sCachedGroupList = getGroupList();
        if (sCachedGroupList != null) {
            for (int i = 0; i < sCachedGroupList.size(); i++) {
                GroupInfo groupInfo = (GroupInfo) sCachedGroupList.get(i);
                if (groupWxid.equals(groupInfo.getRoomId())) return groupInfo.getName();
            }
        }
    } catch (Exception e) {
        log("Ëé∑ÂèñÁæ§ËÅäÂêçÁß∞ÂºÇÂ∏∏: " + e.getMessage());
    }
    return "Êú™Áü•Áæ§ËÅä";
}

// === UI ÁæéÂåñ‰∏éÂ∏ÉÂ±ÄÊûÑÂª∫ ===
private LinearLayout createCardLayout() {
    LinearLayout layout = new LinearLayout(getTopActivity());
    layout.setOrientation(LinearLayout.VERTICAL);
    layout.setPadding(32, 32, 32, 32);
    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
    );
    params.setMargins(0, 16, 0, 16);
    layout.setLayoutParams(params);
    GradientDrawable shape = new GradientDrawable();
    shape.setCornerRadius(32);
    shape.setColor(Color.parseColor("#FFFFFF"));
    layout.setBackground(shape);
    try { layout.setElevation(8); } catch (Exception e) {}
    return layout;
}

private TextView createSectionTitle(String text) {
    TextView textView = new TextView(getTopActivity());
    textView.setText(text);
    textView.setTextSize(16);
    textView.setTextColor(Color.parseColor("#333333"));
    try { textView.getPaint().setFakeBoldText(true); } catch (Exception e) {}
    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.WRAP_CONTENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
    );
    params.setMargins(0, 0, 0, 24);
    textView.setLayoutParams(params);
    return textView;
}

private EditText createStyledEditText(String hint, String initialText) {
    EditText editText = new EditText(getTopActivity());
    editText.setHint(hint);
    editText.setText(initialText);
    editText.setPadding(32, 28, 32, 28);
    editText.setTextSize(14);
    editText.setTextColor(Color.parseColor("#555555"));
    editText.setHintTextColor(Color.parseColor("#999999"));
    GradientDrawable shape = new GradientDrawable();
    shape.setCornerRadius(24);
    shape.setColor(Color.parseColor("#F8F9FA"));
    shape.setStroke(2, Color.parseColor("#E6E9EE"));
    editText.setBackground(shape);
    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
    );
    params.setMargins(0, 8, 0, 16);
    editText.setLayoutParams(params);
    editText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
        public void onFocusChange(View v, boolean hasFocus) {
            GradientDrawable bg = (GradientDrawable) v.getBackground();
            bg.setStroke(hasFocus ? 3 : 2, Color.parseColor(hasFocus ? "#7AA6C2" : "#E6E9EE"));
        }
    });
    return editText;
}

private LinearLayout horizontalRow(View left, View right) {
    LinearLayout row = new LinearLayout(getTopActivity());
    row.setOrientation(LinearLayout.HORIZONTAL);
    row.setGravity(Gravity.CENTER_VERTICAL);
    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
    );
    params.setMargins(0, 8, 0, 8);
    row.setLayoutParams(params);
    LinearLayout.LayoutParams lpLeft = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
    LinearLayout.LayoutParams lpRight = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
    left.setLayoutParams(lpLeft);
    right.setLayoutParams(lpRight);
    row.addView(left);
    row.addView(right);
    return row;
}

private void styleDialogButtons(AlertDialog dialog) {
    Button positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE);
    if (positiveButton != null) {
        positiveButton.setTextColor(Color.WHITE);
        GradientDrawable shape = new GradientDrawable();
        shape.setCornerRadius(20);
        shape.setColor(Color.parseColor("#70A1B8"));
        positiveButton.setBackground(shape);
        positiveButton.setAllCaps(false);
    }
    Button negativeButton = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);
    if (negativeButton != null) {
        negativeButton.setTextColor(Color.parseColor("#333333"));
        GradientDrawable shape = new GradientDrawable();
        shape.setCornerRadius(20);
        shape.setColor(Color.parseColor("#F1F3F5"));
        negativeButton.setBackground(shape);
        negativeButton.setAllCaps(false);
    }
    Button neutralButton = dialog.getButton(AlertDialog.BUTTON_NEUTRAL);
    if (neutralButton != null) {
        neutralButton.setTextColor(Color.parseColor("#4A90E2"));
        neutralButton.setBackgroundColor(Color.TRANSPARENT);
        neutralButton.setAllCaps(false);
    }
}

private void styleUtilityButton(Button button) {
    button.setTextColor(Color.parseColor("#4A90E2"));
    GradientDrawable shape = new GradientDrawable();
    shape.setCornerRadius(20);
    shape.setStroke(3, Color.parseColor("#BBD7E6"));
    shape.setColor(Color.TRANSPARENT);
    button.setBackground(shape);
    button.setAllCaps(false);
    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
    );
    params.setMargins(0, 16, 0, 8);
    button.setLayoutParams(params);
}

private void styleMediaSelectionButton(Button button) {
    button.setTextColor(Color.parseColor("#3B82F6"));
    GradientDrawable shape = new GradientDrawable();
    shape.setCornerRadius(20);
    shape.setColor(Color.parseColor("#EFF6FF"));
    shape.setStroke(2, Color.parseColor("#BFDBFE"));
    button.setBackground(shape);
    button.setAllCaps(false);
    button.setPadding(20, 12, 20, 12);
}

private TextView createPromptText(String text) {
    TextView tv = new TextView(getTopActivity());
    tv.setText(text);
    tv.setTextSize(12);
    tv.setTextColor(Color.parseColor("#666666"));
    tv.setPadding(0, 0, 0, 16);
    return tv;
}

// --- UI ËæÖÂä©ÊñπÊ≥ï ---
private LinearLayout createLinearLayout(Context context, int orientation, int padding) {
    LinearLayout layout = new LinearLayout(context);
    layout.setOrientation(orientation);
    layout.setPadding(padding, padding, padding, padding);
    return layout;
}

private TextView createTextView(Context context, String text, int textSize, int paddingBottom) {
    TextView textView = new TextView(context);
    textView.setText(text);
    if (textSize > 0) textView.setTextSize(textSize);
    textView.setPadding(0, 0, 0, paddingBottom);
    return textView;
}

private EditText createEditText(Context context, String hint, String text, int minLines, int inputType) {
    EditText editText = new EditText(context);
    editText.setHint(hint);
    if (text != null) editText.setText(text);
    if (minLines > 0) editText.setMinLines(minLines);
    if (inputType != 0) editText.setInputType(inputType);
    return editText;
}

private Button createButton(Context context, String text, View.OnClickListener listener) {
    Button button = new Button(context);
    button.setText(text);
    button.setOnClickListener(listener);
    return button;
}

// „Äê‰øÆÊîπ„ÄëÂàõÂª∫ÂºÄÂÖ≥ÔºöÊñπÊ°Ü+‚àöÊ†∑ÂºèÔºåÂ∑¶‰æßÊ∑ªÂä†ËØ¥ÊòéÊñáÊú¨ÔºàÈ¢úËâ≤Êõ¥ÊòéÊòæÔºöÈÄâ‰∏≠#4A90E2ÔºåÊú™ÈÄâ‰∏≠ÊñπÊ°ÜÊõ¥ÊòéÊòæÔºâ
private LinearLayout createSwitchRow(Context context, String labelText, boolean isChecked, View.OnClickListener listener) {
    LinearLayout row = new LinearLayout(context);
    row.setOrientation(LinearLayout.HORIZONTAL);
    row.setGravity(Gravity.CENTER_VERTICAL);
    row.setPadding(0, 16, 0, 16);

    TextView label = new TextView(context);
    label.setText(labelText);
    label.setTextSize(16);
    label.setTextColor(Color.parseColor("#333333"));
    LinearLayout.LayoutParams labelParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
    label.setLayoutParams(labelParams);

    CheckBox checkBox = new CheckBox(context);
    checkBox.setChecked(isChecked);
    checkBox.setOnClickListener(listener);
    LinearLayout.LayoutParams checkParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
    checkParams.setMargins(16, 0, 0, 0);
    checkBox.setLayoutParams(checkParams);

    // „Äê‰øÆÊîπ„ÄëÁÇπÂáªÂ∑¶‰æßËØ¥ÊòéÊñáÊú¨‰πüÂèØ‰ª•ÂàáÊç¢ÂºÄÂÖ≥
    label.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v) {
            checkBox.toggle();
        }
    });

    // „ÄêÊñ∞Â¢û„ÄëÁÇπÂáªÊï¥‰∏™Ë°åÔºà‰ªª‰Ωï‰ΩçÁΩÆÔºâ‰πüÂèØ‰ª•ÂàáÊç¢ÂºÄÂÖ≥
    row.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v) {
            checkBox.toggle();
        }
    });

    row.addView(label);
    row.addView(checkBox);
    return row;
}

private RadioGroup createRadioGroup(Context context, int orientation) {
    RadioGroup radioGroup = new RadioGroup(context);
    radioGroup.setOrientation(orientation);
    return radioGroup;
}

private RadioButton createRadioButton(Context context, String text) {
    RadioButton radioButton = new RadioButton(context);
    radioButton.setText(text);
    radioButton.setId(View.generateViewId());
    return radioButton;
}

private AlertDialog buildCommonAlertDialog(Context context, String title, View view, String positiveBtnText, DialogInterface.OnClickListener positiveListener, String negativeBtnText, DialogInterface.OnClickListener negativeListener, String neutralBtnText, DialogInterface.OnClickListener neutralListener) {
    AlertDialog.Builder builder = new AlertDialog.Builder(context);
    builder.setTitle(title);
    builder.setView(view);
    if (positiveBtnText != null) builder.setPositiveButton(positiveBtnText, positiveListener);
    if (negativeBtnText != null) builder.setNegativeButton(negativeBtnText, negativeListener);
    if (neutralBtnText != null) builder.setNeutralButton(neutralBtnText, neutralListener);
    final AlertDialog dialog = builder.create();
    dialog.setOnShowListener(new DialogInterface.OnShowListener() {
        public void onShow(DialogInterface d) {
            setupUnifiedDialog(dialog);
        }
    });
    return dialog;
}

private int dpToPx(int dp) {
    return (int) (dp * getTopActivity().getResources().getDisplayMetrics().density);
}

// „ÄêÊñ∞Â¢û„ÄëÈÄöÁî®Â§öÈÄâÂàóË°®ÂØπËØùÊ°Ü
private void showMultiSelectDialog(String title, List allItems, List idList, Set selectedIds, String searchHint, final Runnable onConfirm, final Runnable updateList) {
    try {
        final Set tempSelected = new HashSet(selectedIds);
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout mainLayout = new LinearLayout(getTopActivity());
        mainLayout.setOrientation(LinearLayout.VERTICAL);
        mainLayout.setPadding(24, 24, 24, 24);
        mainLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(mainLayout);
        final EditText searchEditText = createStyledEditText(searchHint, "");
        searchEditText.setSingleLine(true);
        mainLayout.addView(searchEditText);
        final ListView listView = new ListView(getTopActivity());
        setupListViewTouchForScroll(listView);
        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        LinearLayout.LayoutParams listParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        listView.setLayoutParams(listParams);
        mainLayout.addView(listView);
        final List currentFilteredIds = new ArrayList();
        final List currentFilteredNames = new ArrayList();
        final Runnable updateListRunnable = new Runnable() {
            public void run() {
                String searchText = searchEditText.getText().toString().toLowerCase();
                currentFilteredIds.clear();
                currentFilteredNames.clear();
                for (int i = 0; i < allItems.size(); i++) {
                    String id = (String) idList.get(i);
                    String name = (String) allItems.get(i);
                    if (searchText.isEmpty() || name.toLowerCase().contains(searchText) || id.toLowerCase().contains(searchText)) {
                        currentFilteredIds.add(id);
                        currentFilteredNames.add(name);
                    }
                }
                ArrayAdapter adapter = new ArrayAdapter(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, currentFilteredNames);
                listView.setAdapter(adapter);
                listView.clearChoices();
                for (int j = 0; j < currentFilteredIds.size(); j++) {
                    listView.setItemChecked(j, tempSelected.contains(currentFilteredIds.get(j)));
                }
                adjustListViewHeight(listView, currentFilteredIds.size());
                if (updateList != null) updateList.run();
                final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                if (currentDialog != null) {
                    updateSelectAllButton(currentDialog, currentFilteredIds, tempSelected);
                }
            }
        };
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int pos, long id) {
                String selected = (String) currentFilteredIds.get(pos);
                if (listView.isItemChecked(pos)) tempSelected.add(selected);
                else tempSelected.remove(selected);
                if (updateList != null) updateList.run();
                final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                if (currentDialog != null) {
                    updateSelectAllButton(currentDialog, currentFilteredIds, tempSelected);
                }
            }
        });
        final Handler searchHandler = new Handler(Looper.getMainLooper());
        final Runnable searchRunnable = new Runnable() {
            public void run() {
                updateListRunnable.run();
            }
        };
        searchEditText.addTextChangedListener(new TextWatcher() {
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (searchRunnable != null) searchHandler.removeCallbacks(searchRunnable);
            }
            public void afterTextChanged(Editable s) {
                searchHandler.postDelayed(searchRunnable, 300);
            }
        });
        
        final DialogInterface.OnClickListener fullSelectListener = new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                boolean shouldSelectAll = shouldSelectAll(currentFilteredIds, tempSelected);
                for (int i = 0; i < currentFilteredIds.size(); i++) {
                    String id = (String) currentFilteredIds.get(i);
                    if (shouldSelectAll) {
                        tempSelected.add(id);
                    } else {
                        tempSelected.remove(id);
                    }
                    listView.setItemChecked(i, shouldSelectAll);
                }
                listView.getAdapter().notifyDataSetChanged();
                listView.requestLayout();
                updateSelectAllButton((AlertDialog) dialog, currentFilteredIds, tempSelected);
            }
        };
        
        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), title, scrollView, "‚úÖ Á°ÆÂÆö", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                selectedIds.clear();
                selectedIds.addAll(tempSelected);
                if (onConfirm != null) onConfirm.run();
                dialog.dismiss();
            }
        }, "‚ùå ÂèñÊ∂à", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        }, "ÂÖ®ÈÄâ", fullSelectListener);
        searchEditText.setTag(dialog);
        
        dialog.setOnShowListener(new DialogInterface.OnShowListener() {
            public void onShow(DialogInterface dialogInterface) {
                setupUnifiedDialog((AlertDialog) dialogInterface);
                Button neutralBtn = ((AlertDialog) dialogInterface).getButton(AlertDialog.BUTTON_NEUTRAL);
                if (neutralBtn != null) {
                    neutralBtn.setOnClickListener(new View.OnClickListener() {
                        public void onClick(View v) {
                            fullSelectListener.onClick(dialog, AlertDialog.BUTTON_NEUTRAL);
                        }
                    });
                }
            }
        });
        dialog.show();
        updateListRunnable.run();
    } catch (Exception e) {
        toast("ÂºπÁ™óÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

private void showAutoReplySettingDialog() {
    try {
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout rootLayout = new LinearLayout(getTopActivity());
        rootLayout.setOrientation(LinearLayout.VERTICAL);
        rootLayout.setPadding(24, 24, 24, 24);
        rootLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(rootLayout);

        // --- Âç°Áâá1: ‰∏ªË¶ÅÂäüËÉΩÁÆ°ÁêÜ ---
        LinearLayout managementCard = createCardLayout();
        managementCard.addView(createSectionTitle("ü§ñ Ëá™Âä®ÂäüËÉΩËÆæÁΩÆ"));
        Button autoAcceptButton = new Button(getTopActivity());
        autoAcceptButton.setText("ü§ù Â•ΩÂèãËØ∑Ê±ÇËá™Âä®Â§ÑÁêÜ");
        styleUtilityButton(autoAcceptButton);
        managementCard.addView(autoAcceptButton);
        Button greetButton = new Button(getTopActivity());
        greetButton.setText("üëã Ê∑ªÂä†Â•ΩÂèãËá™Âä®ÂõûÂ§ç");
        styleUtilityButton(greetButton);
        managementCard.addView(greetButton);
        Button rulesButton = new Button(getTopActivity());
        rulesButton.setText("üìù ÁÆ°ÁêÜÊ∂àÊÅØÂõûÂ§çËßÑÂàô");
        styleUtilityButton(rulesButton);
        managementCard.addView(rulesButton);
        Button aiButton = new Button(getTopActivity());
        aiButton.setText("üß† AI ÈÖçÁΩÆ");
        styleUtilityButton(aiButton);
        managementCard.addView(aiButton);
        Button friendSwitchButton = new Button(getTopActivity());
        friendSwitchButton.setText("üë• Â•ΩÂèãÊ∂àÊÅØËá™Âä®ÂõûÂ§çÂºÄÂÖ≥");
        styleUtilityButton(friendSwitchButton);
        managementCard.addView(friendSwitchButton);
        Button groupSwitchButton = new Button(getTopActivity());
        groupSwitchButton.setText("üè† Áæ§ËÅäÊ∂àÊÅØËá™Âä®ÂõûÂ§çÂºÄÂÖ≥");
        styleUtilityButton(groupSwitchButton);
        managementCard.addView(groupSwitchButton);
        rootLayout.addView(managementCard);

        // --- ÂØπËØùÊ°ÜÊûÑÂª∫ ---
        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), "‚ú® Ëá™Âä®ÂõûÂ§çÁªü‰∏ÄËÆæÁΩÆ ‚ú®", scrollView, null, null, "‚ùå ÂÖ≥Èó≠", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        }, null, null);

        autoAcceptButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showAutoAcceptFriendDialog();
            }
        });

        greetButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showGreetOnAcceptedDialog();
            }
        });

        rulesButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showAutoReplyRulesDialog();
            }
        });

        aiButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showAIChoiceDialog();
            }
        });

        friendSwitchButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showFriendSwitchDialog();
            }
        });

        groupSwitchButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showGroupSwitchDialog();
            }
        });

        dialog.show();

    } catch (Exception e) {
        toast("ÊâìÂºÄËÆæÁΩÆÁïåÈù¢Â§±Ë¥•: " + e.getMessage());
    }
}

// Êñ∞Â¢ûÔºöAIÈÄâÊã©ÂØπËØùÊ°Ü
private void showAIChoiceDialog() {
    LinearLayout layout = new LinearLayout(getTopActivity());
    layout.setOrientation(LinearLayout.VERTICAL);
    layout.setPadding(24, 24, 24, 24);
    layout.setBackgroundColor(Color.parseColor("#FAFBF9"));

    Button xiaozhiButton = new Button(getTopActivity());
    xiaozhiButton.setText("Â∞èÊô∫AI ÈÖçÁΩÆ");
    styleUtilityButton(xiaozhiButton);
    layout.addView(xiaozhiButton);

    Button zhiliaButton = new Button(getTopActivity());
    zhiliaButton.setText("Êô∫ËÅäAI ÈÖçÁΩÆ");
    styleUtilityButton(zhiliaButton);
    layout.addView(zhiliaButton);

    final AlertDialog choiceDialog = buildCommonAlertDialog(getTopActivity(), "üß† ÈÄâÊã©AIÈÖçÁΩÆ", layout, null, null, "‚ùå ÂèñÊ∂à", null, null, null);

    xiaozhiButton.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v) {
            choiceDialog.dismiss();
            showXiaozhiAIConfigDialog();
        }
    });

    zhiliaButton.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v) {
            choiceDialog.dismiss();
            showZhiliaAIConfigDialog();
        }
    });

    choiceDialog.show();
}

// Â∞èÊô∫AIÈÖçÁΩÆ (ÂéüÊúâ)
private void showXiaozhiAIConfigDialog() {
    showAIConfigDialog();
}

// Êô∫ËÅäAIÈÖçÁΩÆ (ÁßªÊ§çËá™ÊóßËÑöÊú¨ÔºåË∞ÉÊï¥UIÈ£éÊ†º)
private void showZhiliaAIConfigDialog() {
    try {
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout layout = new LinearLayout(getTopActivity());
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.setPadding(24, 24, 24, 24);
        layout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(layout);

        // --- Âç°Áâá1: APIÈÖçÁΩÆ ---
        LinearLayout apiCard = createCardLayout();
        apiCard.addView(createSectionTitle("Êô∫ËÅäAI ÂèÇÊï∞ËÆæÁΩÆ"));
        apiCard.addView(createTextView(getTopActivity(), "API Key:", 14, 0));
        final EditText apiKeyEdit = createStyledEditText("ËØ∑ËæìÂÖ•‰Ω†ÁöÑAPI Key", getString(ZHILIA_AI_API_KEY, ""));
        apiCard.addView(apiKeyEdit);
        apiCard.addView(createTextView(getTopActivity(), "API URL:", 14, 0));
        final EditText apiUrlEdit = createStyledEditText("ÈªòËÆ§‰∏∫ÂÆòÊñπAPI", getString(ZHILIA_AI_API_URL, "https://api.siliconflow.cn/v1/chat/completions"));
        apiCard.addView(apiUrlEdit);
        apiCard.addView(createTextView(getTopActivity(), "Ê®°ÂûãÂêçÁß∞:", 14, 0));
        final EditText modelNameEdit = createStyledEditText("‰æãÂ¶Ç deepseek-ai/DeepSeek-V2-Chat", getString(ZHILIA_AI_MODEL_NAME, "deepseek-ai/DeepSeek-V3"));
        apiCard.addView(modelNameEdit);
        layout.addView(apiCard);

        // --- Âç°Áâá2: È´òÁ∫ßËÆæÁΩÆ ---
        LinearLayout advancedCard = createCardLayout();
        advancedCard.addView(createSectionTitle("È´òÁ∫ßËÆæÁΩÆ"));
        advancedCard.addView(createTextView(getTopActivity(), "‰∏ä‰∏ãÊñáËΩÆÊ¨° (Âª∫ËÆÆ5-10):", 14, 0));
        final EditText contextLimitEdit = createStyledEditText("Êï∞Â≠óË∂äÂ§ßË∂äÊ∂àËÄóToken", String.valueOf(getInt(ZHILIA_AI_CONTEXT_LIMIT, 10)));
        contextLimitEdit.setInputType(InputType.TYPE_CLASS_NUMBER);
        advancedCard.addView(contextLimitEdit);
        advancedCard.addView(createTextView(getTopActivity(), "Á≥ªÁªüÊåá‰ª§ (AIËßíËâ≤ËÆæÂÆö):", 14, 0));
        final EditText systemPromptEdit = createStyledEditText("ËÆæÂÆöAIÁöÑË∫´‰ªΩÂíåÂõûÂ§çÈ£éÊ†º", getString(ZHILIA_AI_SYSTEM_PROMPT, "‰Ω†ÊòØ‰∏™ÂÆùÂÆù"));
        systemPromptEdit.setMinLines(3);
        systemPromptEdit.setGravity(Gravity.TOP);
        advancedCard.addView(systemPromptEdit);
        layout.addView(advancedCard);

        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), "üß† Êô∫ËÅäAI ÂèÇÊï∞ËÆæÁΩÆ", scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                String apiKey = apiKeyEdit.getText().toString().trim();
                if (TextUtils.isEmpty(apiKey)) {
                    toast("API Key ‰∏çËÉΩ‰∏∫Á©∫ÔºÅ");
                    return;
                }
                putString(ZHILIA_AI_API_KEY, apiKey);
                putString(ZHILIA_AI_API_URL, apiUrlEdit.getText().toString().trim());
                putString(ZHILIA_AI_MODEL_NAME, modelNameEdit.getText().toString().trim());
                putString(ZHILIA_AI_SYSTEM_PROMPT, systemPromptEdit.getText().toString().trim());
                try {
                    putInt(ZHILIA_AI_CONTEXT_LIMIT, Integer.parseInt(contextLimitEdit.getText().toString().trim()));
                } catch (Exception e) {
                    putInt(ZHILIA_AI_CONTEXT_LIMIT, 10); // Default value on error
                }
                toast("Êô∫ËÅäAI ËÆæÁΩÆÂ∑≤‰øùÂ≠ò");
                dialog.dismiss();
            }
        }, "‚ùå ÂèñÊ∂à", null, null, null);

        dialog.show();

    } catch (Exception e) {
        toast("ÊâìÂºÄÊô∫ËÅäAIËÆæÁΩÆÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

// ========== ÈÄöÁî®ÂõûÂ§çÂ∫èÂàóËÆæÁΩÆÂØπËØùÊ°Ü ==========
private void showReplySequenceDialog(String title, String enabledKey, String delayKey, String itemsKey, String defaultText, String promptText, String featureName) {
    try {
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout rootLayout = new LinearLayout(getTopActivity());
        rootLayout.setOrientation(LinearLayout.VERTICAL);
        rootLayout.setPadding(24, 24, 24, 24);
        rootLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(rootLayout);

        // --- Âç°Áâá1: Ê†∏ÂøÉËÆæÁΩÆ ---
        LinearLayout coreSettingsCard = createCardLayout();
        coreSettingsCard.addView(createSectionTitle(featureName));
        final LinearLayout enabledSwitchRow = createSwitchRow(getTopActivity(), "ÂêØÁî®" + featureName, getBoolean(enabledKey, false), new View.OnClickListener() {
            public void onClick(View v) {}
        });
        coreSettingsCard.addView(enabledSwitchRow);
        TextView prompt = createPromptText(promptText);
        coreSettingsCard.addView(prompt);
        rootLayout.addView(coreSettingsCard);

        // --- Âç°Áâá2: ÂõûÂ§çÂ∫èÂàó ---
        LinearLayout replyCard = createCardLayout();
        replyCard.addView(createSectionTitle("ÂõûÂ§çÊ∂àÊÅØÂ∫èÂàó"));
        final ListView replyItemsListView = new ListView(getTopActivity());
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(replyItemsListView);
        replyItemsListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams replyListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        replyItemsListView.setLayoutParams(replyListParams);
        final ArrayAdapter replyItemsAdapter = new ArrayAdapter(getTopActivity(), android.R.layout.simple_list_item_multiple_choice);
        replyItemsListView.setAdapter(replyItemsAdapter);
        replyCard.addView(replyItemsListView);
        TextView replyPrompt = createPromptText("ÁÇπÂáªÂàóË°®È°πÈÄâÊã©ÔºåÁÑ∂Âêé‰ΩøÁî®‰∏ãÈù¢ÁöÑÊåâÈíÆÊ∑ªÂä†/ÁºñËæë/Âà†Èô§ÂõûÂ§çÈ°π");
        replyCard.addView(replyPrompt);

        LinearLayout buttonsLayout = new LinearLayout(getTopActivity());
        buttonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button addButton = new Button(getTopActivity());
        addButton.setText("‚ûï Ê∑ªÂä†");
        styleUtilityButton(addButton);
        Button editButton = new Button(getTopActivity());
        editButton.setText("‚úèÔ∏è ÁºñËæë");
        styleUtilityButton(editButton);
        Button delButton = new Button(getTopActivity());
        delButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(delButton);
        LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        addButton.setLayoutParams(buttonParams);
        editButton.setLayoutParams(buttonParams);
        delButton.setLayoutParams(buttonParams);
        buttonsLayout.addView(addButton);
        buttonsLayout.addView(editButton);
        buttonsLayout.addView(delButton);
        replyCard.addView(buttonsLayout);
        rootLayout.addView(replyCard);

        // --- Âç°Áâá3: Âª∂ËøüËÆæÁΩÆ ---
        LinearLayout delayCard = createCardLayout();
        delayCard.addView(createSectionTitle("Âª∂ËøüÂèëÈÄÅÊ∂àÊÅØ (Áßí)"));
        final EditText delayEdit = createStyledEditText("ÈªòËÆ§‰∏∫2Áßí", String.valueOf(getLong(delayKey, 2L)));
        delayEdit.setInputType(InputType.TYPE_CLASS_NUMBER);
        delayCard.addView(delayEdit);
        rootLayout.addView(delayCard);

        final Set<AcceptReplyItem> selectedItems = new HashSet<AcceptReplyItem>();
        final List replyItems = getReplyItems(itemsKey, defaultText);
        final Runnable refreshList = new Runnable() {
            public void run() {
                replyItemsAdapter.clear();
                for (int i = 0; i < replyItems.size(); i++) {
                    AcceptReplyItem item = (AcceptReplyItem) replyItems.get(i);
                    String typeStr = getReplyTypeStr(item.type);
                    String contentPreview = item.content.length() > 20 ? 
                        item.content.substring(0, 20) + "..." : item.content;
                    replyItemsAdapter.add((i + 1) + ". [" + typeStr + "] " + contentPreview);
                }
                replyItemsAdapter.notifyDataSetChanged();
                replyItemsListView.clearChoices();
                for (int i = 0; i < replyItems.size(); i++) {
                    AcceptReplyItem item = (AcceptReplyItem) replyItems.get(i);
                    if (selectedItems.contains(item)) {
                        replyItemsListView.setItemChecked(i, true);
                    }
                }
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(replyItemsListView, replyItems.size());
                updateReplyButtonsVisibility(editButton, delButton, selectedItems.size());
            }
        };
        refreshList.run();
        
        replyItemsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                AcceptReplyItem item = (AcceptReplyItem) replyItems.get(position);
                if (replyItemsListView.isItemChecked(position)) {
                    selectedItems.add(item);
                } else {
                    selectedItems.remove(item);
                }
                updateReplyButtonsVisibility(editButton, delButton, selectedItems.size());
            }
        });
        
        addButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                AcceptReplyItem newItem = new AcceptReplyItem(ACCEPT_REPLY_TYPE_TEXT, "");
                showEditReplyItemDialog(newItem, replyItems, refreshList, -1, featureName);
            }
        });
        
        editButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedItems.size() == 1) {
                    AcceptReplyItem editItem = selectedItems.iterator().next();
                    showEditReplyItemDialog(editItem, replyItems, refreshList, -1, featureName);
                } else {
                    toast("ÁºñËæëÊó∂Âè™ËÉΩÈÄâÊã©‰∏Ä‰∏™ÂõûÂ§çÈ°π");
                }
            }
        });
        
        delButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedItems.isEmpty()) {
                    replyItems.removeAll(selectedItems);
                    selectedItems.clear();
                    refreshList.run();
                    toast("ÈÄâ‰∏≠ÁöÑÂõûÂ§çÈ°πÂ∑≤Âà†Èô§");
                } else {
                    toast("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÂõûÂ§çÈ°π");
                }
            }
        });
        
        final CheckBox enabledCheckBox = (CheckBox) enabledSwitchRow.getChildAt(1);
        
        // --- ÂØπËØùÊ°ÜÊûÑÂª∫ ---
        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), title, scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                try {
                    putBoolean(enabledKey, enabledCheckBox.isChecked());
                    if (itemsKey.equals(AUTO_ACCEPT_REPLY_ITEMS_KEY)) {
                        saveAutoAcceptReplyItems(replyItems);
                    } else if (itemsKey.equals(GREET_ON_ACCEPTED_REPLY_ITEMS_KEY)) {
                        saveGreetOnAcceptedReplyItems(replyItems);
                    }

                    long delay = 2L;
                    try {
                        delay = Long.parseLong(delayEdit.getText().toString());
                    } catch (Exception e) { /* ignore */ }
                    putLong(delayKey, delay);

                    toast("ËÆæÁΩÆÂ∑≤‰øùÂ≠ò");
                    dialog.dismiss();
                } catch (Exception e) {
                    toast("‰øùÂ≠òÂ§±Ë¥•: " + e.getMessage());
                }
            }
        }, "‚ùå ÂèñÊ∂à", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        }, null, null);

        dialog.show();
        
    } catch (Exception e) {
        toast("ÂºπÁ™óÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

// ========== UIÔºöËá™Âä®ÂêåÊÑèÂ•ΩÂèãËÆæÁΩÆ ==========
private void showAutoAcceptFriendDialog() {
    showReplySequenceDialog("‚ú® Â•ΩÂèãËØ∑Ê±ÇËá™Âä®Â§ÑÁêÜËÆæÁΩÆ ‚ú®", AUTO_ACCEPT_FRIEND_ENABLED_KEY, AUTO_ACCEPT_DELAY_KEY, AUTO_ACCEPT_REPLY_ITEMS_KEY, 
                            "%friendName%‚ú® ‰Ω†Â•ΩÔºåÂæàÈ´òÂÖ¥ËÆ§ËØÜ‰Ω†ÔºÅ", "‚ö†Ô∏è ÂãæÈÄâÂêéÂ∞ÜËá™Âä®ÈÄöËøáÊâÄÊúâÂ•ΩÂèãËØ∑Ê±ÇÔºåÂπ∂ÂèëÈÄÅÊ¨¢ËøéÊ∂àÊÅØ", "Ëá™Âä®ÂêåÊÑèÂ•ΩÂèã");
}

// ========== UIÔºöÊàëÊ∑ªÂä†Â•ΩÂèãË¢´ÈÄöËøáÂêéÔºåËá™Âä®ÂõûÂ§çËÆæÁΩÆ ==========
private void showGreetOnAcceptedDialog() {
    showReplySequenceDialog("‚ú® Ê∑ªÂä†Â•ΩÂèãËá™Âä®ÂõûÂ§çËÆæÁΩÆ ‚ú®", GREET_ON_ACCEPTED_ENABLED_KEY, GREET_ON_ACCEPTED_DELAY_KEY, GREET_ON_ACCEPTED_REPLY_ITEMS_KEY, 
                            "ÂìàÂñΩÔºå%friendName%ÔºÅÊÑüË∞¢ÈÄöËøáÂ•ΩÂèãËØ∑Ê±ÇÔºå‰ª•ÂêéËØ∑Â§öÊåáÊïôÂï¶ÔºÅ", "‚ö†Ô∏è ÂãæÈÄâÂêéÔºåÂΩìÂ•ΩÂèãÈÄöËøá‰Ω†ÁöÑËØ∑Ê±ÇÊó∂ÔºåÂ∞ÜËá™Âä®ÂèëÈÄÅÊ¨¢ËøéÊ∂àÊÅØ", "Ê∑ªÂä†Â•ΩÂèãÂõûÂ§ç");
}

// „ÄêÊñ∞Â¢û„ÄëÊõ¥Êñ∞ÂõûÂ§çÊåâÈíÆÂèØËßÅÊÄß
private void updateReplyButtonsVisibility(Button editButton, Button delButton, int selectedCount) {
    if (selectedCount == 1) {
        editButton.setVisibility(View.VISIBLE);
        delButton.setVisibility(View.VISIBLE);
    } else if (selectedCount > 1) {
        editButton.setVisibility(View.GONE);
        delButton.setVisibility(View.VISIBLE);
    } else {
        editButton.setVisibility(View.GONE);
        delButton.setVisibility(View.GONE);
    }
}

// „ÄêÊñ∞Â¢û„ÄëËé∑ÂèñÂõûÂ§çÁ±ªÂûãÂ≠óÁ¨¶‰∏≤
private String getReplyTypeStr(int type) {
    switch (type) {
        case ACCEPT_REPLY_TYPE_TEXT: return "ÊñáÊú¨";
        case ACCEPT_REPLY_TYPE_IMAGE: return "ÂõæÁâá";
        case ACCEPT_REPLY_TYPE_VOICE_FIXED: return "Âõ∫ÂÆöËØ≠Èü≥";
        case ACCEPT_REPLY_TYPE_VOICE_RANDOM: return "ÈöèÊú∫ËØ≠Èü≥";
        case ACCEPT_REPLY_TYPE_EMOJI: return "Ë°®ÊÉÖ";
        case ACCEPT_REPLY_TYPE_VIDEO: return "ËßÜÈ¢ë";
        case ACCEPT_REPLY_TYPE_CARD: return "ÂêçÁâá"; // ÊîØÊåÅÂ§öÈÄâ
        case ACCEPT_REPLY_TYPE_FILE: return "Êñá‰ª∂";
        default: return "Êú™Áü•";
    }
}

// ÈÄöÁî®ÔºöÁºñËæëÂõûÂ§çÈ°πÂØπËØùÊ°ÜÔºà‰øÆÂ§çÁºñËæëÈÄªËæëÔºåÁ°Æ‰øùcontentÊõ¥Êñ∞Ôºâ
private void showEditReplyItemDialog(final AcceptReplyItem item, final List itemsList, 
                                    final Runnable refreshCallback, final int editPosition, String featureName) {
    try {
        // „Äê‰øÆÂ§ç„Äë‰∏∫ÁºñËæëÂàõÂª∫ÂèØÂèòÂâØÊú¨Ôºå‰ΩÜÁõ¥Êé•‰ΩøÁî®ÂéüitemÂºïÁî®
        final AtomicReference<AcceptReplyItem> editableItemRef = new AtomicReference<AcceptReplyItem>(item);
        
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout layout = new LinearLayout(getTopActivity());
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.setPadding(24, 24, 24, 24);
        layout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(layout);

        // --- Âç°Áâá1: ÂõûÂ§çÁ±ªÂûã ---
        LinearLayout typeCard = createCardLayout();
        typeCard.addView(createSectionTitle("ÂõûÂ§çÁ±ªÂûã"));
        final RadioGroup replyTypeGroup = createRadioGroup(getTopActivity(), LinearLayout.VERTICAL);
        final RadioButton typeTextRadio = createRadioButton(getTopActivity(), "üìÑÊñáÊú¨");
        final RadioButton typeImageRadio = createRadioButton(getTopActivity(), "üñºÔ∏èÂõæÁâá");
        final RadioButton typeVoiceFixedRadio = createRadioButton(getTopActivity(), "üé§Âõ∫ÂÆöËØ≠Èü≥");
        final RadioButton typeVoiceRandomRadio = createRadioButton(getTopActivity(), "üîÄüé§ÈöèÊú∫ËØ≠Èü≥");
        final RadioButton typeEmojiRadio = createRadioButton(getTopActivity(), "üòäË°®ÊÉÖ");
        final RadioButton typeVideoRadio = createRadioButton(getTopActivity(), "üé¨ËßÜÈ¢ë");
        final RadioButton typeCardRadio = createRadioButton(getTopActivity(), "üìáÂêçÁâá"); // ÊîØÊåÅÂ§öÈÄâ
        final RadioButton typeFileRadio = createRadioButton(getTopActivity(), "üìÅÊñá‰ª∂"); // Êñ∞Â¢ûÊñá‰ª∂ÈÄâÈ°π
        replyTypeGroup.addView(typeTextRadio);
        replyTypeGroup.addView(typeImageRadio);
        replyTypeGroup.addView(typeVoiceFixedRadio);
        replyTypeGroup.addView(typeVoiceRandomRadio);
        replyTypeGroup.addView(typeEmojiRadio);
        replyTypeGroup.addView(typeVideoRadio);
        replyTypeGroup.addView(typeCardRadio);
        replyTypeGroup.addView(typeFileRadio); // Êñ∞Â¢û
        typeCard.addView(replyTypeGroup);
        layout.addView(typeCard);
        
        final TextView contentLabel = new TextView(getTopActivity());
        contentLabel.setText("ÂÜÖÂÆπ:");
        contentLabel.setTextSize(14);
        contentLabel.setTextColor(Color.parseColor("#333333"));
        contentLabel.setPadding(0, 0, 0, 16);
        final EditText contentEdit = createStyledEditText("ËØ∑ËæìÂÖ•ÂÜÖÂÆπ", editableItemRef.get().content);
        contentEdit.setMinLines(3);
        contentEdit.setGravity(Gravity.TOP);
        layout.addView(contentLabel);
        layout.addView(contentEdit);
        
        // „ÄêÊñ∞Â¢û„ÄëÂ™í‰ΩìÂèëÈÄÅÂª∂ËøüËÆæÁΩÆ
        final TextView mediaDelayLabel = new TextView(getTopActivity());
        mediaDelayLabel.setText("Â™í‰ΩìÂèëÈÄÅÈó¥Èöî (Áßí):");
        mediaDelayLabel.setTextSize(14);
        mediaDelayLabel.setTextColor(Color.parseColor("#333333"));
        mediaDelayLabel.setPadding(0, 0, 0, 16);
        final EditText mediaDelayEdit = createStyledEditText("ÈªòËÆ§‰∏∫1Áßí", String.valueOf(editableItemRef.get().mediaDelaySeconds));
        mediaDelayEdit.setInputType(InputType.TYPE_CLASS_NUMBER);
        
        // Â™í‰ΩìÈÄâÊã©Â∏ÉÂ±Ä
        final LinearLayout mediaLayout = new LinearLayout(getTopActivity());
        mediaLayout.setOrientation(LinearLayout.VERTICAL);
        mediaLayout.setPadding(0, 0, 0, 16);
        final TextView currentPathTv = new TextView(getTopActivity());
        // „Äê‰øÆÂ§ç„ÄëÂàùÂßãÊòæÁ§∫ÂÖ∑‰ΩìË∑ØÂæÑÂàóË°®Ôºà\nÂàÜÈöîÔºâÔºåËÄåÈùûcontentÁöÑ;;;Ê†ºÂºè
        StringBuilder initialPathDisplay = new StringBuilder();
        if (!TextUtils.isEmpty(editableItemRef.get().content)) {
            String[] parts = editableItemRef.get().content.split(";;;");
            for (int k = 0; k < parts.length; k++) {
                if (!TextUtils.isEmpty(parts[k].trim())) {
                    initialPathDisplay.append(new File(parts[k].trim()).getName()).append("\n");
                }
            }
        }
        currentPathTv.setText(initialPathDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©Â™í‰Ωì" : initialPathDisplay.toString().trim());
        currentPathTv.setTextSize(14);
        currentPathTv.setTextColor(Color.parseColor("#666666"));
        currentPathTv.setPadding(0, 8, 0, 0);
        final Button selectMediaBtn = new Button(getTopActivity());
        selectMediaBtn.setText("ÈÄâÊã©Â™í‰ΩìÊñá‰ª∂/Êñá‰ª∂Â§π");
        styleMediaSelectionButton(selectMediaBtn);
        mediaLayout.addView(currentPathTv);
        mediaLayout.addView(selectMediaBtn);
        
        // „Äê‰øÆÊîπ„ÄëÂ™í‰ΩìÂàóË°®‰∏éÈ°∫Â∫èÁÆ°ÁêÜÔºö‰ΩøÁî®simple_list_item_multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°ÜÔºåÊîØÊåÅÂ§öÈÄâ
        final LinearLayout mediaOrderLayout = new LinearLayout(getTopActivity());
        mediaOrderLayout.setOrientation(LinearLayout.VERTICAL);
        mediaOrderLayout.setPadding(0, 0, 0, 16);
        final ListView mediaListView = new ListView(getTopActivity());
        // „Äê‰øÆÊîπ„Äë‰ΩøÁî®multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°Ü
        final ArrayList<String> displayMediaList = new ArrayList<String>();
        mediaListView.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, displayMediaList));
        mediaListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(mediaListView);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams mediaListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        mediaListView.setLayoutParams(mediaListParams);
        mediaOrderLayout.addView(mediaListView);
        TextView orderPrompt = createPromptText("ÈÄâ‰∏≠Â™í‰ΩìÂêéÔºå‰ΩøÁî®‰∏ãÊñπÊåâÈíÆË∞ÉÊï¥ÂèëÈÄÅÈ°∫Â∫èÔºàÈ°∫Â∫èÂèëÈÄÅÔºåÈó¥ÈöîËá™ÂÆö‰πâÁßíÔºâ");
        mediaOrderLayout.addView(orderPrompt);
        final LinearLayout orderButtonsLayout = new LinearLayout(getTopActivity());
        orderButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button upButton = new Button(getTopActivity());
        upButton.setText("‚¨Ü ‰∏äÁßª");
        styleUtilityButton(upButton);
        upButton.setEnabled(false);
        Button downButton = new Button(getTopActivity());
        downButton.setText("‚¨á ‰∏ãÁßª");
        styleUtilityButton(downButton);
        downButton.setEnabled(false);
        Button deleteButton = new Button(getTopActivity());
        deleteButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(deleteButton);
        deleteButton.setEnabled(false);
        LinearLayout.LayoutParams orderBtnParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        upButton.setLayoutParams(orderBtnParams);
        downButton.setLayoutParams(orderBtnParams);
        deleteButton.setLayoutParams(orderBtnParams);
        orderButtonsLayout.addView(upButton);
        orderButtonsLayout.addView(downButton);
        orderButtonsLayout.addView(deleteButton);
        mediaOrderLayout.addView(orderButtonsLayout);
        
        // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáÈÄâÊã©Â∏ÉÂ±ÄÔºàÁ±ª‰ººÂ™í‰ΩìÔºå‰ΩÜÈÄâÊã©Â•ΩÂèãWxidÔºâ
        final LinearLayout cardLayout = new LinearLayout(getTopActivity());
        cardLayout.setOrientation(LinearLayout.VERTICAL);
        cardLayout.setPadding(0, 0, 0, 16);
        final TextView currentCardTv = new TextView(getTopActivity());
        // „ÄêÊñ∞Â¢û„ÄëÂàùÂßãÊòæÁ§∫ÈÄâ‰∏≠ÁöÑWxidÂàóË°®Ôºà\nÂàÜÈöîÔºâ
        StringBuilder initialCardDisplay = new StringBuilder();
        if (!TextUtils.isEmpty(editableItemRef.get().content)) {
            String[] wxidParts = editableItemRef.get().content.split(";;;");
            for (int k = 0; k < wxidParts.length; k++) {
                if (!TextUtils.isEmpty(wxidParts[k].trim())) {
                    initialCardDisplay.append(wxidParts[k].trim()).append("\n");
                }
            }
        }
        currentCardTv.setText(initialCardDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©ÂêçÁâá" : initialCardDisplay.toString().trim());
        currentCardTv.setTextSize(14);
        currentCardTv.setTextColor(Color.parseColor("#666666"));
        currentCardTv.setPadding(0, 8, 0, 0);
        final Button selectCardBtn = new Button(getTopActivity());
        selectCardBtn.setText("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèãÔºàÂ§öÈÄâÔºâ");
        styleMediaSelectionButton(selectCardBtn);
        cardLayout.addView(currentCardTv);
        cardLayout.addView(selectCardBtn);
        
        // „Äê‰øÆÊîπ„ÄëÂêçÁâáÂàóË°®‰∏éÈ°∫Â∫èÁÆ°ÁêÜÔºö‰ΩøÁî®simple_list_item_multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°ÜÔºåÊîØÊåÅÂ§öÈÄâ
        final LinearLayout cardOrderLayout = new LinearLayout(getTopActivity());
        cardOrderLayout.setOrientation(LinearLayout.VERTICAL);
        cardOrderLayout.setPadding(0, 0, 0, 16);
        final ListView cardListView = new ListView(getTopActivity());
        // „Äê‰øÆÊîπ„Äë‰ΩøÁî®multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°Ü
        final ArrayList<String> displayCardList = new ArrayList<String>();
        cardListView.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, displayCardList));
        cardListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(cardListView);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams cardListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        cardListView.setLayoutParams(cardListParams);
        cardOrderLayout.addView(cardListView);
        TextView cardOrderPrompt = createPromptText("ÈÄâ‰∏≠ÂêçÁâáÂêéÔºå‰ΩøÁî®‰∏ãÊñπÊåâÈíÆË∞ÉÊï¥ÂèëÈÄÅÈ°∫Â∫èÔºàÈ°∫Â∫èÂèëÈÄÅÔºåÈó¥ÈöîËá™ÂÆö‰πâÁßíÔºâ");
        cardOrderLayout.addView(cardOrderPrompt);
        final LinearLayout cardOrderButtonsLayout = new LinearLayout(getTopActivity());
        cardOrderButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button cardUpButton = new Button(getTopActivity());
        cardUpButton.setText("‚¨Ü ‰∏äÁßª");
        styleUtilityButton(cardUpButton);
        cardUpButton.setEnabled(false);
        Button cardDownButton = new Button(getTopActivity());
        cardDownButton.setText("‚¨á ‰∏ãÁßª");
        styleUtilityButton(cardDownButton);
        cardDownButton.setEnabled(false);
        Button cardDeleteButton = new Button(getTopActivity());
        cardDeleteButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(cardDeleteButton);
        cardDeleteButton.setEnabled(false);
        LinearLayout.LayoutParams cardOrderBtnParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        cardUpButton.setLayoutParams(cardOrderBtnParams);
        cardDownButton.setLayoutParams(cardOrderBtnParams);
        cardDeleteButton.setLayoutParams(cardOrderBtnParams);
        cardOrderButtonsLayout.addView(cardUpButton);
        cardOrderButtonsLayout.addView(cardDownButton);
        cardOrderButtonsLayout.addView(cardDeleteButton);
        cardOrderLayout.addView(cardOrderButtonsLayout);
        
        final List<String> mediaPaths = new ArrayList<String>();
        if (!TextUtils.isEmpty(editableItemRef.get().content)) {
            String[] parts = editableItemRef.get().content.split(";;;");
            for (int k = 0; k < parts.length; k++) {
                String p = parts[k].trim();
                if (!TextUtils.isEmpty(p)) mediaPaths.add(p);
            }
        }
        final List<String> cardWxids = new ArrayList<String>(); // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáWxidÂàóË°®
        if (!TextUtils.isEmpty(editableItemRef.get().content)) {
            String[] wxidParts = editableItemRef.get().content.split(";;;");
            for (int k = 0; k < wxidParts.length; k++) {
                String wxid = wxidParts[k].trim();
                if (!TextUtils.isEmpty(wxid)) cardWxids.add(wxid);
            }
        }
        // „ÄêÊñ∞Â¢û„ÄëÂü∫‰∫éÂÜÖÂÆπÁöÑÈÄâ‰∏≠ÈõÜ
        final Set<String> selectedMediaPaths = new HashSet<String>();
        final Set<String> selectedCardWxids = new HashSet<String>();
        final Runnable updateMediaList = new Runnable() {
            public void run() {
                displayMediaList.clear();
                for (int k = 0; k < mediaPaths.size(); k++) {
                    String path = mediaPaths.get(k);
                    String fileName = new File(path).getName(); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                    String display = (k + 1) + ". " + (fileName.length() > 30 ? fileName.substring(0, 30) + "..." : fileName);
                    displayMediaList.add(display);
                }
                ((ArrayAdapter<String>) mediaListView.getAdapter()).notifyDataSetChanged();
                mediaListView.clearChoices();
                mediaListView.requestLayout(); // „ÄêÊñ∞Â¢û„ÄëÂº∫Âà∂ÈáçÁªòÔºåÁ°Æ‰øùcheckedÁä∂ÊÄÅÊõ¥Êñ∞
                // „ÄêV9„ÄëÊõ¥Êñ∞currentPathTv‰∏∫Êñá‰ª∂ÂêçÂàóË°®ÊòæÁ§∫ÔºåËÄåÈùûÂÆåÊï¥Ë∑ØÂæÑ
                StringBuilder pathDisplay = new StringBuilder();
                for (String path : mediaPaths) {
                    pathDisplay.append(new File(path).getName()).append("\n");
                }
                currentPathTv.setText(pathDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©Â™í‰Ωì" : pathDisplay.toString().trim());
                editableItemRef.get().content = TextUtils.join(";;;", mediaPaths);
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(mediaListView, mediaPaths.size());
                // ÈáçÊñ∞ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅ
                for (int k = 0; k < mediaPaths.size(); k++) {
                    if (selectedMediaPaths.contains(mediaPaths.get(k))) {
                        mediaListView.setItemChecked(k, true);
                    }
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(mediaListView, orderButtonsLayout, mediaPaths.size(), upButton, downButton, deleteButton);
            }
        };
        final Runnable updateCardList = new Runnable() { // „ÄêÊñ∞Â¢û„ÄëÊõ¥Êñ∞ÂêçÁâáÂàóË°®
            public void run() {
                displayCardList.clear();
                for (int k = 0; k < cardWxids.size(); k++) {
                    String wxid = cardWxids.get(k);
                    String display = (k + 1) + ". " + (wxid.length() > 30 ? wxid.substring(0, 30) + "..." : wxid);
                    displayCardList.add(display);
                }
                ((ArrayAdapter<String>) cardListView.getAdapter()).notifyDataSetChanged();
                cardListView.clearChoices();
                cardListView.requestLayout(); // „ÄêÊñ∞Â¢û„ÄëÂº∫Âà∂ÈáçÁªòÔºåÁ°Æ‰øùcheckedÁä∂ÊÄÅÊõ¥Êñ∞
                // Êõ¥Êñ∞currentCardTv‰∏∫WxidÂàóË°®ÊòæÁ§∫
                StringBuilder cardDisplay = new StringBuilder();
                for (String wxid : cardWxids) {
                    cardDisplay.append(wxid).append("\n");
                }
                currentCardTv.setText(cardDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©ÂêçÁâá" : cardDisplay.toString().trim());
                editableItemRef.get().content = TextUtils.join(";;;", cardWxids);
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(cardListView, cardWxids.size());
                // ÈáçÊñ∞ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅ
                for (int k = 0; k < cardWxids.size(); k++) {
                    if (selectedCardWxids.contains(cardWxids.get(k))) {
                        cardListView.setItemChecked(k, true);
                    }
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(cardListView, cardOrderButtonsLayout, cardWxids.size(), cardUpButton, cardDownButton, cardDeleteButton);
            }
        };
        updateMediaList.run();
        updateCardList.run(); // „ÄêÊñ∞Â¢û„Äë
        
        final Runnable updateInputs = new Runnable() {
            public void run() {
                int type = editableItemRef.get().type;
                boolean isTextType = (type == ACCEPT_REPLY_TYPE_TEXT);
                boolean isMediaType = !isTextType && (type != ACCEPT_REPLY_TYPE_CARD);
                boolean isCardType = (type == ACCEPT_REPLY_TYPE_CARD);
                contentLabel.setVisibility(isTextType ? View.VISIBLE : View.GONE);
                contentEdit.setVisibility(isTextType ? View.VISIBLE : View.GONE);
                mediaDelayLabel.setVisibility(isMediaType || isCardType ? View.VISIBLE : View.GONE);
                mediaDelayEdit.setVisibility(isMediaType || isCardType ? View.VISIBLE : View.GONE);
                mediaLayout.setVisibility(isMediaType ? View.VISIBLE : View.GONE);
                mediaOrderLayout.setVisibility(isMediaType ? View.VISIBLE : View.GONE);
                cardLayout.setVisibility(isCardType ? View.VISIBLE : View.GONE); // „ÄêÊñ∞Â¢û„Äë
                cardOrderLayout.setVisibility(isCardType ? View.VISIBLE : View.GONE); // „ÄêÊñ∞Â¢û„Äë
                if (type == ACCEPT_REPLY_TYPE_TEXT) {
                    contentLabel.setText("ÊñáÊú¨ÂÜÖÂÆπ (ÂèØÁî® %friendName%):");
                    contentEdit.setHint("ËæìÂÖ•Ê¨¢ËøéÊñáÊú¨...");
                } else if (type == ACCEPT_REPLY_TYPE_IMAGE) {
                    contentLabel.setText("ÂõæÁâáË∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•ÂõæÁâáÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©ÂõæÁâáÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ");
                } else if (type == ACCEPT_REPLY_TYPE_VOICE_FIXED) {
                    contentLabel.setText("ËØ≠Èü≥Êñá‰ª∂Ë∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•ËØ≠Èü≥Êñá‰ª∂ÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©ËØ≠Èü≥Êñá‰ª∂ÔºàÂ§öÈÄâÔºâ"); // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÈÄâ
                } else if (type == ACCEPT_REPLY_TYPE_VOICE_RANDOM) {
                    contentLabel.setText("ËØ≠Èü≥Êñá‰ª∂Â§πË∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•ËØ≠Èü≥Êñá‰ª∂Â§πÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©ËØ≠Èü≥Êñá‰ª∂Â§π");
                } else if (type == ACCEPT_REPLY_TYPE_EMOJI) {
                    contentLabel.setText("Ë°®ÊÉÖÊñá‰ª∂Ë∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•Ë°®ÊÉÖÊñá‰ª∂ÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©Ë°®ÊÉÖÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ");
                } else if (type == ACCEPT_REPLY_TYPE_VIDEO) {
                    contentLabel.setText("ËßÜÈ¢ëÊñá‰ª∂Ë∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•ËßÜÈ¢ëÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ");
                } else if (type == ACCEPT_REPLY_TYPE_CARD) { // „Äê‰øÆÊîπ„ÄëÂêçÁâáÊîπ‰∏∫Â§öÈÄâ
                    contentLabel.setText("ÂêçÁâá Wxid ÂàóË°®:");
                    contentEdit.setHint("ËæìÂÖ•Ë¶ÅÂàÜ‰∫´ÁöÑÂêçÁâáÁöÑWxidÔºàÂ§öÈÄâÁî®;;;ÂàÜÈöîÔºâ");
                    selectCardBtn.setText("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèãÔºàÂ§öÈÄâÔºâ");
                } else if (type == ACCEPT_REPLY_TYPE_FILE) {
                    contentLabel.setText("Êñá‰ª∂Ë∑ØÂæÑ:");
                    contentEdit.setHint("ËæìÂÖ•Êñá‰ª∂ÁªùÂØπË∑ØÂæÑ");
                    selectMediaBtn.setText("ÈÄâÊã©Êñá‰ª∂ÔºàÂ§öÈÄâÔºâ");
                }
                // „Äê‰øÆÂ§ç„ÄëÊØèÊ¨°Êõ¥Êñ∞Êó∂ÈáçÊñ∞ËÆæÁΩÆtagÔºåÁ°Æ‰øùÈÄâÊã©ÊåâÈíÆÂèØÁî®
                Object[] tag = getMediaSelectTag(type);
                selectMediaBtn.setTag(tag);
            }
        };
        
        switch (editableItemRef.get().type) {
            case ACCEPT_REPLY_TYPE_IMAGE: replyTypeGroup.check(typeImageRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_VOICE_FIXED: replyTypeGroup.check(typeVoiceFixedRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_VOICE_RANDOM: replyTypeGroup.check(typeVoiceRandomRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_EMOJI: replyTypeGroup.check(typeEmojiRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_VIDEO: replyTypeGroup.check(typeVideoRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_CARD: replyTypeGroup.check(typeCardRadio.getId()); break;
            case ACCEPT_REPLY_TYPE_FILE: replyTypeGroup.check(typeFileRadio.getId()); break; // Êñ∞Â¢û
            default: replyTypeGroup.check(typeTextRadio.getId());
        }
        updateInputs.run();
        
        replyTypeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (checkedId == typeTextRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_TEXT;
                else if (checkedId == typeImageRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_IMAGE;
                else if (checkedId == typeVoiceFixedRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_VOICE_FIXED;
                else if (checkedId == typeVoiceRandomRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_VOICE_RANDOM;
                else if (checkedId == typeEmojiRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_EMOJI;
                else if (checkedId == typeVideoRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_VIDEO;
                else if (checkedId == typeCardRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_CARD;
                else if (checkedId == typeFileRadio.getId()) editableItemRef.get().type = ACCEPT_REPLY_TYPE_FILE; // Êñ∞Â¢û
                updateInputs.run();
            }
        });
        
        layout.addView(mediaDelayLabel);
        layout.addView(mediaDelayEdit);
        
        // Â™í‰ΩìÈÄâÊã©ÊåâÈíÆÈÄªËæë
        selectMediaBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                int type = editableItemRef.get().type;
                String current = editableItemRef.get().content;
                Object[] tag = (Object[]) selectMediaBtn.getTag();
                String extFilter = (String) tag[0];
                boolean isFolder = (Boolean) tag[1];
                boolean allowFolder = (Boolean) tag[2];
                final boolean isMulti = (Boolean) tag[3];
                File lastFolder = new File(getString(DEFAULT_LAST_FOLDER_SP_AUTO, ROOT_FOLDER));
                if (isFolder) {
                    browseFolderForSelectionAuto(lastFolder, "", current, new MediaSelectionCallback() {
                        public void onSelected(ArrayList<String> selectedFiles) {
                            if (selectedFiles.size() == 1) {
                                String path = selectedFiles.get(0);
                                File f = new File(path);
                                if (f.isDirectory()) {
                                    mediaPaths.clear();
                                    mediaPaths.add(path);
                                    updateMediaList.run();
                                } else {
                                    toast("ËØ∑ÈÄâÊã©Êñá‰ª∂Â§π");
                                }
                            }
                        }
                    }, allowFolder);
                } else {
                    browseFolderForSelectionAuto(lastFolder, extFilter, current, new MediaSelectionCallback() {
                        public void onSelected(ArrayList<String> selectedFiles) {
                            if (isMulti) {
                                mediaPaths.clear();
                                mediaPaths.addAll(selectedFiles);
                            } else {
                                mediaPaths.clear();
                                if (!selectedFiles.isEmpty()) {
                                    mediaPaths.add(selectedFiles.get(0));
                                }
                            }
                            updateMediaList.run();
                        }
                    }, allowFolder);
                }
            }
        });
        
        // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáÈÄâÊã©ÊåâÈíÆÈÄªËæëÔºöÂ§öÈÄâÂ•ΩÂèãWxid
        selectCardBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showLoadingDialog("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèã", "  Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãÂàóË°®...", new Runnable() {
                    public void run() {
                        if (sCachedFriendList == null) sCachedFriendList = getFriendList();
                        new Handler(Looper.getMainLooper()).post(new Runnable() {
                            public void run() {
                                if (sCachedFriendList == null || sCachedFriendList.isEmpty()) {
                                    toast("Êú™Ëé∑ÂèñÂà∞Â•ΩÂèãÂàóË°®");
                                    return;
                                }
                                List names = new ArrayList();
                                List ids = new ArrayList();
                                for (int i = 0; i < sCachedFriendList.size(); i++) {
                                    FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                                    String nickname = TextUtils.isEmpty(friendInfo.getNickname()) ? "Êú™Áü•ÊòµÁß∞" : friendInfo.getNickname();
                                    String remark = friendInfo.getRemark();
                                    String displayName = !TextUtils.isEmpty(remark) ? nickname + " (" + remark + ")" : nickname;
                                    // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                                    names.add("üë§ " + displayName + "\nID: " + friendInfo.getWxid());
                                    ids.add(friendInfo.getWxid());
                                }
                                final Set<String> tempSelectedWxids = new HashSet<String>(cardWxids);
                                showMultiSelectDialog("‚ú® ÈÄâÊã©ÂêçÁâáÂ•ΩÂèã ‚ú®", names, ids, tempSelectedWxids, "üîç ÊêúÁ¥¢Â•ΩÂèã(ÊòµÁß∞/Â§áÊ≥®)...", new Runnable() {
                                    public void run() {
                                        cardWxids.clear();
                                        cardWxids.addAll(tempSelectedWxids);
                                        updateCardList.run();
                                    }
                                }, null);
                            }
                        });
                    }
                });
            }
        });
        
        // „Äê‰øÆÊîπ„ÄëÂ™í‰ΩìÈ°∫Â∫èÁÆ°ÁêÜÈÄªËæëÔºöÊîØÊåÅÂ§öÈÄâÔºåÂä®ÊÄÅÊõ¥Êñ∞ÊåâÈíÆ
        mediaListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String path = mediaPaths.get(position);
                if (mediaListView.isItemChecked(position)) {
                    selectedMediaPaths.add(path);
                } else {
                    selectedMediaPaths.remove(path);
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(mediaListView, orderButtonsLayout, mediaPaths.size(), upButton, downButton, deleteButton);
            }
        });
        upButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedMediaPaths.size() == 1) {
                    String selectedPath = selectedMediaPaths.iterator().next();
                    int pos = mediaPaths.indexOf(selectedPath);
                    if (pos > 0) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(mediaPaths, pos, pos - 1);
                        updateMediaList.run();
                    }
                }
            }
        });
        downButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedMediaPaths.size() == 1) {
                    String selectedPath = selectedMediaPaths.iterator().next();
                    int pos = mediaPaths.indexOf(selectedPath);
                    if (pos < mediaPaths.size() - 1) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(mediaPaths, pos, pos + 1);
                        updateMediaList.run();
                    }
                }
            }
        });
        deleteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedMediaPaths.isEmpty()) {
                    mediaPaths.removeAll(selectedMediaPaths);
                    selectedMediaPaths.clear();
                    updateMediaList.run();
                }
            }
        });
        
        // „Äê‰øÆÊîπ„ÄëÂêçÁâáÈ°∫Â∫èÁÆ°ÁêÜÈÄªËæëÔºöÊîØÊåÅÂ§öÈÄâÔºåÂä®ÊÄÅÊõ¥Êñ∞ÊåâÈíÆ
        cardListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String wxid = cardWxids.get(position);
                if (cardListView.isItemChecked(position)) {
                    selectedCardWxids.add(wxid);
                } else {
                    selectedCardWxids.remove(wxid);
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(cardListView, cardOrderButtonsLayout, cardWxids.size(), cardUpButton, cardDownButton, cardDeleteButton);
            }
        });
        cardUpButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedCardWxids.size() == 1) {
                    String selectedWxid = selectedCardWxids.iterator().next();
                    int pos = cardWxids.indexOf(selectedWxid);
                    if (pos > 0) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(cardWxids, pos, pos - 1);
                        updateCardList.run();
                    }
                }
            }
        });
        cardDownButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedCardWxids.size() == 1) {
                    String selectedWxid = selectedCardWxids.iterator().next();
                    int pos = cardWxids.indexOf(selectedWxid);
                    if (pos < cardWxids.size() - 1) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(cardWxids, pos, pos + 1);
                        updateCardList.run();
                    }
                }
            }
        });
        cardDeleteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedCardWxids.isEmpty()) {
                    cardWxids.removeAll(selectedCardWxids);
                    selectedCardWxids.clear();
                    updateCardList.run();
                }
            }
        });
        
        layout.addView(mediaLayout);
        layout.addView(mediaOrderLayout);
        layout.addView(cardLayout); // „ÄêÊñ∞Â¢û„Äë
        layout.addView(cardOrderLayout); // „ÄêÊñ∞Â¢û„Äë
        
        String dialogTitle = (editPosition >= 0) ? "ÁºñËæëÂõûÂ§çÈ°π (" + featureName + ")" : "Ê∑ªÂä†ÂõûÂ§çÈ°π (" + featureName + ")";
        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), dialogTitle, scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                int type = editableItemRef.get().type;
                long mediaDelay = 1L;
                try {
                    mediaDelay = Long.parseLong(mediaDelayEdit.getText().toString().trim());
                } catch (Exception e) {
                    mediaDelay = 1L; // ÈªòËÆ§ÂÄº
                }
                editableItemRef.get().mediaDelaySeconds = mediaDelay;
                
                if (type == ACCEPT_REPLY_TYPE_TEXT) {
                    editableItemRef.get().content = contentEdit.getText().toString().trim();
                    if (TextUtils.isEmpty(editableItemRef.get().content)) {
                        toast("ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫");
                        return;
                    }
                } else if (type == ACCEPT_REPLY_TYPE_CARD) {
                    editableItemRef.get().content = TextUtils.join(";;;", cardWxids);
                    if (cardWxids.isEmpty()) {
                        toast("ÂêçÁâáWxid‰∏çËÉΩ‰∏∫Á©∫");
                        return;
                    }
                } else {
                    editableItemRef.get().content = TextUtils.join(";;;", mediaPaths);
                    if (mediaPaths.isEmpty()) {
                        toast("Ë∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫");
                        return;
                    }
                    for (String path : mediaPaths) {
                        File file = new File(path);
                        if (type == ACCEPT_REPLY_TYPE_IMAGE || 
                            type == ACCEPT_REPLY_TYPE_VOICE_FIXED ||
                            type == ACCEPT_REPLY_TYPE_EMOJI ||
                            type == ACCEPT_REPLY_TYPE_VIDEO ||
                            type == ACCEPT_REPLY_TYPE_FILE) { // Êñ∞Â¢ûÊñá‰ª∂Ê£ÄÊü•
                            if (!file.exists()) {
                                toast("Êñá‰ª∂‰∏çÂ≠òÂú®: " + path);
                                return;
                            }
                        } else if (type == ACCEPT_REPLY_TYPE_VOICE_RANDOM) {
                            if (!file.exists() || !file.isDirectory()) {
                                toast("Êñá‰ª∂Â§π‰∏çÂ≠òÂú®");
                                return;
                            }
                        }
                    }
                }
                
                // „Äê‰øÆÂ§ç„ÄëÊõ¥Êñ∞list‰∏≠ÁöÑÂØπË±°ÂºïÁî®
                if (editPosition >= 0 && editPosition < itemsList.size()) {
                    itemsList.set(editPosition, editableItemRef.get());
                } else {
                    itemsList.add(editableItemRef.get());
                }
                
                refreshCallback.run();
                toast("Â∑≤‰øùÂ≠ò");
            }
        }, "‚ùå ÂèñÊ∂à", null, null, null);

        dialog.show();
    } catch (Exception e) {
        toast("ÂºπÁ™óÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

// „ÄêÊñ∞Â¢û„ÄëËé∑ÂèñListViewÈÄâ‰∏≠‰ΩçÁΩÆÂàóË°®Ôºà‰ªéÂ§ßÂà∞Â∞èÊéíÂ∫èÔºå‰æø‰∫éÂà†Èô§Ôºâ
private List<Integer> getSelectedPositions(ListView listView) {
    List<Integer> selected = new ArrayList<Integer>();
    for (int i = 0; i < listView.getCount(); i++) {
        if (listView.isItemChecked(i)) {
            selected.add(i);
        }
    }
    // ‰ªéÂ§ßÂà∞Â∞èÊéíÂ∫è
    java.util.Collections.sort(selected, java.util.Collections.reverseOrder());
    return selected;
}

// „ÄêÊñ∞Â¢û„ÄëÊõ¥Êñ∞È°∫Â∫èÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
private void updateOrderButtons(ListView listView, LinearLayout buttonsLayout, int itemCount, Button upButton, Button downButton, Button deleteButton) {
    List<Integer> selectedPositions = getSelectedPositions(listView);
    int selectedCount = selectedPositions.size();
    if (selectedCount == 0) {
        upButton.setVisibility(View.GONE);
        downButton.setVisibility(View.GONE);
        deleteButton.setVisibility(View.GONE);
    } else if (selectedCount == 1) {
        int pos = selectedPositions.get(0);
        upButton.setVisibility(View.VISIBLE);
        upButton.setEnabled(pos > 0);
        downButton.setVisibility(View.VISIBLE);
        downButton.setEnabled(pos < itemCount - 1);
        deleteButton.setVisibility(View.VISIBLE);
        deleteButton.setEnabled(true);
    } else {
        upButton.setVisibility(View.GONE);
        downButton.setVisibility(View.GONE);
        deleteButton.setVisibility(View.VISIBLE);
        deleteButton.setEnabled(true);
    }
}

// „ÄêÊñ∞Â¢û„ÄëÊ†πÊçÆÁ±ªÂûãËé∑ÂèñÂ™í‰ΩìÈÄâÊã©tag
private Object[] getMediaSelectTag(int type) {
    String extFilter = "";
    boolean isFolder = false;
    boolean allowFolder = false;
    boolean isMulti = false;
    switch (type) {
        case ACCEPT_REPLY_TYPE_IMAGE:
            extFilter = "";
            isMulti = true;
            break;
        case ACCEPT_REPLY_TYPE_VOICE_FIXED:
            extFilter = "";
            isMulti = true; // „Äê‰øÆÊîπ„ÄëÊîØÊåÅÂ§öÈÄâ
            break;
        case ACCEPT_REPLY_TYPE_VOICE_RANDOM:
            isFolder = true;
            allowFolder = true;
            isMulti = false;
            break;
        case ACCEPT_REPLY_TYPE_EMOJI:
            extFilter = "";
            isMulti = true;
            break;
        case ACCEPT_REPLY_TYPE_VIDEO:
            extFilter = "";
            isMulti = true;
            break;
        case ACCEPT_REPLY_TYPE_FILE:
            extFilter = ""; // ÊâÄÊúâÊñá‰ª∂Á±ªÂûã
            isMulti = true;
            break;
    }
    return new Object[]{extFilter, isFolder, allowFolder, isMulti};
}

private void showAutoReplyRulesDialog() {
    try {
        final List rules = loadAutoReplyRules();
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout rootLayout = new LinearLayout(getTopActivity());
        rootLayout.setOrientation(LinearLayout.VERTICAL);
        rootLayout.setPadding(24, 24, 24, 24);
        rootLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(rootLayout);

        // --- Âç°Áâá1: ËßÑÂàôÂàóË°® ---
        LinearLayout rulesCard = createCardLayout();
        rulesCard.addView(createSectionTitle("üìù Ëá™Âä®ÂõûÂ§çËßÑÂàôÁÆ°ÁêÜ"));
        final ListView rulesListView = new ListView(getTopActivity());
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(rulesListView);
        rulesListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams rulesListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        rulesListView.setLayoutParams(rulesListParams);
        final ArrayAdapter rulesAdapter = new ArrayAdapter(getTopActivity(), android.R.layout.simple_list_item_multiple_choice);
        rulesListView.setAdapter(rulesAdapter);
        rulesCard.addView(rulesListView);
        TextView rulesPrompt = createPromptText("ÁÇπÂáªÂàóË°®È°πÈÄâÊã©ÔºåÁÑ∂Âêé‰ΩøÁî®‰∏ãÈù¢ÁöÑÊåâÈíÆÊ∑ªÂä†/ÁºñËæë/Âà†Èô§ËßÑÂàô");
        rulesCard.addView(rulesPrompt);

        LinearLayout buttonsLayout = new LinearLayout(getTopActivity());
        buttonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button addButton = new Button(getTopActivity());
        addButton.setText("‚ûï Ê∑ªÂä†");
        styleUtilityButton(addButton);
        Button editButton = new Button(getTopActivity());
        editButton.setText("‚úèÔ∏è ÁºñËæë");
        styleUtilityButton(editButton);
        Button delButton = new Button(getTopActivity());
        delButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(delButton);
        LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        addButton.setLayoutParams(buttonParams);
        editButton.setLayoutParams(buttonParams);
        delButton.setLayoutParams(buttonParams);
        buttonsLayout.addView(addButton);
        buttonsLayout.addView(editButton);
        buttonsLayout.addView(delButton);
        rulesCard.addView(buttonsLayout);
        rootLayout.addView(rulesCard);

        final Set<Map<String, Object>> selectedRules = new HashSet<Map<String, Object>>();
        final Runnable refreshRulesList = new Runnable() {
            public void run() {
                rulesAdapter.clear();
                for (int i = 0; i < rules.size(); i++) {
                    Map<String, Object> rule = (Map<String, Object>) rules.get(i);
                    boolean enabled = (Boolean) rule.get("enabled");
                    String status = enabled ? "‚úÖ" : "‚ùå";
                    int matchType = (Integer) rule.get("matchType");
                    String matchTypeStr = getMatchTypeStr(matchType);
                    int atTriggerType = (Integer) rule.get("atTriggerType");
                    String atTriggerStr = getAtTriggerStr(atTriggerType);
                    int patTriggerType = (Integer) rule.get("patTriggerType");
                    String patTriggerStr = getPatTriggerStr(patTriggerType); // „ÄêÊñ∞Â¢û„ÄëÊãç‰∏ÄÊãçËß¶ÂèëÂ≠óÁ¨¶‰∏≤
                    Set targetWxids = (Set) rule.get("targetWxids");
                    int targetType = (Integer) rule.get("targetType");
                    String targetInfo = getTargetInfo(targetType, targetWxids);
                    int replyType = (Integer) rule.get("replyType");
                    String replyTypeStr = getReplyTypeStrForRule(replyType);
                    String replyContentPreview = getReplyContentPreview(rule);
                    long delaySeconds = (Long) rule.get("delaySeconds");
                    String delayInfo = (delaySeconds > 0) ? " Âª∂Ëøü" + delaySeconds + "Áßí" : "";
                    long mediaDelaySeconds = (Long) rule.get("mediaDelaySeconds");
                    String mediaDelayInfo = (mediaDelaySeconds > 1) ? " Â™í‰ΩìÈó¥Èöî" + mediaDelaySeconds + "Áßí" : ""; // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫Â™í‰ΩìÂª∂Ëøü
                    boolean replyAsQuote = (Boolean) rule.get("replyAsQuote");
                    String quoteInfo = replyAsQuote ? " [ÂºïÁî®]" : "";
                    String startTime = (String) rule.get("startTime");
                    String endTime = (String) rule.get("endTime");
                    String timeInfo = getTimeInfo(startTime, endTime);
                    Set excludedWxids = (Set) rule.get("excludedWxids");
                    String excludeInfo = (excludedWxids != null && !excludedWxids.isEmpty()) ? " (ÊéíÈô§:" + excludedWxids.size() + ")" : "";
                    String keyword = (String) rule.get("keyword");
                    rulesAdapter.add((i + 1) + ". " + status + " [" + matchTypeStr + "] [" + atTriggerStr + "] [" + patTriggerStr + "] " + (matchType == MATCH_TYPE_ANY ? "(‰ªª‰ΩïÊ∂àÊÅØ)" : keyword) + " ‚Üí " + replyTypeStr + replyContentPreview + targetInfo + delayInfo + mediaDelayInfo + quoteInfo + timeInfo + excludeInfo);
                }
                rulesAdapter.notifyDataSetChanged();
                rulesListView.clearChoices();
                for (int i = 0; i < rules.size(); i++) {
                    Map<String, Object> rule = (Map<String, Object>) rules.get(i);
                    if (selectedRules.contains(rule)) {
                        rulesListView.setItemChecked(i, true);
                    }
                }
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(rulesListView, rules.size());
                updateReplyButtonsVisibility(editButton, delButton, selectedRules.size());
            }
        };
        refreshRulesList.run();
        
        rulesListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Map<String, Object> item = (Map<String, Object>) rules.get(position);
                if (rulesListView.isItemChecked(position)) {
                    selectedRules.add(item);
                } else {
                    selectedRules.remove(item);
                }
                updateReplyButtonsVisibility(editButton, delButton, selectedRules.size());
            }
        });
        
        addButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Map<String, Object> newRule = createAutoReplyRuleMap("", "", true, MATCH_TYPE_FUZZY, new HashSet(), TARGET_TYPE_NONE, AT_TRIGGER_NONE, 0, false, REPLY_TYPE_TEXT, new ArrayList());
                showEditRuleDialog(newRule, rules, refreshRulesList);
            }
        });
        
        editButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedRules.size() == 1) {
                    Map<String, Object> editRule = selectedRules.iterator().next();
                    showEditRuleDialog(editRule, rules, refreshRulesList);
                } else {
                    toast("ÁºñËæëÊó∂Âè™ËÉΩÈÄâÊã©‰∏Ä‰∏™ËßÑÂàô");
                }
            }
        });
        
        delButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedRules.isEmpty()) {
                    rules.removeAll(selectedRules);
                    selectedRules.clear();
                    refreshRulesList.run();
                    toast("ÈÄâ‰∏≠ÁöÑËßÑÂàôÂ∑≤Âà†Èô§");
                } else {
                    toast("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑËßÑÂàô");
                }
            }
        });

        // --- ÂØπËØùÊ°ÜÊûÑÂª∫ ---
        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), "‚ú® Ëá™Âä®ÂõûÂ§çËßÑÂàôÁÆ°ÁêÜ ‚ú®", scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                saveAutoReplyRules(rules);
                toast("ËßÑÂàôÂ∑≤‰øùÂ≠ò");
                dialog.dismiss();
            }
        }, "‚ùå ÂÖ≥Èó≠", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                saveAutoReplyRules(rules);
                dialog.dismiss();
            }
        }, null, null);

        dialog.show();
    } catch (Exception e) {
        toast("ÂºπÁ™óÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñÊãç‰∏ÄÊãçËß¶ÂèëÂ≠óÁ¨¶‰∏≤
private String getPatTriggerStr(int patTriggerType) {
    if (patTriggerType == PAT_TRIGGER_ME) return "Ë¢´Êãç‰∏ÄÊãç";
    else return "‰∏çÈôêÊãç‰∏ÄÊãç";
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñÂåπÈÖçÁ±ªÂûãÂ≠óÁ¨¶‰∏≤
private String getMatchTypeStr(int matchType) {
    if (matchType == MATCH_TYPE_EXACT) return "ÂÖ®Â≠ó";
    else if (matchType == MATCH_TYPE_REGEX) return "Ê≠£Âàô";
    else if (matchType == MATCH_TYPE_ANY) return "‰ªª‰ΩïÊ∂àÊÅØ";
    else return "Ê®°Á≥ä";
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑Âèñ@Ëß¶ÂèëÂ≠óÁ¨¶‰∏≤
private String getAtTriggerStr(int atTriggerType) {
    if (atTriggerType == AT_TRIGGER_ME) return "@Êàë";
    else if (atTriggerType == AT_TRIGGER_ALL) return "@ÂÖ®‰Ωì";
    else return "‰∏çÈôê@";
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñÁõÆÊ†á‰ø°ÊÅØ
private String getTargetInfo(int targetType, Set targetWxids) {
    if (targetType == TARGET_TYPE_FRIEND) return " (ÊåáÂÆöÂ•ΩÂèã: " + (targetWxids != null ? targetWxids.size() : 0) + "‰∫∫)";
    else if (targetType == TARGET_TYPE_GROUP) return " (ÊåáÂÆöÁæ§ËÅä: " + (targetWxids != null ? targetWxids.size() : 0) + "‰∏™)";
    else if (targetType == TARGET_TYPE_BOTH) return " (ÊåáÂÆöÂ•ΩÂèã/Áæ§ËÅä: " + (targetWxids != null ? targetWxids.size() : 0) + "‰∏™)";
    return "";
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñËßÑÂàôÂõûÂ§çÁ±ªÂûãÂ≠óÁ¨¶‰∏≤ (Âå∫ÂàÜÂ∞èÊô∫ÂíåÊô∫ËÅäAI)
private String getReplyTypeStrForRule(int replyType) {
    switch (replyType) {
        case REPLY_TYPE_XIAOZHI_AI: return " [Â∞èÊô∫AI]";
        case REPLY_TYPE_ZHILIA_AI: return " [Êô∫ËÅäAI]";
        case REPLY_TYPE_IMAGE: return " [ÂõæÁâá]";
        case REPLY_TYPE_VOICE_FILE_LIST: return " [ËØ≠Èü≥(Êñá‰ª∂ÂàóË°®)]";
        case REPLY_TYPE_VOICE_FOLDER: return " [ËØ≠Èü≥(Êñá‰ª∂Â§πÈöèÊú∫)]";
        case REPLY_TYPE_EMOJI: return " [Ë°®ÊÉÖ]";
        case REPLY_TYPE_VIDEO: return " [ËßÜÈ¢ë]";
        case REPLY_TYPE_FILE: return " [Êñá‰ª∂]";
        case REPLY_TYPE_CARD: return " [ÂêçÁâá]"; // ÊîØÊåÅÂ§öÈÄâ
        default: return " [ÊñáÊú¨]";
    }
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñÂõûÂ§çÂÜÖÂÆπÈ¢ÑËßà
private String getReplyContentPreview(Map<String, Object> rule) {
    int replyType = (Integer) rule.get("replyType");
    switch (replyType) {
        case REPLY_TYPE_XIAOZHI_AI:
        case REPLY_TYPE_ZHILIA_AI:
            return "Êô∫ËÉΩËÅäÂ§©";
        case REPLY_TYPE_IMAGE:
        case REPLY_TYPE_EMOJI:
        case REPLY_TYPE_VIDEO:
        case REPLY_TYPE_FILE:
            List mediaPaths = (List) rule.get("mediaPaths");
            if (mediaPaths != null && !mediaPaths.isEmpty()) {
                String path = (String) mediaPaths.get(0);
                return " (" + mediaPaths.size() + "‰∏™): ..." + path.substring(Math.max(0, path.length() - 20));
            }
            return "Êú™ËÆæÁΩÆË∑ØÂæÑ";
        case REPLY_TYPE_VOICE_FILE_LIST:
            List mediaPaths2 = (List) rule.get("mediaPaths");
            if (mediaPaths2 != null && !mediaPaths2.isEmpty()) {
                String path = (String) mediaPaths2.get(0);
                return " (" + mediaPaths2.size() + "‰∏™ËØ≠Èü≥): ..." + path.substring(Math.max(0, path.length() - 20));
            }
            return "Êú™ËÆæÁΩÆËØ≠Èü≥Êñá‰ª∂Ë∑ØÂæÑ";
        case REPLY_TYPE_VOICE_FOLDER:
            List mediaPaths3 = (List) rule.get("mediaPaths");
            if (mediaPaths3 != null && !mediaPaths3.isEmpty()) {
                String path = (String) mediaPaths3.get(0);
                return "Êñá‰ª∂Â§π: ..." + path.substring(Math.max(0, path.length() - 20));
            }
            return "Êú™ËÆæÁΩÆËØ≠Èü≥Êñá‰ª∂Â§πË∑ØÂæÑ";
        case REPLY_TYPE_CARD:
            String reply = (String) rule.get("reply");
            if (!TextUtils.isEmpty(reply)) {
                String[] wxids = reply.split(";;;");
                return " (" + wxids.length + "‰∏™): " + (reply.length() > 30 ? reply.substring(0, 30) + "..." : reply);
            }
            return "Êú™ËÆæÁΩÆWxid";
        default: // REPLY_TYPE_TEXT
            String textReply = (String) rule.get("reply");
            return textReply.length() > 20 ? textReply.substring(0, 20) + "..." : textReply;
    }
}

// „ÄêÊñ∞Â¢û„ÄëËæÖÂä©ÊñπÊ≥ïÔºöËé∑ÂèñÊó∂Èó¥‰ø°ÊÅØ
private String getTimeInfo(String startTime, String endTime) {
    String timeInfo = "";
    if (!TextUtils.isEmpty(startTime)) {
        timeInfo += " üïíÂºÄÂßã" + startTime;
    }
    if (!TextUtils.isEmpty(endTime)) {
        timeInfo += (timeInfo.isEmpty() ? " üïíÁªìÊùü" + endTime : " - " + endTime);
    }
    if (!timeInfo.isEmpty()) {
        timeInfo += " ";
    }
    return timeInfo;
}

private void showEditRuleDialog(final Map<String, Object> rule, final List rules, final Runnable refreshCallback) {
    try {
        ScrollView scrollView = new ScrollView(getTopActivity());
        LinearLayout layout = new LinearLayout(getTopActivity());
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.setPadding(24, 24, 24, 24);
        layout.setBackgroundColor(Color.parseColor("#FAFBF9"));
        scrollView.addView(layout);
        
        // --- Âç°Áâá1: ÂÖ≥ÈîÆËØçËÆæÁΩÆ ---
        LinearLayout keywordCard = createCardLayout();
        keywordCard.addView(createSectionTitle("ÂÖ≥ÈîÆËØç"));
        final EditText keywordEdit = createStyledEditText("ËæìÂÖ•Ëß¶ÂèëÂÖ≥ÈîÆËØç...", (String) rule.get("keyword"));
        keywordCard.addView(keywordEdit);
        layout.addView(keywordCard);
        
        // --- Âç°Áâá2: ÂõûÂ§çÁ±ªÂûã ---
        LinearLayout typeCard = createCardLayout();
        typeCard.addView(createSectionTitle("ÂõûÂ§çÁ±ªÂûã"));
        final RadioGroup replyTypeGroup = createRadioGroup(getTopActivity(), LinearLayout.VERTICAL);
        final RadioButton replyTypeXiaozhiAIRadio = createRadioButton(getTopActivity(), "ü§ñ Â∞èÊô∫AI ÂõûÂ§ç(ÂõûÂ§çÂø´,ËÉΩËÅîÁΩë)");
        final RadioButton replyTypeZhiliaAIRadio = createRadioButton(getTopActivity(), "üß† Êô∫ËÅäAI ÂõûÂ§ç(ÂõûÂ§çÊÖ¢,‰∏çËÉΩËÅîÁΩë,ÂèØ‰ª•Áî®deepseekÂÆòÊñπkeyÂÆòÊñπÈÖçÁΩÆÂç≥ÂèØËÅîÁΩë)"); // Êñ∞Â¢ûÊô∫ËÅäAIÈÄâÈ°π
        final RadioButton replyTypeTextRadio = createRadioButton(getTopActivity(), "üìÑÊñáÊú¨");
        final RadioButton replyTypeImageRadio = createRadioButton(getTopActivity(), "üñºÔ∏èÂõæÁâá");
        final RadioButton replyTypeEmojiRadio = createRadioButton(getTopActivity(), "üòäË°®ÊÉÖ");
        final RadioButton replyTypeVideoRadio = createRadioButton(getTopActivity(), "üé¨ËßÜÈ¢ë");
        final RadioButton replyTypeCardRadio = createRadioButton(getTopActivity(), "üìáÂêçÁâá"); // ÊîØÊåÅÂ§öÈÄâ
        final RadioButton replyTypeVoiceFileListRadio = createRadioButton(getTopActivity(), "üé§ËØ≠Èü≥(Êñá‰ª∂ÂàóË°®)");
        final RadioButton replyTypeVoiceFolderRadio = createRadioButton(getTopActivity(), "üîÄüé§ËØ≠Èü≥(Êñá‰ª∂Â§πÈöèÊú∫)");
        final RadioButton replyTypeFileRadio = createRadioButton(getTopActivity(), "üìÅÊñá‰ª∂"); // Êñ∞Â¢ûÊñá‰ª∂ÈÄâÈ°π
        replyTypeGroup.addView(replyTypeXiaozhiAIRadio);
        replyTypeGroup.addView(replyTypeZhiliaAIRadio); // Êñ∞Â¢û
        replyTypeGroup.addView(replyTypeTextRadio);
        replyTypeGroup.addView(replyTypeImageRadio);
        replyTypeGroup.addView(replyTypeEmojiRadio);
        replyTypeGroup.addView(replyTypeVideoRadio);
        replyTypeGroup.addView(replyTypeCardRadio);
        replyTypeGroup.addView(replyTypeVoiceFileListRadio);
        replyTypeGroup.addView(replyTypeVoiceFolderRadio);
        replyTypeGroup.addView(replyTypeFileRadio); // Êñ∞Â¢û
        typeCard.addView(replyTypeGroup);
        layout.addView(typeCard);
        
        final TextView replyContentLabel = new TextView(getTopActivity());
        replyContentLabel.setText("ÂõûÂ§çÂÜÖÂÆπ:");
        replyContentLabel.setTextSize(14);
        replyContentLabel.setTextColor(Color.parseColor("#333333"));
        replyContentLabel.setPadding(0, 0, 0, 16);
        final EditText replyEdit = createStyledEditText("ËæìÂÖ•Ëá™Âä®ÂõûÂ§çÂÜÖÂÆπ...", (String) rule.get("reply"));
        replyEdit.setMinLines(3);
        replyEdit.setGravity(Gravity.TOP);
        
        // „ÄêÊñ∞Â¢û„ÄëÂ™í‰ΩìÂèëÈÄÅÂª∂ËøüËÆæÁΩÆ
        final TextView mediaDelayLabel = new TextView(getTopActivity());
        mediaDelayLabel.setText("Â™í‰ΩìÂèëÈÄÅÈó¥Èöî (Áßí):");
        mediaDelayLabel.setTextSize(14);
        mediaDelayLabel.setTextColor(Color.parseColor("#333333"));
        mediaDelayLabel.setPadding(0, 0, 0, 16);
        final EditText mediaDelayEdit = createStyledEditText("ÈªòËÆ§‰∏∫1Áßí", String.valueOf(rule.get("mediaDelaySeconds")));
        mediaDelayEdit.setInputType(InputType.TYPE_CLASS_NUMBER);
        
        // Â™í‰ΩìÈÄâÊã©Â∏ÉÂ±Ä
        final LinearLayout mediaLayout = new LinearLayout(getTopActivity());
        mediaLayout.setOrientation(LinearLayout.VERTICAL);
        mediaLayout.setPadding(0, 0, 0, 16);
        final TextView currentMediaTv = new TextView(getTopActivity());
        // „Äê‰øÆÂ§ç„ÄëÂàùÂßãÊòæÁ§∫ÂÖ∑‰ΩìË∑ØÂæÑÂàóË°®Ôºà\nÂàÜÈöîÔºâÔºåËÄåÈùûmediaPathsÁöÑ;;;Ê†ºÂºè + nullÊ£ÄÊü•
        StringBuilder initialMediaDisplay = new StringBuilder();
        Object mediaObj = rule.get("mediaPaths");
        List mediaPathsInit = (mediaObj instanceof List) ? (List) mediaObj : null;
        if (mediaPathsInit != null && !mediaPathsInit.isEmpty()) {
            for (int i = 0; i < mediaPathsInit.size(); i++) {
                Object pObj = mediaPathsInit.get(i);
                if (pObj instanceof String) {
                    String p = (String) pObj;
                    if (!TextUtils.isEmpty(p)) {
                        initialMediaDisplay.append(new File(p).getName()).append("\n"); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                    }
                }
            }
        }
        currentMediaTv.setText(initialMediaDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©Â™í‰Ωì" : initialMediaDisplay.toString().trim());
        currentMediaTv.setTextSize(14);
        currentMediaTv.setTextColor(Color.parseColor("#666666"));
        currentMediaTv.setPadding(0, 8, 0, 0);
        final Button selectMediaBtn = new Button(getTopActivity());
        selectMediaBtn.setText("ÈÄâÊã©Â™í‰ΩìÊñá‰ª∂/Êñá‰ª∂Â§π");
        styleMediaSelectionButton(selectMediaBtn);
        mediaLayout.addView(currentMediaTv);
        mediaLayout.addView(selectMediaBtn);
        
        // „Äê‰øÆÊîπ„ÄëÂ™í‰ΩìÂàóË°®‰∏éÈ°∫Â∫èÁÆ°ÁêÜÔºö‰ΩøÁî®simple_list_item_multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°ÜÔºåÊîØÊåÅÂ§öÈÄâ
        final LinearLayout mediaOrderLayout = new LinearLayout(getTopActivity());
        mediaOrderLayout.setOrientation(LinearLayout.VERTICAL);
        mediaOrderLayout.setPadding(0, 0, 0, 16);
        final ListView mediaListView = new ListView(getTopActivity());
        // „Äê‰øÆÊîπ„Äë‰ΩøÁî®multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°Ü
        final ArrayList<String> displayMediaList = new ArrayList<String>();
        mediaListView.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, displayMediaList));
        mediaListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(mediaListView);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams mediaListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        mediaListView.setLayoutParams(mediaListParams);
        mediaOrderLayout.addView(mediaListView);
        TextView orderPrompt = createPromptText("ÈÄâ‰∏≠Â™í‰ΩìÂêéÔºå‰ΩøÁî®‰∏ãÊñπÊåâÈíÆË∞ÉÊï¥ÂèëÈÄÅÈ°∫Â∫èÔºàÈ°∫Â∫èÂèëÈÄÅÔºåÈó¥ÈöîËá™ÂÆö‰πâÁßíÔºâ");
        mediaOrderLayout.addView(orderPrompt);
        final LinearLayout orderButtonsLayout = new LinearLayout(getTopActivity());
        orderButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button upButton = new Button(getTopActivity());
        upButton.setText("‚¨Ü ‰∏äÁßª");
        styleUtilityButton(upButton);
        upButton.setEnabled(false);
        Button downButton = new Button(getTopActivity());
        downButton.setText("‚¨á ‰∏ãÁßª");
        styleUtilityButton(downButton);
        downButton.setEnabled(false);
        Button deleteButton = new Button(getTopActivity());
        deleteButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(deleteButton);
        deleteButton.setEnabled(false);
        LinearLayout.LayoutParams orderBtnParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        upButton.setLayoutParams(orderBtnParams);
        downButton.setLayoutParams(orderBtnParams);
        deleteButton.setLayoutParams(orderBtnParams);
        orderButtonsLayout.addView(upButton);
        orderButtonsLayout.addView(downButton);
        orderButtonsLayout.addView(deleteButton);
        mediaOrderLayout.addView(orderButtonsLayout);
        
        // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáÈÄâÊã©Â∏ÉÂ±ÄÔºàÁ±ª‰ººÂ™í‰ΩìÔºå‰ΩÜÈÄâÊã©Â•ΩÂèãWxidÔºâ
        final LinearLayout cardLayout = new LinearLayout(getTopActivity());
        cardLayout.setOrientation(LinearLayout.VERTICAL);
        cardLayout.setPadding(0, 0, 0, 16);
        final TextView currentCardTv = new TextView(getTopActivity());
        // „ÄêÊñ∞Â¢û„ÄëÂàùÂßãÊòæÁ§∫ÈÄâ‰∏≠ÁöÑWxidÂàóË°®Ôºà\nÂàÜÈöîÔºâ
        StringBuilder initialCardDisplay = new StringBuilder();
        String replyStr = (String) rule.get("reply");
        if (!TextUtils.isEmpty(replyStr)) {
            String[] wxidParts = replyStr.split(";;;");
            for (int k = 0; k < wxidParts.length; k++) {
                if (!TextUtils.isEmpty(wxidParts[k].trim())) {
                    initialCardDisplay.append(wxidParts[k].trim()).append("\n");
                }
            }
        }
        currentCardTv.setText(initialCardDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©ÂêçÁâá" : initialCardDisplay.toString().trim());
        currentCardTv.setTextSize(14);
        currentCardTv.setTextColor(Color.parseColor("#666666"));
        currentCardTv.setPadding(0, 8, 0, 0);
        final Button selectCardBtn = new Button(getTopActivity());
        selectCardBtn.setText("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèãÔºàÂ§öÈÄâÔºâ");
        styleMediaSelectionButton(selectCardBtn);
        cardLayout.addView(currentCardTv);
        cardLayout.addView(selectCardBtn);
        
        // „Äê‰øÆÊîπ„ÄëÂêçÁâáÂàóË°®‰∏éÈ°∫Â∫èÁÆ°ÁêÜÔºö‰ΩøÁî®simple_list_item_multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°ÜÔºåÊîØÊåÅÂ§öÈÄâ
        final LinearLayout cardOrderLayout = new LinearLayout(getTopActivity());
        cardOrderLayout.setOrientation(LinearLayout.VERTICAL);
        cardOrderLayout.setPadding(0, 0, 0, 16);
        final ListView cardListView = new ListView(getTopActivity());
        // „Äê‰øÆÊîπ„Äë‰ΩøÁî®multiple_choiceÂ∏ÉÂ±ÄÊòæÁ§∫Â§çÈÄâÊ°Ü
        final ArrayList<String> displayCardList = new ArrayList<String>();
        cardListView.setAdapter(new ArrayAdapter<String>(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, displayCardList));
        cardListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        // „Äê‰ºòÂåñ„ÄëËÆæÁΩÆËß¶Êë∏‰∫ã‰ª∂ÔºåÁ°Æ‰øùÁõ¥Êé•ÊªöÂä®
        setupListViewTouchForScroll(cardListView);
        // „ÄêV11„ÄëÂàùÂßãÈ´òÂ∫¶ËÆæ‰∏∫ÊúÄÂ∞èÔºåÈÅøÂÖçÁ©∫Êó∑ÔºåÂêéÁª≠Âä®ÊÄÅË∞ÉÊï¥
        LinearLayout.LayoutParams cardListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
        cardListView.setLayoutParams(cardListParams);
        cardOrderLayout.addView(cardListView);
        TextView cardOrderPrompt = createPromptText("ÈÄâ‰∏≠ÂêçÁâáÂêéÔºå‰ΩøÁî®‰∏ãÊñπÊåâÈíÆË∞ÉÊï¥ÂèëÈÄÅÈ°∫Â∫èÔºàÈ°∫Â∫èÂèëÈÄÅÔºåÈó¥ÈöîËá™ÂÆö‰πâÁßíÔºâ");
        cardOrderLayout.addView(cardOrderPrompt);
        final LinearLayout cardOrderButtonsLayout = new LinearLayout(getTopActivity());
        cardOrderButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
        Button cardUpButton = new Button(getTopActivity());
        cardUpButton.setText("‚¨Ü ‰∏äÁßª");
        styleUtilityButton(cardUpButton);
        cardUpButton.setEnabled(false);
        Button cardDownButton = new Button(getTopActivity());
        cardDownButton.setText("‚¨á ‰∏ãÁßª");
        styleUtilityButton(cardDownButton);
        cardDownButton.setEnabled(false);
        Button cardDeleteButton = new Button(getTopActivity());
        cardDeleteButton.setText("üóëÔ∏è Âà†Èô§");
        styleUtilityButton(cardDeleteButton);
        cardDeleteButton.setEnabled(false);
        LinearLayout.LayoutParams cardOrderBtnParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        cardUpButton.setLayoutParams(cardOrderBtnParams);
        cardDownButton.setLayoutParams(cardOrderBtnParams);
        cardDeleteButton.setLayoutParams(cardOrderBtnParams);
        cardOrderButtonsLayout.addView(cardUpButton);
        cardOrderButtonsLayout.addView(cardDownButton);
        cardOrderButtonsLayout.addView(cardDeleteButton);
        cardOrderLayout.addView(cardOrderButtonsLayout);
        
        // „Äê‰øÆÂ§ç„ÄënullÊ£ÄÊü• + Âº∫Âà∂Á©∫ÂàóË°®
        Object mediaPathsObj = rule.get("mediaPaths");
        final List<String> mediaPaths = (mediaPathsObj instanceof List) ? new ArrayList<String>((List<String>) mediaPathsObj) : new ArrayList<String>();
        // „ÄêÊñ∞Â¢û„ÄëÂü∫‰∫éÂÜÖÂÆπÁöÑÈÄâ‰∏≠ÈõÜ
        final Set<String> selectedMediaPaths = new HashSet<String>();
        final Runnable updateMediaList = new Runnable() {
            public void run() {
                displayMediaList.clear();
                for (int k = 0; k < mediaPaths.size(); k++) {
                    String path = mediaPaths.get(k);
                    String fileName = new File(path).getName(); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                    String display = (k + 1) + ". " + (fileName.length() > 30 ? fileName.substring(0, 30) + "..." : fileName);
                    displayMediaList.add(display);
                }
                ((ArrayAdapter<String>) mediaListView.getAdapter()).notifyDataSetChanged();
                mediaListView.clearChoices();
                mediaListView.requestLayout(); // „ÄêÊñ∞Â¢û„ÄëÂº∫Âà∂ÈáçÁªòÔºåÁ°Æ‰øùcheckedÁä∂ÊÄÅÊõ¥Êñ∞
                // „ÄêV9„ÄëÊõ¥Êñ∞currentMediaTv‰∏∫Êñá‰ª∂ÂêçÂàóË°®ÊòæÁ§∫ÔºåËÄåÈùûÂÆåÊï¥Ë∑ØÂæÑ
                StringBuilder mediaDisplay = new StringBuilder();
                for (String path : mediaPaths) {
                    mediaDisplay.append(new File(path).getName()).append("\n");
                }
                currentMediaTv.setText(mediaDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©Â™í‰Ωì" : mediaDisplay.toString().trim());
                rule.put("mediaPaths", new ArrayList<String>(mediaPaths)); // Êõ¥Êñ∞ËßÑÂàôÁöÑmediaPaths
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(mediaListView, mediaPaths.size());
                // ÈáçÊñ∞ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅ
                for (int k = 0; k < mediaPaths.size(); k++) {
                    if (selectedMediaPaths.contains(mediaPaths.get(k))) {
                        mediaListView.setItemChecked(k, true);
                    }
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(mediaListView, orderButtonsLayout, mediaPaths.size(), upButton, downButton, deleteButton);
            }
        };
        final List<String> cardWxids = new ArrayList<String>(); // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáWxidÂàóË°®
        String replyStrForCard = (String) rule.get("reply");
        if (!TextUtils.isEmpty(replyStrForCard)) {
            String[] wxidParts = replyStrForCard.split(";;;");
            for (int k = 0; k < wxidParts.length; k++) {
                String wxid = wxidParts[k].trim();
                if (!TextUtils.isEmpty(wxid)) cardWxids.add(wxid);
            }
        }
        // „ÄêÊñ∞Â¢û„ÄëÂü∫‰∫éÂÜÖÂÆπÁöÑÈÄâ‰∏≠ÈõÜ for card
        final Set<String> selectedCardWxids = new HashSet<String>();
        final Runnable updateCardList = new Runnable() { // „ÄêÊñ∞Â¢û„ÄëÊõ¥Êñ∞ÂêçÁâáÂàóË°®
            public void run() {
                displayCardList.clear();
                for (int k = 0; k < cardWxids.size(); k++) {
                    String wxid = cardWxids.get(k);
                    String display = (k + 1) + ". " + (wxid.length() > 30 ? wxid.substring(0, 30) + "..." : wxid);
                    displayCardList.add(display);
                }
                ((ArrayAdapter<String>) cardListView.getAdapter()).notifyDataSetChanged();
                cardListView.clearChoices();
                cardListView.requestLayout(); // „ÄêÊñ∞Â¢û„ÄëÂº∫Âà∂ÈáçÁªòÔºåÁ°Æ‰øùcheckedÁä∂ÊÄÅÊõ¥Êñ∞
                // Êõ¥Êñ∞currentCardTv‰∏∫WxidÂàóË°®ÊòæÁ§∫
                StringBuilder cardDisplay = new StringBuilder();
                for (String wxid : cardWxids) {
                    cardDisplay.append(wxid).append("\n");
                }
                currentCardTv.setText(cardDisplay.toString().trim().isEmpty() ? "Êú™ÈÄâÊã©ÂêçÁâá" : cardDisplay.toString().trim());
                rule.put("reply", TextUtils.join(";;;", cardWxids)); // „Äê‰øÆÂ§ç„ÄëÊõ¥Êñ∞ËßÑÂàôÁöÑreply‰∏∫WxidÂàóË°®
                // „ÄêV11„ÄëÂä®ÊÄÅË∞ÉÊï¥È´òÂ∫¶
                adjustListViewHeight(cardListView, cardWxids.size());
                // ÈáçÊñ∞ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅ
                for (int k = 0; k < cardWxids.size(); k++) {
                    if (selectedCardWxids.contains(cardWxids.get(k))) {
                        cardListView.setItemChecked(k, true);
                    }
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(cardListView, cardOrderButtonsLayout, cardWxids.size(), cardUpButton, cardDownButton, cardDeleteButton);
            }
        };
        updateMediaList.run();
        updateCardList.run(); // „ÄêÊñ∞Â¢û„Äë
        
        // „Äê‰øÆÂ§ç„ÄëÂàùÂßã tag ËÆæÁΩÆÔºåÁ°Æ‰øùÂ™í‰ΩìÁ±ªÂûãÂä†ËΩΩÊó∂ tag Â∑≤Â∞±‰Ωç
        int initialReplyType = (Integer) rule.get("replyType");
        String initialExtFilter = "";
        boolean initialIsFolder = false;
        boolean initialAllowFolder = false;
        boolean initialIsMulti = false;
        switch (initialReplyType) {
            case REPLY_TYPE_IMAGE:
            case REPLY_TYPE_EMOJI:
            case REPLY_TYPE_VIDEO:
            case REPLY_TYPE_FILE:
                initialIsMulti = true;
                break;
            case REPLY_TYPE_VOICE_FILE_LIST:
                initialIsMulti = true;
                break;
            case REPLY_TYPE_VOICE_FOLDER:
                initialIsFolder = true;
                initialAllowFolder = true;
                initialIsMulti = false;
                break;
        }
        Object[] initialTag = new Object[]{initialExtFilter, initialIsFolder, initialAllowFolder, initialIsMulti};
        selectMediaBtn.setTag(initialTag);
        
        final Runnable updateReplyInputVisibility = new Runnable() {
            public void run() {
                int type = (Integer) rule.get("replyType");
                boolean isTextType = (type == REPLY_TYPE_TEXT);
                boolean isMediaType = !isTextType && (type != REPLY_TYPE_XIAOZHI_AI && type != REPLY_TYPE_ZHILIA_AI && type != REPLY_TYPE_CARD);
                boolean isCardType = (type == REPLY_TYPE_CARD);
                
                replyContentLabel.setVisibility(isTextType ? View.VISIBLE : View.GONE);
                replyEdit.setVisibility(isTextType ? View.VISIBLE : View.GONE);
                mediaDelayLabel.setVisibility(isMediaType || isCardType ? View.VISIBLE : View.GONE);
                mediaDelayEdit.setVisibility(isMediaType || isCardType ? View.VISIBLE : View.GONE);
                mediaLayout.setVisibility(isMediaType ? View.VISIBLE : View.GONE);
                mediaOrderLayout.setVisibility(isMediaType ? View.VISIBLE : View.GONE);
                cardLayout.setVisibility(isCardType ? View.VISIBLE : View.GONE); // „ÄêÊñ∞Â¢û„ÄëÊéßÂà∂ÂêçÁâáÂ∏ÉÂ±ÄÂèØËßÅÊÄß
                cardOrderLayout.setVisibility(isCardType ? View.VISIBLE : View.GONE); // „ÄêÊñ∞Â¢û„ÄëÊéßÂà∂ÂêçÁâáÈ°∫Â∫èÂ∏ÉÂ±ÄÂèØËßÅÊÄß
                
                final LinearLayout replyAsQuoteSwitchRow = (LinearLayout) layout.findViewWithTag("replyAsQuoteSwitchRow");
                if (replyAsQuoteSwitchRow != null) {
                    replyAsQuoteSwitchRow.setVisibility(type == REPLY_TYPE_TEXT ? View.VISIBLE : View.GONE);
                }
                final TextView quotePrompt = (TextView) layout.findViewWithTag("quotePrompt");
                if (quotePrompt != null) {
                    quotePrompt.setVisibility(type == REPLY_TYPE_TEXT ? View.VISIBLE : View.GONE);
                }
                
                if (type == REPLY_TYPE_CARD) { // „Äê‰øÆÊîπ„ÄëÂêçÁâáÊîπ‰∏∫Â§öÈÄâ
                    replyContentLabel.setText("ÂêçÁâá Wxid ÂàóË°®:");
                    replyEdit.setHint("ËæìÂÖ•Ë¶ÅÂàÜ‰∫´ÁöÑÂêçÁâáÁöÑWxidÔºàÂ§öÈÄâÁî®;;;ÂàÜÈöîÔºâ");
                    selectCardBtn.setText("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèãÔºàÂ§öÈÄâÔºâ");
                } else if (type == REPLY_TYPE_XIAOZHI_AI || type == REPLY_TYPE_ZHILIA_AI) { // AIÁ±ªÂûã‰∏çÊòæÁ§∫ËæìÂÖ•
                    replyContentLabel.setVisibility(View.GONE);
                    replyEdit.setVisibility(View.GONE);
                    mediaLayout.setVisibility(View.GONE);
                    mediaOrderLayout.setVisibility(View.GONE);
                    mediaDelayLabel.setVisibility(View.GONE);
                    mediaDelayEdit.setVisibility(View.GONE);
                    cardLayout.setVisibility(View.GONE); // „ÄêÊñ∞Â¢û„ÄëAIÁ±ªÂûãÈöêËóèÂêçÁâá
                    cardOrderLayout.setVisibility(View.GONE); // „ÄêÊñ∞Â¢û„ÄëAIÁ±ªÂûãÈöêËóèÂêçÁâáÈ°∫Â∫è
                } else { // TEXT
                    replyContentLabel.setText("ÂõûÂ§çÂÜÖÂÆπ:");
                    replyEdit.setHint("ËæìÂÖ•Ëá™Âä®ÂõûÂ§çÂÜÖÂÆπ...");
                }
                
                String btnText = "ÈÄâÊã©Â™í‰ΩìÊñá‰ª∂/Êñá‰ª∂Â§π";
                String extFilter = "";
                boolean isFolder = false;
                boolean allowFolder = false;
                final boolean isMulti = (type == REPLY_TYPE_IMAGE || type == REPLY_TYPE_EMOJI || type == REPLY_TYPE_VIDEO || type == REPLY_TYPE_FILE || type == REPLY_TYPE_VOICE_FILE_LIST);
                switch (type) {
                    case REPLY_TYPE_IMAGE:
                        extFilter = "";
                        btnText = "ÈÄâÊã©ÂõæÁâáÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ";
                        break;
                    case REPLY_TYPE_EMOJI:
                        extFilter = "";
                        btnText = "ÈÄâÊã©Ë°®ÊÉÖÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ";
                        break;
                    case REPLY_TYPE_VIDEO:
                        extFilter = "";
                        btnText = "ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂ÔºàÂ§öÈÄâÔºâ";
                        break;
                    case REPLY_TYPE_FILE:
                        extFilter = ""; // ÊâÄÊúâÊñá‰ª∂
                        btnText = "ÈÄâÊã©Êñá‰ª∂ÔºàÂ§öÈÄâÔºâ";
                        break;
                    case REPLY_TYPE_VOICE_FILE_LIST:
                        extFilter = "";
                        btnText = "ÈÄâÊã©ËØ≠Èü≥Êñá‰ª∂ÂàóË°®ÔºàÂ§öÈÄâÔºâ";
                        break;
                    case REPLY_TYPE_VOICE_FOLDER:
                        isFolder = true;
                        allowFolder = true;
                        btnText = "ÈÄâÊã©ËØ≠Èü≥Êñá‰ª∂Â§π";
                        break;
                }
                selectMediaBtn.setText(btnText);
                // „Äê‰øÆÂ§ç„ÄëÊØèÊ¨°Êõ¥Êñ∞Êó∂ÈáçÊñ∞ËÆæÁΩÆtagÔºåÁ°Æ‰øùÈÄâÊã©ÊåâÈíÆÂèØÁî®
                Object[] tag = new Object[]{extFilter, isFolder, allowFolder, isMulti};
                selectMediaBtn.setTag(tag);
                
                // Êõ¥Êñ∞ÊòæÁ§∫
                StringBuilder display = new StringBuilder();
                if (mediaPaths != null) {
                    for (int i = 0; i < mediaPaths.size(); i++) {
                        String p = mediaPaths.get(i);
                        display.append(new File(p).getName()).append("\n");
                    }
                }
                currentMediaTv.setText(display.toString().trim());
            }
        };
        
        int currentReplyType = (Integer) rule.get("replyType");
        switch(currentReplyType) {
            case REPLY_TYPE_XIAOZHI_AI: replyTypeGroup.check(replyTypeXiaozhiAIRadio.getId()); break;
            case REPLY_TYPE_ZHILIA_AI: replyTypeGroup.check(replyTypeZhiliaAIRadio.getId()); break; // Êñ∞Â¢û
            case REPLY_TYPE_IMAGE: replyTypeGroup.check(replyTypeImageRadio.getId()); break;
            case REPLY_TYPE_EMOJI: replyTypeGroup.check(replyTypeEmojiRadio.getId()); break;
            case REPLY_TYPE_VIDEO: replyTypeGroup.check(replyTypeVideoRadio.getId()); break;
            case REPLY_TYPE_CARD: replyTypeGroup.check(replyTypeCardRadio.getId()); break;
            case REPLY_TYPE_VOICE_FILE_LIST: replyTypeGroup.check(replyTypeVoiceFileListRadio.getId()); break;
            case REPLY_TYPE_VOICE_FOLDER: replyTypeGroup.check(replyTypeVoiceFolderRadio.getId()); break;
            case REPLY_TYPE_FILE: replyTypeGroup.check(replyTypeFileRadio.getId()); break; // Êñ∞Â¢û
            default: replyTypeGroup.check(replyTypeTextRadio.getId());
        }
        updateReplyInputVisibility.run();
        
        layout.addView(replyContentLabel);
        layout.addView(replyEdit);
        layout.addView(mediaDelayLabel);
        layout.addView(mediaDelayEdit);
        layout.addView(mediaLayout);
        layout.addView(mediaOrderLayout);
        layout.addView(cardLayout); // „ÄêÊñ∞Â¢û„Äë
        layout.addView(cardOrderLayout); // „ÄêÊñ∞Â¢û„Äë
        
        replyTypeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (checkedId == replyTypeXiaozhiAIRadio.getId()) rule.put("replyType", REPLY_TYPE_XIAOZHI_AI);
                else if (checkedId == replyTypeZhiliaAIRadio.getId()) rule.put("replyType", REPLY_TYPE_ZHILIA_AI); // Êñ∞Â¢û
                else if (checkedId == replyTypeTextRadio.getId()) rule.put("replyType", REPLY_TYPE_TEXT);
                else if (checkedId == replyTypeImageRadio.getId()) rule.put("replyType", REPLY_TYPE_IMAGE);
                else if (checkedId == replyTypeEmojiRadio.getId()) rule.put("replyType", REPLY_TYPE_EMOJI);
                else if (checkedId == replyTypeVideoRadio.getId()) rule.put("replyType", REPLY_TYPE_VIDEO);
                else if (checkedId == replyTypeCardRadio.getId()) rule.put("replyType", REPLY_TYPE_CARD);
                else if (checkedId == replyTypeVoiceFileListRadio.getId()) rule.put("replyType", REPLY_TYPE_VOICE_FILE_LIST);
                else if (checkedId == replyTypeVoiceFolderRadio.getId()) rule.put("replyType", REPLY_TYPE_VOICE_FOLDER);
                else if (checkedId == replyTypeFileRadio.getId()) rule.put("replyType", REPLY_TYPE_FILE); // Êñ∞Â¢û
                
                final LinearLayout replyAsQuoteSwitchRow = (LinearLayout) layout.findViewWithTag("replyAsQuoteSwitchRow");
                if (replyAsQuoteSwitchRow != null) {
                    replyAsQuoteSwitchRow.setVisibility((Integer) rule.get("replyType") == REPLY_TYPE_TEXT ? View.VISIBLE : View.GONE);
                }
                final TextView quotePrompt = (TextView) layout.findViewWithTag("quotePrompt");
                if (quotePrompt != null) {
                    quotePrompt.setVisibility((Integer) rule.get("replyType") == REPLY_TYPE_TEXT ? View.VISIBLE : View.GONE);
                }
                if ((Integer) rule.get("replyType") != REPLY_TYPE_TEXT) {
                    final CheckBox quoteCheckBox = (CheckBox) ((replyAsQuoteSwitchRow != null) ? replyAsQuoteSwitchRow.getChildAt(1) : null);
                    if (quoteCheckBox != null) {
                        quoteCheckBox.setChecked(false);
                    }
                }
                updateReplyInputVisibility.run();
            }
        });
        
        // Â™í‰ΩìÈÄâÊã©ÊåâÈíÆÈÄªËæë
        selectMediaBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Object[] tag = (Object[]) selectMediaBtn.getTag();
                String extFilter = (String) tag[0];
                boolean isFolder = (Boolean) tag[1];
                boolean allowFolder = (Boolean) tag[2];
                boolean isMulti = (Boolean) tag[3];
                String current = "";
                List mediaPathsCurrent = (List) rule.get("mediaPaths");
                if (mediaPathsCurrent != null && !mediaPathsCurrent.isEmpty()) {
                    current = TextUtils.join(";;;", mediaPathsCurrent);
                }
                File lastFolder = new File(getString(DEFAULT_LAST_FOLDER_SP_AUTO, ROOT_FOLDER));
                if (isFolder) {
                    browseFolderForSelectionAuto(lastFolder, "", current, new MediaSelectionCallback() {
                        public void onSelected(ArrayList<String> selectedFiles) {
                            if (selectedFiles.size() == 1) {
                                String path = selectedFiles.get(0);
                                File f = new File(path);
                                if (f.isDirectory()) {
                                    mediaPaths.clear();
                                    mediaPaths.add(path);
                                    StringBuilder display = new StringBuilder();
                                    display.append(new File(path).getName()); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                                    currentMediaTv.setText(display.toString());
                                    updateMediaList.run();
                                } else {
                                    toast("ËØ∑ÈÄâÊã©Êñá‰ª∂Â§π");
                                }
                            }
                        }
                    }, allowFolder);
                } else {
                    browseFolderForSelectionAuto(lastFolder, extFilter, current, new MediaSelectionCallback() {
                        public void onSelected(ArrayList<String> selectedFiles) {
                            if (selectedFiles.isEmpty()) {
                                toast("Êú™ÈÄâÊã©‰ªª‰ΩïÊñá‰ª∂");
                                return;
                            }
                            mediaPaths.clear();
                            if (isMulti) {
                                mediaPaths.addAll(selectedFiles);
                                StringBuilder display = new StringBuilder();
                                for (int i = 0; i < selectedFiles.size(); i++) {
                                    String p = selectedFiles.get(i);
                                    display.append(new File(p).getName()).append("\n"); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                                }
                                currentMediaTv.setText(display.toString().trim());
                            } else {
                                if (!selectedFiles.isEmpty()) {
                                    mediaPaths.add(selectedFiles.get(0));
                                    currentMediaTv.setText(new File(selectedFiles.get(0)).getName()); // „ÄêV9„ÄëÂè™ÊòæÁ§∫Êñá‰ª∂Âêç
                                }
                            }
                            updateMediaList.run();
                        }
                    }, allowFolder);
                }
            }
        });
        
        // „ÄêÊñ∞Â¢û„ÄëÂêçÁâáÈÄâÊã©ÊåâÈíÆÈÄªËæëÔºöÂ§öÈÄâÂ•ΩÂèãWxid
        selectCardBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showLoadingDialog("ÈÄâÊã©ÂêçÁâáÂ•ΩÂèã", "  Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãÂàóË°®...", new Runnable() {
                    public void run() {
                        if (sCachedFriendList == null) sCachedFriendList = getFriendList();
                        new Handler(Looper.getMainLooper()).post(new Runnable() {
                            public void run() {
                                if (sCachedFriendList == null || sCachedFriendList.isEmpty()) {
                                    toast("Êú™Ëé∑ÂèñÂà∞Â•ΩÂèãÂàóË°®");
                                    return;
                                }
                                List names = new ArrayList();
                                List ids = new ArrayList();
                                for (int i = 0; i < sCachedFriendList.size(); i++) {
                                    FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                                    String nickname = TextUtils.isEmpty(friendInfo.getNickname()) ? "Êú™Áü•ÊòµÁß∞" : friendInfo.getNickname();
                                    String remark = friendInfo.getRemark();
                                    String displayName = !TextUtils.isEmpty(remark) ? nickname + " (" + remark + ")" : nickname;
                                    // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                                    names.add("üë§ " + displayName + "\nID: " + friendInfo.getWxid());
                                    ids.add(friendInfo.getWxid());
                                }
                                final Set<String> tempSelectedWxids = new HashSet<String>(cardWxids);
                                showMultiSelectDialog("‚ú® ÈÄâÊã©ÂêçÁâáÂ•ΩÂèã ‚ú®", names, ids, tempSelectedWxids, "üîç ÊêúÁ¥¢Â•ΩÂèã(ÊòµÁß∞/Â§áÊ≥®)...", new Runnable() {
                                    public void run() {
                                        cardWxids.clear();
                                        cardWxids.addAll(tempSelectedWxids);
                                        updateCardList.run();
                                    }
                                }, null);
                            }
                        });
                    }
                });
            }
        });
        
        // „Äê‰øÆÊîπ„ÄëÂ™í‰ΩìÈ°∫Â∫èÁÆ°ÁêÜÈÄªËæëÔºöÊîØÊåÅÂ§öÈÄâÔºåÂä®ÊÄÅÊõ¥Êñ∞ÊåâÈíÆ
        mediaListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String path = mediaPaths.get(position);
                if (mediaListView.isItemChecked(position)) {
                    selectedMediaPaths.add(path);
                } else {
                    selectedMediaPaths.remove(path);
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(mediaListView, orderButtonsLayout, mediaPaths.size(), upButton, downButton, deleteButton);
            }
        });
        upButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedMediaPaths.size() == 1) {
                    String selectedPath = selectedMediaPaths.iterator().next();
                    int pos = mediaPaths.indexOf(selectedPath);
                    if (pos > 0) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(mediaPaths, pos, pos - 1);
                        updateMediaList.run();
                    }
                }
            }
        });
        downButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedMediaPaths.size() == 1) {
                    String selectedPath = selectedMediaPaths.iterator().next();
                    int pos = mediaPaths.indexOf(selectedPath);
                    if (pos < mediaPaths.size() - 1) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(mediaPaths, pos, pos + 1);
                        updateMediaList.run();
                    }
                }
            }
        });
        deleteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedMediaPaths.isEmpty()) {
                    mediaPaths.removeAll(selectedMediaPaths);
                    selectedMediaPaths.clear();
                    updateMediaList.run();
                }
            }
        });
        
        // „Äê‰øÆÊîπ„ÄëÂêçÁâáÈ°∫Â∫èÁÆ°ÁêÜÈÄªËæëÔºöÊîØÊåÅÂ§öÈÄâÔºåÂä®ÊÄÅÊõ¥Êñ∞ÊåâÈíÆ
        // „Äê‰øÆÂ§ç„Äë‰øÆÂ§çonItemClickListenerÁ≠æÂêçÂíåÂÜÖÂÆπ
        cardListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String wxid = cardWxids.get(position);
                if (cardListView.isItemChecked(position)) {
                    selectedCardWxids.add(wxid);
                } else {
                    selectedCardWxids.remove(wxid);
                }
                // Êõ¥Êñ∞ÊåâÈíÆÂèØËßÅÊÄßÂíåÂêØÁî®Áä∂ÊÄÅ
                updateOrderButtons(cardListView, cardOrderButtonsLayout, cardWxids.size(), cardUpButton, cardDownButton, cardDeleteButton);
            }
        });
        cardUpButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedCardWxids.size() == 1) {
                    String selectedWxid = selectedCardWxids.iterator().next();
                    int pos = cardWxids.indexOf(selectedWxid);
                    if (pos > 0) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(cardWxids, pos, pos - 1);
                        updateCardList.run();
                    }
                }
            }
        });
        cardDownButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (selectedCardWxids.size() == 1) {
                    String selectedWxid = selectedCardWxids.iterator().next();
                    int pos = cardWxids.indexOf(selectedWxid);
                    if (pos < cardWxids.size() - 1) {
                        // ‰∫§Êç¢‰ΩçÁΩÆ
                        Collections.swap(cardWxids, pos, pos + 1);
                        updateCardList.run();
                    }
                }
            }
        });
        cardDeleteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!selectedCardWxids.isEmpty()) {
                    cardWxids.removeAll(selectedCardWxids);
                    selectedCardWxids.clear();
                    updateCardList.run();
                }
            }
        });
        
        final LinearLayout replyAsQuoteSwitchRow = createSwitchRow(getTopActivity(), "ÂºïÁî®ÂéüÊ∂àÊÅØÂõûÂ§ç", (Boolean) rule.get("replyAsQuote"), new View.OnClickListener() {
            public void onClick(View v) {
                // ToggleÂ∑≤ÂÜÖÂµå
            }
        });
        replyAsQuoteSwitchRow.setTag("replyAsQuoteSwitchRow");
        // „Äê‰øÆÊîπ„Äë‰∏∫ÂºïÁî®ÂºÄÂÖ≥Ê∑ªÂä†ÊèêÁ§∫
        TextView quotePrompt = createPromptText("‚ö†Ô∏è ÂãæÈÄâÂêéÂ∞ÜÂºïÁî®ÂéüÊ∂àÊÅØÂõûÂ§ç");
        quotePrompt.setTag("quotePrompt");
        layout.addView(replyAsQuoteSwitchRow);
        layout.addView(quotePrompt);
        
        // --- Âç°Áâá3: ÂåπÈÖçÊñπÂºè ---
        LinearLayout matchCard = createCardLayout();
        matchCard.addView(createSectionTitle("ÂåπÈÖçÊñπÂºè"));
        final RadioGroup matchTypeGroup = createRadioGroup(getTopActivity(), LinearLayout.HORIZONTAL);
        final RadioButton partialMatchRadio = createRadioButton(getTopActivity(), "Ê®°Á≥ä");
        final RadioButton fullMatchRadio = createRadioButton(getTopActivity(), "ÂÖ®Â≠ó");
        final RadioButton regexMatchRadio = createRadioButton(getTopActivity(), "Ê≠£Âàô");
        final RadioButton anyMatchRadio = createRadioButton(getTopActivity(), "‰ªª‰ΩïÊ∂àÊÅØ");
        matchTypeGroup.addView(partialMatchRadio);
        matchTypeGroup.addView(fullMatchRadio);
        matchTypeGroup.addView(regexMatchRadio);
        matchTypeGroup.addView(anyMatchRadio);
        matchCard.addView(matchTypeGroup);
        layout.addView(matchCard);
        
        matchTypeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (checkedId == anyMatchRadio.getId()) {
                    keywordEdit.setEnabled(false);
                    keywordEdit.setText("");
                    keywordEdit.setHint("Â∑≤Á¶ÅÁî®ÔºàÂåπÈÖç‰ªª‰ΩïÊ∂àÊÅØÔºâ");
                } else {
                    keywordEdit.setEnabled(true);
                    keywordEdit.setHint("ËæìÂÖ•Ëß¶ÂèëÂÖ≥ÈîÆËØç...");
                }
            }
        });
        
        int currentMatchType = (Integer) rule.get("matchType");
        if (currentMatchType == MATCH_TYPE_EXACT) matchTypeGroup.check(fullMatchRadio.getId());
        else if (currentMatchType == MATCH_TYPE_REGEX) matchTypeGroup.check(regexMatchRadio.getId());
        else if (currentMatchType == MATCH_TYPE_ANY) {
            matchTypeGroup.check(anyMatchRadio.getId());
            keywordEdit.setEnabled(false);
            keywordEdit.setText("");
            keywordEdit.setHint("Â∑≤Á¶ÅÁî®ÔºàÂåπÈÖç‰ªª‰ΩïÊ∂àÊÅØÔºâ");
        } else matchTypeGroup.check(partialMatchRadio.getId());
        
        // --- Âç°Áâá4: @Ëß¶Âèë ---
        LinearLayout atCard = createCardLayout();
        atCard.addView(createSectionTitle("@Ëß¶Âèë"));
        final RadioGroup atTriggerGroup = createRadioGroup(getTopActivity(), LinearLayout.HORIZONTAL);
        final RadioButton atTriggerNoneRadio = createRadioButton(getTopActivity(), "‰∏çÈôê");
        final RadioButton atTriggerMeRadio = createRadioButton(getTopActivity(), "@Êàë");
        final RadioButton atTriggerAllRadio = createRadioButton(getTopActivity(), "@ÂÖ®‰Ωì");
        atTriggerGroup.addView(atTriggerNoneRadio);
        atTriggerGroup.addView(atTriggerMeRadio);
        atTriggerGroup.addView(atTriggerAllRadio);
        int currentAtTriggerType = (Integer) rule.get("atTriggerType");
        if (currentAtTriggerType == AT_TRIGGER_ME) atTriggerGroup.check(atTriggerMeRadio.getId());
        else if (currentAtTriggerType == AT_TRIGGER_ALL) atTriggerGroup.check(atTriggerAllRadio.getId());
        else atTriggerGroup.check(atTriggerNoneRadio.getId());
        atCard.addView(atTriggerGroup);
        layout.addView(atCard);

        // „ÄêÊñ∞Â¢û„ÄëÂç°ÁâáÔºöÊãç‰∏ÄÊãçËß¶Âèë
        LinearLayout patCard = createCardLayout();
        patCard.addView(createSectionTitle("Êãç‰∏ÄÊãçËß¶Âèë"));
        final RadioGroup patTriggerGroup = createRadioGroup(getTopActivity(), LinearLayout.HORIZONTAL);
        final RadioButton patTriggerNoneRadio = createRadioButton(getTopActivity(), "‰∏çÈôê");
        final RadioButton patTriggerMeRadio = createRadioButton(getTopActivity(), "Ë¢´Êãç‰∏ÄÊãç");
        patTriggerGroup.addView(patTriggerNoneRadio);
        patTriggerGroup.addView(patTriggerMeRadio);
        int currentPatTriggerType = (Integer) rule.get("patTriggerType");
        if (currentPatTriggerType == PAT_TRIGGER_ME) patTriggerGroup.check(patTriggerMeRadio.getId());
        else patTriggerGroup.check(patTriggerNoneRadio.getId());
        patCard.addView(patTriggerGroup);
        layout.addView(patCard);
        
        // --- Âç°Áâá5: Âª∂ËøüËÆæÁΩÆ ---
        LinearLayout delayCard = createCardLayout();
        delayCard.addView(createSectionTitle("Âª∂ËøüÂõûÂ§ç (Áßí)"));
        final EditText delayEdit = createStyledEditText("ËæìÂÖ•Âª∂ËøüÁßíÊï∞ (0‰∏∫Á´ãÂç≥ÂõûÂ§ç)", String.valueOf(rule.get("delaySeconds")));
        delayEdit.setInputType(InputType.TYPE_CLASS_NUMBER);
        delayCard.addView(delayEdit);
        layout.addView(delayCard);
        
        // --- Âç°Áâá6: Êó∂Èó¥ÊÆµËÆæÁΩÆ ---
        LinearLayout timeCard = createCardLayout();
        timeCard.addView(createSectionTitle("ÁîüÊïàÊó∂Èó¥ÊÆµ (ÁïôÁ©∫Âàô‰∏çÈôêÂà∂)"));
        LinearLayout timeLayout = new LinearLayout(getTopActivity());
        timeLayout.setOrientation(LinearLayout.HORIZONTAL);
        timeLayout.setGravity(Gravity.CENTER_VERTICAL);
        final EditText startTimeEdit = createStyledEditText("ÂºÄÂßã HH:mm", (String) rule.get("startTime"));
        startTimeEdit.setFocusable(false);
        // „Äê‰øÆÂ§ç„ÄëËÆæÁΩÆÊùÉÈáçÂ∏ÉÂ±ÄÔºåÁ°Æ‰øùËµ∑ÂßãÊó∂Èó¥‰∏çÊå§Âç†ÂÖ®ÈÉ®Á©∫Èó¥
        LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        startParams.setMargins(0, 8, 4, 16);  // ËΩªÂæÆÂè≥ËæπË∑ù
        startTimeEdit.setLayoutParams(startParams);
        final EditText endTimeEdit = createStyledEditText("ÁªìÊùü HH:mm", (String) rule.get("endTime"));
        endTimeEdit.setFocusable(false);
        // „Äê‰øÆÂ§ç„ÄëËÆæÁΩÆÊùÉÈáçÂ∏ÉÂ±ÄÔºåÁ°Æ‰øùÁªìÊùüÊó∂Èó¥Á≠âÂÆΩÊòæÁ§∫
        LinearLayout.LayoutParams endParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
        endParams.setMargins(4, 8, 0, 16);  // ËΩªÂæÆÂ∑¶ËæπË∑ù
        endTimeEdit.setLayoutParams(endParams);
        startTimeEdit.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showTimePickerDialog(startTimeEdit); } });
        endTimeEdit.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showTimePickerDialog(endTimeEdit); } });
        timeLayout.addView(startTimeEdit);
        TextView dashText = new TextView(getTopActivity());
        dashText.setText("  -  ");
        dashText.setTextSize(16);
        // „Äê‰ºòÂåñ„Äëdash ÊñáÊú¨‰ΩøÁî® WRAP_CONTENTÔºåÈÅøÂÖçÂΩ±Âìç‰∏§‰æß
        LinearLayout.LayoutParams dashParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        dashText.setLayoutParams(dashParams);
        timeLayout.addView(dashText);
        timeLayout.addView(endTimeEdit);
        timeCard.addView(timeLayout);
        layout.addView(timeCard);
        
        // --- Âç°Áâá7: ÁîüÊïàÁõÆÊ†á ---
        LinearLayout targetCard = createCardLayout();
        targetCard.addView(createSectionTitle("ÁîüÊïàÁõÆÊ†á"));
        final RadioGroup targetTypeGroup = createRadioGroup(getTopActivity(), LinearLayout.HORIZONTAL);
        final RadioButton targetTypeNoneRadio = createRadioButton(getTopActivity(), "‰∏çÊåáÂÆö");
        final RadioButton targetTypeBothRadio = createRadioButton(getTopActivity(), "Â•ΩÂèãÂíåÁæ§ËÅä");
        targetTypeGroup.addView(targetTypeNoneRadio);
        targetTypeGroup.addView(targetTypeBothRadio);
        targetCard.addView(targetTypeGroup);
        layout.addView(targetCard);
        
        final Button selectFriendsButton = new Button(getTopActivity());
        selectFriendsButton.setPadding(0, 20, 0, 0);
        layout.addView(selectFriendsButton);
        final Button selectGroupsButton = new Button(getTopActivity());
        selectGroupsButton.setPadding(0, 20, 0, 0);
        layout.addView(selectGroupsButton);
        
        final Button selectExcludeFriendsButton = new Button(getTopActivity());
        selectExcludeFriendsButton.setPadding(0, 20, 0, 0);
        layout.addView(selectExcludeFriendsButton);
        final Button selectExcludeGroupsButton = new Button(getTopActivity());
        selectExcludeGroupsButton.setPadding(0, 20, 0, 0);
        layout.addView(selectExcludeGroupsButton);

        final Runnable updateSelectTargetsButton = new Runnable() {
            public void run() {
                int targetType = (Integer) rule.get("targetType");
                if (targetType == TARGET_TYPE_BOTH) {
                    Set targetWxids = (Set) rule.get("targetWxids");
                    selectFriendsButton.setText("üë§ ÊåáÂÆöÁîüÊïàÂ•ΩÂèã (" + getFriendCountInTargetWxids(targetWxids) + "‰∫∫)");
                    styleUtilityButton(selectFriendsButton);
                    selectFriendsButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showSelectTargetFriendsDialog(targetWxids, updateSelectTargetsButton); } });
                    selectFriendsButton.setVisibility(View.VISIBLE);
                    selectGroupsButton.setText("üè† ÊåáÂÆöÁîüÊïàÁæ§ËÅä (" + getGroupCountInTargetWxids(targetWxids) + "‰∏™)");
                    styleUtilityButton(selectGroupsButton);
                    selectGroupsButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showSelectTargetGroupsDialog(targetWxids, updateSelectTargetsButton); } });
                    selectGroupsButton.setVisibility(View.VISIBLE);
                } else {
                    selectFriendsButton.setVisibility(View.GONE);
                    selectGroupsButton.setVisibility(View.GONE);
                    rule.put("targetWxids", new HashSet());
                }
            }
        };

        final Runnable updateSelectExcludedButtons = new Runnable() {
            public void run() {
                Set excludedWxids = (Set) rule.get("excludedWxids");
                selectExcludeFriendsButton.setText("üë§ ÊéíÈô§Â•ΩÂèã (" + getFriendCountInTargetWxids(excludedWxids) + "‰∫∫)");
                styleUtilityButton(selectExcludeFriendsButton);
                selectExcludeFriendsButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showSelectExcludeFriendsDialog(excludedWxids, updateSelectExcludedButtons); } });
                selectExcludeGroupsButton.setText("üè† ÊéíÈô§Áæ§ËÅä (" + getGroupCountInTargetWxids(excludedWxids) + "‰∏™)");
                styleUtilityButton(selectExcludeGroupsButton);
                selectExcludeGroupsButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { showSelectExcludeGroupsDialog(excludedWxids, updateSelectExcludedButtons); } });
            }
        };
        
        targetTypeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                rule.put("targetType", (checkedId == targetTypeBothRadio.getId()) ? TARGET_TYPE_BOTH : TARGET_TYPE_NONE);
                updateSelectTargetsButton.run();
            }
        });
        
        int currentTargetType = (Integer) rule.get("targetType");
        if (currentTargetType == TARGET_TYPE_BOTH) targetTypeGroup.check(targetTypeBothRadio.getId());
        else targetTypeGroup.check(targetTypeNoneRadio.getId());
        updateSelectTargetsButton.run();
        updateSelectExcludedButtons.run();
        
        // --- Âç°Áâá8: ÂêØÁî®ÂºÄÂÖ≥ ---
        LinearLayout switchCard = createCardLayout();
        final LinearLayout enabledSwitchRow = createSwitchRow(getTopActivity(), "ÂêØÁî®Ê≠§ËßÑÂàô", (Boolean) rule.get("enabled"), new View.OnClickListener() {
            public void onClick(View v) {
                // ToggleÂ∑≤ÂÜÖÂµå
            }
        });
        // „Äê‰øÆÊîπ„Äë‰∏∫ËßÑÂàôÂºÄÂÖ≥Ê∑ªÂä†ÊèêÁ§∫
        TextView ruleEnabledPrompt = createPromptText("‚ö†Ô∏è ÂãæÈÄâÂêéÂêØÁî®Ê≠§ËßÑÂàô");
        switchCard.addView(enabledSwitchRow);
        switchCard.addView(ruleEnabledPrompt);
        layout.addView(switchCard);
        
        // --- Âç°Áâá9: ÂèòÈáèÂ∏ÆÂä© ---
        LinearLayout helpCard = createCardLayout();
        TextView helpText = new TextView(getTopActivity());
        helpText.setText("ÂèØÁî®ÂèòÈáè (‰ªÖÊñáÊú¨ÂõûÂ§ç):\n%senderName% - ÂèëÈÄÅËÄÖÊòµÁß∞(‰ºòÂÖàÊòæÁ§∫Â§áÊ≥®)\n%senderWxid% - ÂèëÈÄÅËÄÖwxid\n%groupName% - Áæ§ÂêçÁß∞(‰ªÖÁæ§ËÅä)\n%time% - ÂΩìÂâçÊó∂Èó¥\n%atSender% - @ÂèëÈÄÅËÄÖ (‰ªÖÁæ§ËÅä)");
        helpText.setTextSize(12);
        helpText.setTextColor(Color.parseColor("#666666"));
        helpCard.addView(helpText);
        layout.addView(helpCard);
        
        String keyword = (String) rule.get("keyword");
        String dialogTitle = keyword.isEmpty() ? "‚ûï Ê∑ªÂä†ËßÑÂàô" : "‚úèÔ∏è ÁºñËæëËßÑÂàô";
        String neutralButtonText = keyword.isEmpty() ? null : "üóëÔ∏è Âà†Èô§";
        DialogInterface.OnClickListener neutralListener = keyword.isEmpty() ? null : new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                rules.remove(rule);
                refreshCallback.run();
                saveAutoReplyRules(rules);
                toast("ËßÑÂàôÂ∑≤Âà†Èô§");
            }
        };

        // Ëé∑ÂèñÂºïÁî®ÂºÄÂÖ≥
        final CheckBox enabledCheckBox = (CheckBox) enabledSwitchRow.getChildAt(1);
        final CheckBox quoteCheckBox = (CheckBox) replyAsQuoteSwitchRow.getChildAt(1);

        final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), dialogTitle, scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                String keyword = keywordEdit.getText().toString().trim();
                String reply = replyEdit.getText().toString().trim();
                
                int matchType;
                if (matchTypeGroup.getCheckedRadioButtonId() == fullMatchRadio.getId()) matchType = MATCH_TYPE_EXACT;
                else if (matchTypeGroup.getCheckedRadioButtonId() == regexMatchRadio.getId()) matchType = MATCH_TYPE_REGEX;
                else if (matchTypeGroup.getCheckedRadioButtonId() == anyMatchRadio.getId()) matchType = MATCH_TYPE_ANY;
                else matchType = MATCH_TYPE_FUZZY;
                
                if (matchType == MATCH_TYPE_ANY) keyword = "";
                else if (keyword.isEmpty()) { toast("ÂÖ≥ÈîÆËØç‰∏çËÉΩ‰∏∫Á©∫"); return; }
                
                int replyType = (Integer) rule.get("replyType");
                if (replyType == REPLY_TYPE_TEXT) {
                    if (reply.isEmpty()) { toast("ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫"); return; }
                    rule.put("reply", reply);
                } else if (replyType == REPLY_TYPE_CARD) {
                    rule.put("reply", TextUtils.join(";;;", cardWxids));
                    if (cardWxids.isEmpty()) { toast("ÂêçÁâáWxid‰∏çËÉΩ‰∏∫Á©∫"); return; }
                } else if (replyType != REPLY_TYPE_XIAOZHI_AI && replyType != REPLY_TYPE_ZHILIA_AI) { // AIÁ±ªÂûã‰∏çÊ£ÄÊü•
                    if (mediaPaths.isEmpty()) { toast("Â™í‰ΩìÊñá‰ª∂Ë∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫"); return; }
                    for (String path : mediaPaths) {
                        File file = new File(path);
                        if (replyType == REPLY_TYPE_VOICE_FOLDER) {
                            if (!file.exists() || !file.isDirectory()) { toast("ÊåáÂÆöÁöÑËØ≠Èü≥Êñá‰ª∂Â§πÊó†ÊïàÊàñ‰∏çÂ≠òÂú®ÔºÅ"); return; }
                        } else if (replyType == REPLY_TYPE_FILE) {
                            if (!file.exists() || !file.isFile()) { toast("ÊåáÂÆöÁöÑÊñá‰ª∂Êó†ÊïàÊàñ‰∏çÂ≠òÂú®ÔºÅ"); return; }
                        } else {
                            if (!file.exists() || !file.isFile()) { toast("ÊåáÂÆöÁöÑÂ™í‰ΩìÊñá‰ª∂Êó†ÊïàÊàñ‰∏çÂ≠òÂú®ÔºÅ"); return; }
                        }
                    }
                }
                String startTime = startTimeEdit.getText().toString().trim();
                String endTime = endTimeEdit.getText().toString().trim();
                // „Äê‰ºòÂåñ„ÄëÊîæÂÆΩÈ™åËØÅÔºöÂÖÅËÆ∏‰ªÖËÆæÁΩÆÂºÄÂßãÊàñÁªìÊùüÔºà‰ΩÜÂ¶ÇÊûú‰∏§ËÄÖÈÉΩ‰∏çÁ©∫ÔºåÂàôËßÜ‰∏∫ËåÉÂõ¥Ôºâ
                // Â¶ÇÊûú‰ªÖ‰∏Ä‰∏™‰∏çÁ©∫Ôºåtoast ÊèêÈÜí‰ΩÜ‰∏çÈòªÂ°û‰øùÂ≠ò
                if ((!startTime.isEmpty() && endTime.isEmpty()) || (startTime.isEmpty() && !endTime.isEmpty())) {
                    toast("Âª∫ËÆÆÂêåÊó∂ËÆæÁΩÆÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥ÔºåÂê¶ÂàôËßÜ‰∏∫ÂçïÁÇπÊó∂Èó¥ÔºàÈùûËåÉÂõ¥Ôºâ");
                    // ‰∏ç returnÔºåÁªßÁª≠‰øùÂ≠ò
                }
                rule.put("keyword", keyword);
                rule.put("enabled", enabledCheckBox.isChecked());
                rule.put("matchType", matchType);
                
                int atTriggerType;
                if (atTriggerGroup.getCheckedRadioButtonId() == atTriggerMeRadio.getId()) atTriggerType = AT_TRIGGER_ME;
                else if (atTriggerGroup.getCheckedRadioButtonId() == atTriggerAllRadio.getId()) atTriggerType = AT_TRIGGER_ALL;
                else atTriggerType = AT_TRIGGER_NONE;
                rule.put("atTriggerType", atTriggerType);

                // „ÄêÊñ∞Â¢û„ÄëÊãç‰∏ÄÊãçËß¶ÂèëÁ±ªÂûã
                int patTriggerType;
                if (patTriggerGroup.getCheckedRadioButtonId() == patTriggerMeRadio.getId()) patTriggerType = PAT_TRIGGER_ME;
                else patTriggerType = PAT_TRIGGER_NONE;
                rule.put("patTriggerType", patTriggerType);

                try { rule.put("delaySeconds", Long.parseLong(delayEdit.getText().toString().trim())); } 
                catch (NumberFormatException e) { rule.put("delaySeconds", 0L); }
                rule.put("replyAsQuote", quoteCheckBox.isChecked());
                rule.put("startTime", startTime);
                rule.put("endTime", endTime);
                rule.put("mediaPaths", new ArrayList<String>(mediaPaths));
                // „ÄêÊñ∞Â¢û„Äë‰øùÂ≠òÂ™í‰ΩìÂª∂Ëøü
                try {
                    rule.put("mediaDelaySeconds", Long.parseLong(mediaDelayEdit.getText().toString().trim()));
                } catch (NumberFormatException e) {
                    rule.put("mediaDelaySeconds", 1L); // ÈªòËÆ§ÂÄº
                }
                compileRegexPatternForRule(rule);
                if (!rules.contains(rule)) rules.add(rule);
                refreshCallback.run();
                saveAutoReplyRules(rules);
                toast("ËßÑÂàôÂ∑≤‰øùÂ≠ò");
            }
        }, "‚ùå ÂèñÊ∂à", null, neutralButtonText, neutralListener);

        dialog.show();
    } catch (Exception e) {
        toast("ÂºπÁ™óÂ§±Ë¥•: " + e.getMessage());
        e.printStackTrace();
    }
}

private int getFriendCountInTargetWxids(Set targetWxids) {
    if (targetWxids == null || targetWxids.isEmpty()) return 0;
    int count = 0;
    if (sCachedFriendList == null) sCachedFriendList = getFriendList();
    if (sCachedFriendList != null) {
        for (Object wxidObj : targetWxids) {
            String wxid = (String) wxidObj;
            for (int i = 0; i < sCachedFriendList.size(); i++) {
                if (wxid.equals(((FriendInfo) sCachedFriendList.get(i)).getWxid())) {
                    count++;
                    break;
                }
            }
        }
    }
    return count;
}

private int getGroupCountInTargetWxids(Set targetWxids) {
    if (targetWxids == null || targetWxids.isEmpty()) return 0;
    int count = 0;
    if (sCachedGroupList == null) sCachedGroupList = getGroupList();
    if (sCachedGroupList != null) {
        for (Object wxidObj : targetWxids) {
            String wxid = (String) wxidObj;
            for (int i = 0; i < sCachedGroupList.size(); i++) {
                if (wxid.equals(((GroupInfo) sCachedGroupList.get(i)).getRoomId())) {
                    count++;
                    break;
                }
            }
        }
    }
    return count;
}

private void showSelectTargetFriendsDialog(final Set currentSelectedWxids, final Runnable updateButtonCallback) {
    showLoadingDialog("üë§ ÈÄâÊã©ÁîüÊïàÂ•ΩÂèã", "  Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedFriendList == null) sCachedFriendList = getFriendList();
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedFriendList == null || sCachedFriendList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Â•ΩÂèãÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedFriendList.size(); i++) {
                        FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                        String nickname = TextUtils.isEmpty(friendInfo.getNickname()) ? "Êú™Áü•ÊòµÁß∞" : friendInfo.getNickname();
                        String remark = friendInfo.getRemark();
                        String displayName = !TextUtils.isEmpty(remark) ? nickname + " (" + remark + ")" : nickname;
                        // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                        names.add("üë§ " + displayName + "\nID: " + friendInfo.getWxid());
                        ids.add(friendInfo.getWxid());
                    }
                    showMultiSelectDialog("‚ú® ÈÄâÊã©ÁîüÊïàÂ•ΩÂèã ‚ú®", names, ids, currentSelectedWxids, "üîç ÊêúÁ¥¢Â•ΩÂèã(ÊòµÁß∞/Â§áÊ≥®)...", updateButtonCallback, new Runnable() {
                        public void run() {
                            updateSelectAllButton((AlertDialog) null, null, null); // ÁÆÄÂåñÔºåÂÆûÈôÖÂú®ÈÄöÁî®ÊñπÊ≥ï‰∏≠Â§ÑÁêÜ
                        }
                    });
                }
            });
        }
    });
}

private void showSelectTargetGroupsDialog(final Set currentSelectedWxids, final Runnable updateButtonCallback) {
    showLoadingDialog("üè† ÈÄâÊã©ÁîüÊïàÁæ§ËÅä", "  Ê≠£Âú®Âä†ËΩΩÁæ§ËÅäÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedGroupList == null) sCachedGroupList = getGroupList();
            if (sCachedGroupMemberCounts == null) {
                sCachedGroupMemberCounts = new HashMap();
                if (sCachedGroupList != null) {
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        String groupId = ((GroupInfo) sCachedGroupList.get(i)).getRoomId();
                        if (groupId != null) sCachedGroupMemberCounts.put(groupId, new Integer(getGroupMemberCount(groupId)));
                    }
                }
            }
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedGroupList == null ||sCachedGroupList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Áæ§ËÅäÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        GroupInfo groupInfo = (GroupInfo) sCachedGroupList.get(i);
                        String groupName = TextUtils.isEmpty(groupInfo.getName()) ? "Êú™Áü•Áæ§ËÅä" : groupInfo.getName();
                        String groupId = groupInfo.getRoomId();
                        Integer memberCount = (Integer) sCachedGroupMemberCounts.get(groupId);
                        // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                        names.add("üè† " + groupName + " (" + (memberCount != null ? memberCount.intValue() : 0) + "‰∫∫)" + "\nID: " + groupId);
                        ids.add(groupId);
                    }
                    showMultiSelectDialog("‚ú® ÈÄâÊã©ÁîüÊïàÁæ§ËÅä ‚ú®", names, ids, currentSelectedWxids, "üîç ÊêúÁ¥¢Áæ§ËÅä...", updateButtonCallback, null);
                }
            });
        }
    });
}

private void showSelectExcludeFriendsDialog(final Set currentSelectedWxids, final Runnable updateButtonCallback) {
    showLoadingDialog("üë§ ÈÄâÊã©ÊéíÈô§Â•ΩÂèã", "  Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedFriendList == null) sCachedFriendList = getFriendList();
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedFriendList == null || sCachedFriendList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Â•ΩÂèãÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedFriendList.size(); i++) {
                        FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                        String nickname = TextUtils.isEmpty(friendInfo.getNickname()) ? "Êú™Áü•ÊòµÁß∞" : friendInfo.getNickname();
                        String remark = friendInfo.getRemark();
                        String displayName = !TextUtils.isEmpty(remark) ? nickname + " (" + remark + ")" : nickname;
                        // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                        names.add("üë§ " + displayName + "\nID: " + friendInfo.getWxid());
                        ids.add(friendInfo.getWxid());
                    }
                    showMultiSelectDialog("‚ú® ÈÄâÊã©ÊéíÈô§Â•ΩÂèã ‚ú®", names, ids, currentSelectedWxids, "üîç ÊêúÁ¥¢Â•ΩÂèã(ÊòµÁß∞/Â§áÊ≥®)...", updateButtonCallback, null);
                }
            });
        }
    });
}

private void showSelectExcludeGroupsDialog(final Set currentSelectedWxids, final Runnable updateButtonCallback) {
    showLoadingDialog("üè† ÈÄâÊã©ÊéíÈô§Áæ§ËÅä", "  Ê≠£Âú®Âä†ËΩΩÁæ§ËÅäÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedGroupList == null) sCachedGroupList = getGroupList();
            if (sCachedGroupMemberCounts == null) {
                sCachedGroupMemberCounts = new HashMap();
                if (sCachedGroupList != null) {
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        String groupId = ((GroupInfo) sCachedGroupList.get(i)).getRoomId();
                        if (groupId != null) sCachedGroupMemberCounts.put(groupId, new Integer(getGroupMemberCount(groupId)));
                    }
                }
            }
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedGroupList == null || sCachedGroupList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Áæ§ËÅäÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        GroupInfo groupInfo = (GroupInfo) sCachedGroupList.get(i);
                        String groupName = TextUtils.isEmpty(groupInfo.getName()) ? "Êú™Áü•Áæ§ËÅä" : groupInfo.getName();
                        String groupId = groupInfo.getRoomId();
                        Integer memberCount = (Integer) sCachedGroupMemberCounts.get(groupId);
                        // „ÄêÊñ∞Â¢û„ÄëÊòæÁ§∫IDÔºàÂÆåÊï¥IDÔºâ
                        names.add("üè† " + groupName + " (" + (memberCount != null ? memberCount.intValue() : 0) + "‰∫∫)" + "\nID: " + groupId);
                        ids.add(groupId);
                    }
                    showMultiSelectDialog("‚ú® ÈÄâÊã©ÊéíÈô§Áæ§ËÅä ‚ú®", names, ids, currentSelectedWxids, "üîç ÊêúÁ¥¢Áæ§ËÅä...", updateButtonCallback, null);
                }
            });
        }
    });
}

private void showLoadingDialog(String title, String message, final Runnable dataLoadTask) {
    LinearLayout initialLayout = new LinearLayout(getTopActivity());
    initialLayout.setOrientation(LinearLayout.HORIZONTAL);
    initialLayout.setPadding(50, 50, 50, 50);
    initialLayout.setGravity(Gravity.CENTER_VERTICAL);
    ProgressBar progressBar = new ProgressBar(getTopActivity());
    initialLayout.addView(progressBar);
    TextView loadingText = new TextView(getTopActivity());
    loadingText.setText(message);
    loadingText.setPadding(20, 0, 0, 0);
    initialLayout.addView(loadingText);
    final AlertDialog loadingDialog = buildCommonAlertDialog(getTopActivity(), title, initialLayout, null, null, "‚ùå ÂèñÊ∂à", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface d, int w) {
            d.dismiss();
        }
    }, null, null);
    loadingDialog.setCancelable(false);
    loadingDialog.show();
    new Thread(new Runnable() {
        public void run() {
            try {
                dataLoadTask.run();
            } finally {
                new Handler(Looper.getMainLooper()).post(new Runnable() {
                    public void run() {
                        loadingDialog.dismiss();
                    }
                });
            }
        }
    }).start();
}

private void showFriendSwitchDialog() {
    showLoadingDialog("üë• Â•ΩÂèãËá™Âä®ÂõûÂ§çÂºÄÂÖ≥", "  Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedFriendList == null) sCachedFriendList = getFriendList();
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedFriendList == null || sCachedFriendList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Â•ΩÂèãÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedFriendList.size(); i++) {
                        FriendInfo friendInfo = (FriendInfo) sCachedFriendList.get(i);
                        String nickname = TextUtils.isEmpty(friendInfo.getNickname()) ? "Êú™Áü•ÊòµÁß∞" : friendInfo.getNickname();
                        String remark = friendInfo.getRemark();
                        String displayName = !TextUtils.isEmpty(remark) ? nickname + " (" + remark + ")" : nickname;
                        names.add("üë§ " + displayName + "\nID: " + friendInfo.getWxid());
                        ids.add(friendInfo.getWxid());
                    }
                    final Set<String> originalEnabledFriends = getStringSet(AUTO_REPLY_ENABLED_FRIENDS_KEY, new HashSet<String>());
                    final Set<String> tempEnabledFriends = new HashSet<String>(originalEnabledFriends);
                    final boolean globalFriendEnabled = getBoolean(AUTO_REPLY_FRIEND_ENABLED_KEY, false);
                    ScrollView scrollView = new ScrollView(getTopActivity());
                    LinearLayout mainLayout = new LinearLayout(getTopActivity());
                    mainLayout.setOrientation(LinearLayout.VERTICAL);
                    mainLayout.setPadding(24, 24, 24, 24);
                    mainLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
                    scrollView.addView(mainLayout);
                    final LinearLayout globalSwitchRow = createSwitchRow(getTopActivity(), "ÂêØÁî®Â•ΩÂèãËá™Âä®ÂõûÂ§ç", globalFriendEnabled, new View.OnClickListener() {
                        public void onClick(View v) {}
                    });
                    mainLayout.addView(globalSwitchRow);
                    TextView friendPrompt = createPromptText("‚ö†Ô∏è ÂÖ®Â±ÄÂºÄÂÖ≥ÊéßÂà∂ÊâÄÊúâÂ•ΩÂèãÁöÑËá™Âä®ÂõûÂ§çÔºå‰∏ãÈù¢ÂèØÊåáÂÆöÂÖ∑‰ΩìÂ•ΩÂèã");
                    mainLayout.addView(friendPrompt);
                    final EditText searchEditText = createStyledEditText("üîç ÊêúÁ¥¢Â•ΩÂèã(ÊòµÁß∞/Â§áÊ≥®)...", "");
                    searchEditText.setSingleLine(true);
                    mainLayout.addView(searchEditText);
                    final ListView friendListView = new ListView(getTopActivity());
                    setupListViewTouchForScroll(friendListView);
                    friendListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
                    LinearLayout.LayoutParams friendListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
                    friendListView.setLayoutParams(friendListParams);
                    mainLayout.addView(friendListView);
                    final List currentFilteredFriendIds = new ArrayList();
                    final List currentFilteredFriendNames = new ArrayList();
                    final Runnable updateListRunnable = new Runnable() {
                        public void run() {
                            String searchText = searchEditText.getText().toString().toLowerCase();
                            currentFilteredFriendIds.clear();
                            currentFilteredFriendNames.clear();
                            for (int i = 0; i < names.size(); i++) {
                                String id = (String) ids.get(i);
                                String name = (String) names.get(i);
                                if (searchText.isEmpty() || name.toLowerCase().contains(searchText) || id.toLowerCase().contains(searchText)) {
                                    currentFilteredFriendIds.add(id);
                                    currentFilteredFriendNames.add(name);
                                }
                            }
                            ArrayAdapter adapter = new ArrayAdapter(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, currentFilteredFriendNames);
                            friendListView.setAdapter(adapter);
                            friendListView.clearChoices();
                            for (int j = 0; j < currentFilteredFriendIds.size(); j++) {
                                friendListView.setItemChecked(j, tempEnabledFriends.contains(currentFilteredFriendIds.get(j)));
                            }
                            adjustListViewHeight(friendListView, currentFilteredFriendIds.size());
                            final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                            if (currentDialog != null) {
                                updateSelectAllButton(currentDialog, currentFilteredFriendIds, tempEnabledFriends);
                            }
                        }
                    };
                    friendListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            String selectedId = (String) currentFilteredFriendIds.get(position);
                            if (friendListView.isItemChecked(position)) tempEnabledFriends.add(selectedId);
                            else tempEnabledFriends.remove(selectedId);
                            final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                            if (currentDialog != null) {
                                updateSelectAllButton(currentDialog, currentFilteredFriendIds, tempEnabledFriends);
                            }
                        }
                    });
                    final Handler searchHandler = new Handler(Looper.getMainLooper());
                    final Runnable searchRunnable = new Runnable() {
                        public void run() {
                            updateListRunnable.run();
                        }
                    };
                    searchEditText.addTextChangedListener(new TextWatcher() {
                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                            if (searchRunnable != null) searchHandler.removeCallbacks(searchRunnable);
                        }
                        public void afterTextChanged(Editable s) {
                            searchHandler.postDelayed(searchRunnable, 300);
                        }
                    });
                    
                    final CheckBox globalCheckBox = (CheckBox) globalSwitchRow.getChildAt(1);
                    
                    final DialogInterface.OnClickListener fullSelectListener = new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            boolean shouldSelectAll = shouldSelectAll(currentFilteredFriendIds, tempEnabledFriends);
                            for (int i = 0; i < currentFilteredFriendIds.size(); i++) {
                                String id = (String) currentFilteredFriendIds.get(i);
                                if (shouldSelectAll) {
                                    tempEnabledFriends.add(id);
                                } else {
                                    tempEnabledFriends.remove(id);
                                }
                                friendListView.setItemChecked(i, shouldSelectAll);
                            }
                            friendListView.getAdapter().notifyDataSetChanged();
                            friendListView.requestLayout();
                            updateSelectAllButton((AlertDialog) dialog, currentFilteredFriendIds, tempEnabledFriends);
                        }
                    };

                    final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), "‚ú® Â•ΩÂèãËá™Âä®ÂõûÂ§çÂºÄÂÖ≥ ‚ú®", scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            putBoolean(AUTO_REPLY_FRIEND_ENABLED_KEY, globalCheckBox.isChecked());
                            putStringSet(AUTO_REPLY_ENABLED_FRIENDS_KEY, tempEnabledFriends);
                            toast("Â•ΩÂèãËá™Âä®ÂõûÂ§çËÆæÁΩÆÂ∑≤‰øùÂ≠ò");
                        }
                    }, "‚ùå ÂèñÊ∂à", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    }, "ÂÖ®ÈÄâ", fullSelectListener);

                    dialog.setOnShowListener(new DialogInterface.OnShowListener() {
                        public void onShow(DialogInterface dialogInterface) {
                            setupUnifiedDialog((AlertDialog) dialogInterface);
                            Button neutralBtn = ((AlertDialog) dialogInterface).getButton(AlertDialog.BUTTON_NEUTRAL);
                            if (neutralBtn != null) {
                                neutralBtn.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View v) {
                                        fullSelectListener.onClick(dialog, AlertDialog.BUTTON_NEUTRAL);
                                    }
                                });
                            }
                        }
                    });
                    searchEditText.setTag(dialog);

                    dialog.show();
                    updateListRunnable.run();
                }
            });
        }
    });
}

private void showGroupSwitchDialog() {
    showLoadingDialog("üè† Áæ§ËÅäËá™Âä®ÂõûÂ§çÂºÄÂÖ≥", "  Ê≠£Âú®Âä†ËΩΩÁæ§ËÅäÂàóË°®...", new Runnable() {
        public void run() {
            if (sCachedGroupList == null) sCachedGroupList = getGroupList();
            if (sCachedGroupMemberCounts == null) {
                sCachedGroupMemberCounts = new HashMap();
                if (sCachedGroupList != null) {
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        String groupId = ((GroupInfo) sCachedGroupList.get(i)).getRoomId();
                        if (groupId != null) sCachedGroupMemberCounts.put(groupId, new Integer(getGroupMemberCount(groupId)));
                    }
                }
            }
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                public void run() {
                    if (sCachedGroupList == null || sCachedGroupList.isEmpty()) {
                        toast("Êú™Ëé∑ÂèñÂà∞Áæ§ËÅäÂàóË°®");
                        return;
                    }
                    List names = new ArrayList();
                    List ids = new ArrayList();
                    for (int i = 0; i < sCachedGroupList.size(); i++) {
                        GroupInfo groupInfo = (GroupInfo) sCachedGroupList.get(i);
                        String groupName = TextUtils.isEmpty(groupInfo.getName()) ? "Êú™Áü•Áæ§ËÅä" : groupInfo.getName();
                        String groupId = groupInfo.getRoomId();
                        Integer memberCount = (Integer) sCachedGroupMemberCounts.get(groupId);
                        names.add("üè† " + groupName + " (" + (memberCount != null ? memberCount.intValue() : 0) + "‰∫∫)" + "\nID: " + groupId);
                        ids.add(groupId);
                    }
                    final Set<String> originalEnabledGroups = getStringSet(AUTO_REPLY_ENABLED_GROUPS_KEY, new HashSet<String>());
                    final Set<String> tempEnabledGroups = new HashSet<String>(originalEnabledGroups);
                    final boolean globalGroupEnabled = getBoolean(AUTO_REPLY_GROUP_ENABLED_KEY, false);
                    ScrollView scrollView = new ScrollView(getTopActivity());
                    LinearLayout mainLayout = new LinearLayout(getTopActivity());
                    mainLayout.setOrientation(LinearLayout.VERTICAL);
                    mainLayout.setPadding(24, 24, 24, 24);
                    mainLayout.setBackgroundColor(Color.parseColor("#FAFBF9"));
                    scrollView.addView(mainLayout);
                    final LinearLayout globalSwitchRow = createSwitchRow(getTopActivity(), "ÂêØÁî®Áæ§ËÅäËá™Âä®ÂõûÂ§ç", globalGroupEnabled, new View.OnClickListener() {
                        public void onClick(View v) {}
                    });
                    mainLayout.addView(globalSwitchRow);
                    TextView groupPrompt = createPromptText("‚ö†Ô∏è ÂÖ®Â±ÄÂºÄÂÖ≥ÊéßÂà∂ÊâÄÊúâÁæ§ËÅäÁöÑËá™Âä®ÂõûÂ§çÔºå‰∏ãÈù¢ÂèØÊåáÂÆöÂÖ∑‰ΩìÁæ§ËÅä");
                    mainLayout.addView(groupPrompt);
                    final EditText searchEditText = createStyledEditText("üîç ÊêúÁ¥¢Áæ§ËÅä...", "");
                    searchEditText.setSingleLine(true);
                    mainLayout.addView(searchEditText);
                    final ListView groupListView = new ListView(getTopActivity());
                    setupListViewTouchForScroll(groupListView);
                    groupListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
                    LinearLayout.LayoutParams groupListParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, dpToPx(50));
                    groupListView.setLayoutParams(groupListParams);
                    mainLayout.addView(groupListView);
                    final List currentFilteredGroupIds = new ArrayList();
                    final List currentFilteredGroupNames = new ArrayList();
                    final Runnable updateListRunnable = new Runnable() {
                        public void run() {
                            String searchText = searchEditText.getText().toString().toLowerCase();
                            currentFilteredGroupIds.clear();
                            currentFilteredGroupNames.clear();
                            for (int i = 0; i < names.size(); i++) {
                                String id = (String) ids.get(i);
                                String name = (String) names.get(i);
                                if (searchText.isEmpty() || name.toLowerCase().contains(searchText) || id.toLowerCase().contains(searchText)) {
                                    currentFilteredGroupIds.add(id);
                                    currentFilteredGroupNames.add(name);
                                }
                            }
                            ArrayAdapter adapter = new ArrayAdapter(getTopActivity(), android.R.layout.simple_list_item_multiple_choice, currentFilteredGroupNames);
                            groupListView.setAdapter(adapter);
                            groupListView.clearChoices();
                            for (int j = 0; j < currentFilteredGroupIds.size(); j++) {
                                groupListView.setItemChecked(j, tempEnabledGroups.contains(currentFilteredGroupIds.get(j)));
                            }
                            adjustListViewHeight(groupListView, currentFilteredGroupIds.size());
                            final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                            if (currentDialog != null) {
                                updateSelectAllButton(currentDialog, currentFilteredGroupIds, tempEnabledGroups);
                            }
                        }
                    };
                    groupListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            String selectedId = (String) currentFilteredGroupIds.get(position);
                            if (groupListView.isItemChecked(position)) tempEnabledGroups.add(selectedId);
                            else tempEnabledGroups.remove(selectedId);
                            final AlertDialog currentDialog = (AlertDialog) searchEditText.getTag();
                            if (currentDialog != null) {
                                updateSelectAllButton(currentDialog, currentFilteredGroupIds, tempEnabledGroups);
                            }
                        }
                    });
                    final Handler searchHandler = new Handler(Looper.getMainLooper());
                    final Runnable searchRunnable = new Runnable() {
                        public void run() {
                            updateListRunnable.run();
                        }
                    };
                    searchEditText.addTextChangedListener(new TextWatcher() {
                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                            if (searchRunnable != null) searchHandler.removeCallbacks(searchRunnable);
                        }
                        public void afterTextChanged(Editable s) {
                            searchHandler.postDelayed(searchRunnable, 300);
                        }
                    });
                    
                    final CheckBox globalCheckBox = (CheckBox) globalSwitchRow.getChildAt(1);
                    
                    final DialogInterface.OnClickListener fullSelectListener = new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            boolean shouldSelectAll = shouldSelectAll(currentFilteredGroupIds, tempEnabledGroups);
                            for (int i = 0; i < currentFilteredGroupIds.size(); i++) {
                                String id = (String) currentFilteredGroupIds.get(i);
                                if (shouldSelectAll) {
                                    tempEnabledGroups.add(id);
                                } else {
                                    tempEnabledGroups.remove(id);
                                }
                                groupListView.setItemChecked(i, shouldSelectAll);
                            }
                            groupListView.getAdapter().notifyDataSetChanged();
                            groupListView.requestLayout();
                            updateSelectAllButton((AlertDialog) dialog, currentFilteredGroupIds, tempEnabledGroups);
                        }
                    };

                    final AlertDialog dialog = buildCommonAlertDialog(getTopActivity(), "‚ú® Áæ§ËÅäËá™Âä®ÂõûÂ§çÂºÄÂÖ≥ ‚ú®", scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            putBoolean(AUTO_REPLY_GROUP_ENABLED_KEY, globalCheckBox.isChecked());
                            putStringSet(AUTO_REPLY_ENABLED_GROUPS_KEY, tempEnabledGroups);
                            toast("Áæ§ËÅäËá™Âä®ÂõûÂ§çËÆæÁΩÆÂ∑≤‰øùÂ≠ò");
                        }
                    }, "‚ùå ÂèñÊ∂à", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    }, "ÂÖ®ÈÄâ", fullSelectListener);

                    dialog.setOnShowListener(new DialogInterface.OnShowListener() {
                        public void onShow(DialogInterface dialogInterface) {
                            setupUnifiedDialog((AlertDialog) dialogInterface);
                            Button neutralBtn = ((AlertDialog) dialogInterface).getButton(AlertDialog.BUTTON_NEUTRAL);
                            if (neutralBtn != null) {
                                neutralBtn.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View v) {
                                        fullSelectListener.onClick(dialog, AlertDialog.BUTTON_NEUTRAL);
                                    }
                                });
                            }
                        }
                    });
                    searchEditText.setTag(dialog);
                    
                    dialog.show();
                    updateListRunnable.run();
                }
            });
        }
    });
}

private List loadAutoReplyRules() {
    Set rulesSet = getStringSet(AUTO_REPLY_RULES_KEY, new HashSet());
    List rules = new ArrayList();
    for (Object ruleStr : rulesSet) {
        Map<String, Object> rule = ruleFromString((String) ruleStr);
        if (rule != null) rules.add(rule);
    }
    if (rules.isEmpty()) {
        rules.add(createAutoReplyRuleMap("‰Ω†Â•Ω", "ÊÇ®Â•ΩÔºÅÊàëÁé∞Âú®‰∏çÂú®ÔºåÁ®çÂêéÂõûÂ§çÊÇ®„ÄÇ", true, MATCH_TYPE_FUZZY, new HashSet(), TARGET_TYPE_NONE, AT_TRIGGER_NONE, 0, false, REPLY_TYPE_TEXT, new ArrayList()));
        rules.add(createAutoReplyRuleMap("Âú®Âêó", "ÊàëÊöÇÊó∂‰∏çÂú®ÔºåÊúâ‰∫ãËØ∑ÁïôË®Ä„ÄÇ", true, MATCH_TYPE_FUZZY, new HashSet(), TARGET_TYPE_NONE, AT_TRIGGER_NONE, 0, false, REPLY_TYPE_TEXT, new ArrayList()));
    }
    return rules;
}

private void saveAutoReplyRules(List rules) {
    Set rulesSet = new HashSet();
    for (int i = 0; i < rules.size(); i++) {
        rulesSet.add(ruleMapToString((Map<String, Object>) rules.get(i)));
    }
    putStringSet(AUTO_REPLY_RULES_KEY, rulesSet);
}

// =================================================================================
// ========================== START: AI ÈÖçÁΩÆ UI ==========================
// =================================================================================

private void showAIConfigDialog() {
    Activity activity = getTopActivity();
    if (activity == null) {
        toast("Êó†Ê≥ïËé∑ÂèñÂà∞ÂΩìÂâçÁ™óÂè£ÔºåÊó†Ê≥ïÊòæÁ§∫AIÈÖçÁΩÆ");
        return;
    }
    
    ScrollView scrollView = new ScrollView(activity);
    LinearLayout layout = new LinearLayout(activity);
    layout.setOrientation(LinearLayout.VERTICAL);
    layout.setPadding(24, 24, 24, 24);
    layout.setBackgroundColor(Color.parseColor("#FAFBF9"));
    scrollView.addView(layout);
    
    // --- Âç°Áâá1: ÊúçÂä°ÈÖçÁΩÆ ---
    LinearLayout configCard = createCardLayout();
    configCard.addView(createSectionTitle("ÊúçÂä°ÈÖçÁΩÆ"));
    configCard.addView(createTextView(activity, "WSÂú∞ÂùÄ:", 14, 0));
    final EditText wsEdit = createStyledEditText("WebSocket Server URL", getString(XIAOZHI_CONFIG_KEY, XIAOZHI_SERVE_KEY, "wss://api.tenclass.net/xiaozhi/v1/"));
    configCard.addView(wsEdit);
    configCard.addView(createTextView(activity, "OTAÂú∞ÂùÄ:", 14, 0));
    final EditText otaEdit = createStyledEditText("OTA Server URL", getString(XIAOZHI_CONFIG_KEY, XIAOZHI_OTA_KEY, "https://api.tenclass.net/xiaozhi/ota/"));
    configCard.addView(otaEdit);
    configCard.addView(createTextView(activity, "ÊéßÂà∂Âè∞Âú∞ÂùÄ:", 14, 0));
    final EditText consoleEdit = createStyledEditText("Console URL", getString(XIAOZHI_CONFIG_KEY, XIAOZHI_CONSOLE_KEY, "https://xiaozhi.me/console/agents"));
    configCard.addView(consoleEdit);
    layout.addView(configCard);

    // --- Âç°Áâá2: ËÆæÂ§á‰ø°ÊÅØ ---
    LinearLayout deviceCard = createCardLayout();
    deviceCard.addView(createSectionTitle("ËÆæÂ§á‰ø°ÊÅØ"));
    TextView macText = new TextView(activity);
    macText.setText("MACÂú∞ÂùÄ: " + getDeviceMac(activity));
    macText.setTextSize(14);
    macText.setTextColor(Color.parseColor("#333333"));
    deviceCard.addView(macText);
    TextView uuidText = new TextView(activity);
    uuidText.setText("UUID: " + getDeviceUUID(activity));
    uuidText.setTextSize(14);
    uuidText.setTextColor(Color.parseColor("#333333"));
    deviceCard.addView(uuidText);
    layout.addView(deviceCard);

    // --- Âç°Áâá3: Êìç‰ΩúÊåâÈíÆ ---
    LinearLayout buttonCard = createCardLayout();
    Button bindButton = new Button(activity);
    bindButton.setText("ÁªëÂÆöËÆæÂ§á");
    styleUtilityButton(bindButton);
    bindButton.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v) {
            showBindDialog();
        }
    });
    buttonCard.addView(bindButton);
    layout.addView(buttonCard);
    
    final AlertDialog dialog = buildCommonAlertDialog(activity, "‚ú® Â∞èÊô∫AI ÈÖçÁΩÆ ‚ú®", scrollView, "‚úÖ ‰øùÂ≠ò", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int which) {
            putString(XIAOZHI_CONFIG_KEY, XIAOZHI_SERVE_KEY, wsEdit.getText().toString());
            putString(XIAOZHI_CONFIG_KEY, XIAOZHI_OTA_KEY, otaEdit.getText().toString());
            putString(XIAOZHI_CONFIG_KEY, XIAOZHI_CONSOLE_KEY, consoleEdit.getText().toString());
            toast("Â∞èÊô∫AIÈÖçÁΩÆÂ∑≤‰øùÂ≠ò");
        }
    }, "‚ùå ÂèñÊ∂à", null, null, null);

    dialog.show();
}

private void showBindDialog() {
    final Activity activity = getTopActivity();
    if (activity == null) {
        toast("Êó†Ê≥ïËé∑ÂèñÂà∞ÂΩìÂâçÁ™óÂè£ÔºåÊó†Ê≥ïÊòæÁ§∫ÁªëÂÆöÂØπËØùÊ°Ü");
        return;
    }
    
    ScrollView scrollView = new ScrollView(activity);
    final TextView messageView = new TextView(activity);
    messageView.setPadding(57, 20, 57, 20);
    messageView.setTextIsSelectable(true);
    messageView.setText("Ê≠£Âú®Ëé∑ÂèñËÆæÂ§á‰ø°ÊÅØ...");
    messageView.setTextSize(14);
    messageView.setTextColor(Color.parseColor("#333333"));
    scrollView.addView(messageView);

    final AlertDialog dialog = buildCommonAlertDialog(activity, "‚ú® ÁªëÂÆöËÆæÂ§á ‚ú®", scrollView, null, null, "‚ùå ÂÖ≥Èó≠", null, null, null);
    dialog.show();

    new Thread(new Runnable() {
        public void run() {
            try {
                String uuid = getDeviceUUID(activity);
                String mac = getDeviceMac(activity);
                
                final SpannableStringBuilder initialMessage = new SpannableStringBuilder();
                addStyledText(initialMessage, "UUID: ", "#3860AF", 14);
                addStyledText(initialMessage, uuid + "\n", "#777168", 13);
                addStyledText(initialMessage, "MAC: ", "#3860AF", 14);
                addStyledText(initialMessage, mac, "#777168", 13);
                
                activity.runOnUiThread(new Runnable() { 
                    public void run() { 
                        messageView.setText(initialMessage); 
                    } 
                });
                
                Map header = new HashMap();
                header.put("client-id", uuid);
                header.put("device-id", mac);
                
                String otaUrl = getString(XIAOZHI_CONFIG_KEY, XIAOZHI_OTA_KEY, "https://api.tenclass.net/xiaozhi/ota/");
                String jsonData = httpPost(otaUrl, "{\"application\":{\"name\":\"xiaozhi-web-test\",\"version\":\"1.0.0\",\"idf_version\":\"1.0.0\"},\"ota\":{\"label\":\"xiaozhi-web\"},\"mac_address\":\"" + mac + "\"}", header);
                
                if (jsonData == null) {
                     activity.runOnUiThread(new Runnable() { 
                         public void run() { 
                             messageView.append("\n\nËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÊàñOTAÂú∞ÂùÄ„ÄÇ"); 
                         } 
                     });
                     return;
                }

                JSONObject jsonObj = JSON.parseObject(jsonData);
                final SpannableStringBuilder updatedMessage = new SpannableStringBuilder(initialMessage);

                if (jsonObj.containsKey("activation")) {
                    addStyledText(updatedMessage, "\n\nÊ≠£Âú®Ëé∑ÂèñÈ™åËØÅÁ†Å...", "#8C8C8C", 18);
                    JSONObject activationObj = jsonObj.getJSONObject("activation");
                    String code = activationObj.getString("code");
                    addStyledText(updatedMessage, "\nÈ™åËØÅÁ†Å: ", "#3860AF", 14);
                    addStyledText(updatedMessage, code, "#409EFF", 17);
                    addStyledText(updatedMessage, "\n\nÈ™åËØÅÁ†ÅÂ∑≤Ëé∑Âèñ", "#8C8C8C", 18);
                    addStyledText(updatedMessage, "\nÂâçÂæÄÊéßÂà∂Âè∞ÁªëÂÆöËÆæÂ§á:\n", "#3860AF", 14);
                    String consoleUrl = getString(XIAOZHI_CONFIG_KEY, XIAOZHI_CONSOLE_KEY, "https://xiaozhi.me/console/agents");
                    addStyledText(updatedMessage, consoleUrl, "#2F923D", 15);
                } else if (jsonObj.containsKey("error")) {
                    String error = jsonObj.getString("error");
                    addStyledText(updatedMessage, "\n\nÂá∫Áé∞ÈîôËØØ: ", "#E53935", 14);
                    addStyledText(updatedMessage, error, "#777168", 13);
                } else if (jsonObj.containsKey("firmware")) {
                    JSONObject firmwareObj = jsonObj.getJSONObject("firmware");
                    String version = firmwareObj.getString("version");
                    addStyledText(updatedMessage, "\n\nËÆæÂ§áÂ∑≤ÁªëÂÆö", "#8C8C8C", 18);
                    addStyledText(updatedMessage, "\nÂõ∫‰ª∂ÁâàÊú¨: ", "#3860AF", 14);
                    addStyledText(updatedMessage, version, "#777168", 15);
                }
                
                activity.runOnUiThread(new Runnable() { 
                    public void run() { 
                        messageView.setText(updatedMessage); 
                    } 
                });
            } catch (Exception e) {
                final String errorMsg = "Âá∫Áé∞ÈîôËØØ: " + e.getMessage();
                activity.runOnUiThread(new Runnable() { 
                    public void run() { 
                        messageView.setText(errorMsg); 
                    } 
                });
            }
        }
    }).start();
}

private void addStyledText(SpannableStringBuilder builder, String text, String color, int textSize) {
    int start = builder.length();
    builder.append(text);
    int end = builder.length();
    builder.setSpan(new ForegroundColorSpan(Color.parseColor(color)), start, end, 0);
    builder.setSpan(new AbsoluteSizeSpan(textSize, true), start, end, 0);
}
// „ÄêÊñ∞Â¢û„ÄëÂèçÂ∞ÑËé∑ÂèñObjectÊñπÊ≥ïÔºàÁî®‰∫éPatMsgÔºâ
private Object invokeObjectMethod(Object obj, String methodName) {
    if (obj == null) return null;
    try {
        Method method = obj.getClass().getMethod(methodName);
        return method.invoke(obj);
    } catch (Exception e) {
        log("Error invoking object method: " + methodName + " - " + e.getMessage());
        return null;
    }
}

// „ÄêÊñ∞Â¢û„ÄëÊó∂Èó¥ÈÄâÊã©Âô®ÂØπËØùÊ°Ü
private void showTimePickerDialog(final EditText timeEdit) {
    final AlertDialog timeDialog = new AlertDialog.Builder(getTopActivity()).create();
    LinearLayout timeLayout = new LinearLayout(getTopActivity());
    timeLayout.setOrientation(LinearLayout.VERTICAL);
    timeLayout.setPadding(32, 32, 32, 32);
    TimePicker timePicker = new TimePicker(getTopActivity());
    timePicker.setIs24HourView(true);
    timeLayout.addView(timePicker);
    timeDialog.setView(timeLayout);
    timeDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Á°ÆÂÆö", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int which) {
            int hour = timePicker.getCurrentHour();
            int minute = timePicker.getCurrentMinute();
            String timeStr = String.format(Locale.getDefault(), "%02d:%02d", hour, minute);
            timeEdit.setText(timeStr);
        }
    });
    timeDialog.setOnShowListener(new DialogInterface.OnShowListener() {
        public void onShow(DialogInterface d) {
            setupUnifiedDialog(timeDialog);
        }
    });
    timeDialog.show();
}

// „ÄêÊñ∞Â¢û„ÄëÁªü‰∏ÄËÆæÁΩÆÂØπËØùÊ°ÜÊ†∑Âºè
private void setupUnifiedDialog(AlertDialog dialog) {
    GradientDrawable dialogBg = new GradientDrawable();
    dialogBg.setCornerRadius(48);
    dialogBg.setColor(Color.parseColor("#FAFBF9"));
    dialog.getWindow().setBackgroundDrawable(dialogBg);
    styleDialogButtons(dialog);
}

// --- Êñ∞Â¢ûÁöÑÈÖçÁΩÆËØªÂÜôÊñπÊ≥ï ---
private void putString(String setName, String itemName, String value) {
    String existingData = getString(setName, "{}");
    try {
        JSONObject json = JSON.parseObject(existingData);
        json.put(itemName, value);
        putString(setName, json.toString());
    } catch (Exception e) {
        JSONObject json = new JSONObject();
        json.put(itemName, value);
        putString(setName, json.toString());
    }
}

private String getString(String setName, String itemName, String defaultValue) {
    String data = getString(setName, "{}");
    try {
        JSONObject json = JSON.parseObject(data);
        if (json.containsKey(itemName)) {
            return json.getString(itemName);
        }
    } catch (Exception e) {
        // ignore
    }
    return defaultValue;
}